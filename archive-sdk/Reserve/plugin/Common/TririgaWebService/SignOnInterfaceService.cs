//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=1.1.4322.2032.
// 
using System.Diagnostics;
using System.Xml.Serialization;
using System;
using System.Net;
using System.Web.Services.Protocols;
using System.ComponentModel;
using System.Web.Services;

namespace Metreos.Common.Reserve
{
    /// <remarks/>
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="AuthenticationSoapBinding", Namespace="urn:Authentication")]
    public class SignOnInterfaceService : System.Web.Services.Protocols.SoapHttpClientProtocol 
    {

        public void SetUrl(string ip)
        {
            SetUrl(ip, null, null, false);
        }

        public void SetUrl(string ip, string port, string proxyUrl, bool secure)
        {
            if(proxyUrl != null)
            {
                this.Proxy = new WebProxy(proxyUrl);
            }
            this.Url = String.Format("http{2}://{0}:{1}/services/Authentication", ip, port == null ? "8001" : port, secure ? "s" : String.Empty);
        }
        /// <remarks/>
        public SignOnInterfaceService() 
        {
            this.Url = "http://app1env51.prd.tririga.net:8001/services/Authentication";
        }
    
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:Authentication", ResponseNamespace="urn:Authentication")]
        [return: System.Xml.Serialization.SoapElementAttribute("signOnReturn")]
        public string signOn(string userName, string password) 
        {
            object[] results = this.Invoke("signOn", new object[] {
                                                                      userName,
                                                                      password});
            return ((string)(results[0]));
        }
    
        /// <remarks/>
        public System.IAsyncResult BeginsignOn(string userName, string password, System.AsyncCallback callback, object asyncState) 
        {
            return this.BeginInvoke("signOn", new object[] {
                                                               userName,
                                                               password}, callback, asyncState);
        }
    
        /// <remarks/>
        public string EndsignOn(System.IAsyncResult asyncResult) 
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
    
        /// <remarks/>
        [System.Web.Services.Protocols.SoapRpcMethodAttribute("", RequestNamespace="urn:Authentication", ResponseNamespace="urn:Authentication")]
        [return: System.Xml.Serialization.SoapElementAttribute("signOutReturn")]
        public string signOut(string securityToken, long userId) 
        {
            object[] results = this.Invoke("signOut", new object[] {
                                                                       securityToken,
                                                                       userId});
            return ((string)(results[0]));
        }
    
        /// <remarks/>
        public System.IAsyncResult BeginsignOut(string securityToken, long userId, System.AsyncCallback callback, object asyncState) 
        {
            return this.BeginInvoke("signOut", new object[] {
                                                                securityToken,
                                                                userId}, callback, asyncState);
        }
    
        /// <remarks/>
        public string EndsignOut(System.IAsyncResult asyncResult) 
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
    }
}