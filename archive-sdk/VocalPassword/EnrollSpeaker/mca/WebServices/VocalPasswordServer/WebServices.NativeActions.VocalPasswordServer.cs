//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.2032
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace WebServices.NativeActions.VocalPasswordServer
{
    using System;
    using WebServices.Base.VocalPasswordServer;
    
    [Metreos.PackageGeneratorCore.Attributes.PackageDecl("WebServices.NativeActions.VocalPasswordServer", "")]
    public class Enroll : Metreos.ApplicationFramework.INativeAction
    {
        private Metreos.LoggingFramework.LogWriter log;
        private string url;
        private string proxyurl;
        private string speakerid;
        private string speakersubid;
        private string audio;
        private string configsetname;
        private string enrollattributes;
        private int requestid;
        private WebServices.NativeTypes.VocalPasswordServer.EnrollStatusType result;
        public virtual Metreos.LoggingFramework.LogWriter Log
        {
            get
            {
                return log;
            }
            set
            {
                log = value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("Url", false)]
        public virtual string Url
        {
            get
            {
                return @url;
            }
            set
            {
                @url = @value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("ProxyUrl", false)]
        public virtual string ProxyUrl
        {
            get
            {
                return @proxyurl;
            }
            set
            {
                @proxyurl = @value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("SpeakerId", false)]
        public virtual string SpeakerId
        {
            get
            {
                return @speakerid;
            }
            set
            {
                @speakerid = @value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("SpeakerSubId", false)]
        public virtual string SpeakerSubId
        {
            get
            {
                return @speakersubid;
            }
            set
            {
                @speakersubid = @value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("Audio", false)]
        public virtual string Audio
        {
            get
            {
                return @audio;
            }
            set
            {
                @audio = @value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("ConfigSetName", false)]
        public virtual string ConfigSetName
        {
            get
            {
                return @configsetname;
            }
            set
            {
                @configsetname = @value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("EnrollAttributes", false)]
        public virtual string EnrollAttributes
        {
            get
            {
                return @enrollattributes;
            }
            set
            {
                @enrollattributes = @value;
            }
        }
        [Metreos.ApplicationFramework.ResultDataField("RequestId")]
        public virtual int RequestId
        {
            get
            {
                return @requestid;
            }
            set
            {
                @requestid = value;
            }
        }
        [Metreos.ApplicationFramework.ResultDataField("Result")]
        public virtual WebServices.NativeTypes.VocalPasswordServer.EnrollStatusType Result
        {
            get
            {
                return @result;
            }
            set
            {
                @result = value;
            }
        }
        public virtual bool ValidateInput()
        {
            return true;
        }
        public virtual void Clear()
        {
            @url = null;
            @proxyurl = null;
            @speakerid = null;
            @speakersubid = null;
            @audio = null;
            @configsetname = null;
            @enrollattributes = null;
            @requestid = new System.Int32();
            @result = null;
        }
        public virtual WebServices.Base.VocalPasswordServer.VocalPasswordServer CreateService(string proxyPath)
        {
            WebServices.Base.VocalPasswordServer.VocalPasswordServer _metreosProxyService = new WebServices.Base.VocalPasswordServer.VocalPasswordServer();
            if (proxyPath != null && proxyPath != String.Empty && proxyPath != "NULL")
            {
                System.Net.WebProxy proxy = new System.Net.WebProxy(proxyPath);
                _metreosProxyService.Proxy = proxy;
            }
            return _metreosProxyService;
        }
        [Metreos.PackageGeneratorCore.Attributes.ActionAttribute("Enroll", false, "Enroll", "Enroll web service request")]
        public virtual string Execute(Metreos.ApplicationFramework.SessionData sessionData, Metreos.Core.IConfigUtility config)
        {
            WebServices.Base.VocalPasswordServer.VocalPasswordServer _metreosProxyService = null;
            try
            {
                _metreosProxyService = CreateService(proxyurl);
                if (url != null)
                {
                    _metreosProxyService.Url = url;
                }
                System.String __speakerid = @speakerid;
                System.String __speakersubid = @speakersubid;
                System.String __audio = @audio;
                System.String __configsetname = @configsetname;
                System.String __enrollattributes = @enrollattributes;
                WebServices.Base.VocalPasswordServer.EnrollStatus __result = _metreosProxyService.Enroll(__speakerid, __speakersubid, __audio, __configsetname, __enrollattributes, out requestid);
                result = new WebServices.NativeTypes.VocalPasswordServer.EnrollStatusType();
                result.Value = __result;
                return Metreos.Interfaces.IApp.VALUE_SUCCESS;
            }
            catch (System.Exception e)
            {
                log.Write(System.Diagnostics.TraceLevel.Error, e.ToString() );
                return Metreos.Interfaces.IApp.VALUE_FAILURE;
            }
            finally
            {
                if (_metreosProxyService != null)
                {
                    _metreosProxyService.Dispose();
                }
            }
        }
    }
    public class Train : Metreos.ApplicationFramework.INativeAction
    {
        private Metreos.LoggingFramework.LogWriter log;
        private string url;
        private string proxyurl;
        private string speakerid;
        private string speakersubid;
        private string configsetname;
        private int result;
        public virtual Metreos.LoggingFramework.LogWriter Log
        {
            get
            {
                return log;
            }
            set
            {
                log = value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("Url", false)]
        public virtual string Url
        {
            get
            {
                return @url;
            }
            set
            {
                @url = @value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("ProxyUrl", false)]
        public virtual string ProxyUrl
        {
            get
            {
                return @proxyurl;
            }
            set
            {
                @proxyurl = @value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("SpeakerId", false)]
        public virtual string SpeakerId
        {
            get
            {
                return @speakerid;
            }
            set
            {
                @speakerid = @value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("SpeakerSubId", false)]
        public virtual string SpeakerSubId
        {
            get
            {
                return @speakersubid;
            }
            set
            {
                @speakersubid = @value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("ConfigSetName", false)]
        public virtual string ConfigSetName
        {
            get
            {
                return @configsetname;
            }
            set
            {
                @configsetname = @value;
            }
        }
        [Metreos.ApplicationFramework.ResultDataField("Result")]
        public virtual int Result
        {
            get
            {
                return @result;
            }
            set
            {
                @result = value;
            }
        }
        public virtual bool ValidateInput()
        {
            return true;
        }
        public virtual void Clear()
        {
            @url = null;
            @proxyurl = null;
            @speakerid = null;
            @speakersubid = null;
            @configsetname = null;
            @result = new System.Int32();
        }
        public virtual WebServices.Base.VocalPasswordServer.VocalPasswordServer CreateService(string proxyPath)
        {
            WebServices.Base.VocalPasswordServer.VocalPasswordServer _metreosProxyService = new WebServices.Base.VocalPasswordServer.VocalPasswordServer();
            if (proxyPath != null && proxyPath != String.Empty && proxyPath != "NULL")
            {
                System.Net.WebProxy proxy = new System.Net.WebProxy(proxyPath);
                _metreosProxyService.Proxy = proxy;
            }
            return _metreosProxyService;
        }
        [Metreos.PackageGeneratorCore.Attributes.ActionAttribute("Train", false, "Train", "Train web service request")]
        public virtual string Execute(Metreos.ApplicationFramework.SessionData sessionData, Metreos.Core.IConfigUtility config)
        {
            WebServices.Base.VocalPasswordServer.VocalPasswordServer _metreosProxyService = null;
            try
            {
                _metreosProxyService = CreateService(proxyurl);
                if (url != null)
                {
                    _metreosProxyService.Url = url;
                }
                System.String __speakerid = @speakerid;
                System.String __speakersubid = @speakersubid;
                System.String __configsetname = @configsetname;
                System.Int32 __result = _metreosProxyService.Train(__speakerid, __speakersubid, __configsetname);
                result = __result;
                return Metreos.Interfaces.IApp.VALUE_SUCCESS;
            }
            catch (System.Exception e)
            {
                log.Write(System.Diagnostics.TraceLevel.Error, e.ToString() );
                return Metreos.Interfaces.IApp.VALUE_FAILURE;
            }
            finally
            {
                if (_metreosProxyService != null)
                {
                    _metreosProxyService.Dispose();
                }
            }
        }
    }
    public class Verify : Metreos.ApplicationFramework.INativeAction
    {
        private Metreos.LoggingFramework.LogWriter log;
        private string url;
        private string proxyurl;
        private string speakerid;
        private string speakersubid;
        private string audio;
        private string configsetname;
        private int requestid;
        private WebServices.NativeTypes.VocalPasswordServer.ResultType result;
        public virtual Metreos.LoggingFramework.LogWriter Log
        {
            get
            {
                return log;
            }
            set
            {
                log = value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("Url", false)]
        public virtual string Url
        {
            get
            {
                return @url;
            }
            set
            {
                @url = @value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("ProxyUrl", false)]
        public virtual string ProxyUrl
        {
            get
            {
                return @proxyurl;
            }
            set
            {
                @proxyurl = @value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("SpeakerId", false)]
        public virtual string SpeakerId
        {
            get
            {
                return @speakerid;
            }
            set
            {
                @speakerid = @value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("SpeakerSubId", false)]
        public virtual string SpeakerSubId
        {
            get
            {
                return @speakersubid;
            }
            set
            {
                @speakersubid = @value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("Audio", false)]
        public virtual string Audio
        {
            get
            {
                return @audio;
            }
            set
            {
                @audio = @value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("ConfigSetName", false)]
        public virtual string ConfigSetName
        {
            get
            {
                return @configsetname;
            }
            set
            {
                @configsetname = @value;
            }
        }
        [Metreos.ApplicationFramework.ResultDataField("RequestId")]
        public virtual int RequestId
        {
            get
            {
                return @requestid;
            }
            set
            {
                @requestid = value;
            }
        }
        [Metreos.ApplicationFramework.ResultDataField("Result")]
        public virtual WebServices.NativeTypes.VocalPasswordServer.ResultType Result
        {
            get
            {
                return @result;
            }
            set
            {
                @result = value;
            }
        }
        public virtual bool ValidateInput()
        {
            return true;
        }
        public virtual void Clear()
        {
            @url = null;
            @proxyurl = null;
            @speakerid = null;
            @speakersubid = null;
            @audio = null;
            @configsetname = null;
            @requestid = new System.Int32();
            @result = null;
        }
        public virtual WebServices.Base.VocalPasswordServer.VocalPasswordServer CreateService(string proxyPath)
        {
            WebServices.Base.VocalPasswordServer.VocalPasswordServer _metreosProxyService = new WebServices.Base.VocalPasswordServer.VocalPasswordServer();
            if (proxyPath != null && proxyPath != String.Empty && proxyPath != "NULL")
            {
                System.Net.WebProxy proxy = new System.Net.WebProxy(proxyPath);
                _metreosProxyService.Proxy = proxy;
            }
            return _metreosProxyService;
        }
        [Metreos.PackageGeneratorCore.Attributes.ActionAttribute("Verify", false, "Verify", "Verify web service request")]
        public virtual string Execute(Metreos.ApplicationFramework.SessionData sessionData, Metreos.Core.IConfigUtility config)
        {
            WebServices.Base.VocalPasswordServer.VocalPasswordServer _metreosProxyService = null;
            try
            {
                _metreosProxyService = CreateService(proxyurl);
                if (url != null)
                {
                    _metreosProxyService.Url = url;
                }
                System.String __speakerid = @speakerid;
                System.String __speakersubid = @speakersubid;
                System.String __audio = @audio;
                System.String __configsetname = @configsetname;
                WebServices.Base.VocalPasswordServer.Result __result = _metreosProxyService.Verify(__speakerid, __speakersubid, __audio, __configsetname, out requestid);
                result = new WebServices.NativeTypes.VocalPasswordServer.ResultType();
                result.Value = __result;
                return Metreos.Interfaces.IApp.VALUE_SUCCESS;
            }
            catch (System.Exception e)
            {
                log.Write(System.Diagnostics.TraceLevel.Error, e.ToString() );
                return Metreos.Interfaces.IApp.VALUE_FAILURE;
            }
            finally
            {
                if (_metreosProxyService != null)
                {
                    _metreosProxyService.Dispose();
                }
            }
        }
    }
    public class VerifyEx : Metreos.ApplicationFramework.INativeAction
    {
        private Metreos.LoggingFramework.LogWriter log;
        private string url;
        private string proxyurl;
        private string speakerid;
        private string speakersubid;
        private string audio;
        private string configsetname;
        private int previousrequestid;
        private int requestid;
        private WebServices.NativeTypes.VocalPasswordServer.ResultType result;
        public virtual Metreos.LoggingFramework.LogWriter Log
        {
            get
            {
                return log;
            }
            set
            {
                log = value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("Url", false)]
        public virtual string Url
        {
            get
            {
                return @url;
            }
            set
            {
                @url = @value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("ProxyUrl", false)]
        public virtual string ProxyUrl
        {
            get
            {
                return @proxyurl;
            }
            set
            {
                @proxyurl = @value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("SpeakerId", false)]
        public virtual string SpeakerId
        {
            get
            {
                return @speakerid;
            }
            set
            {
                @speakerid = @value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("SpeakerSubId", false)]
        public virtual string SpeakerSubId
        {
            get
            {
                return @speakersubid;
            }
            set
            {
                @speakersubid = @value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("Audio", false)]
        public virtual string Audio
        {
            get
            {
                return @audio;
            }
            set
            {
                @audio = @value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("ConfigSetName", false)]
        public virtual string ConfigSetName
        {
            get
            {
                return @configsetname;
            }
            set
            {
                @configsetname = @value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("PreviousRequestId", false)]
        public virtual int PreviousRequestId
        {
            get
            {
                return @previousrequestid;
            }
            set
            {
                @previousrequestid = @value;
            }
        }
        [Metreos.ApplicationFramework.ResultDataField("RequestId")]
        public virtual int RequestId
        {
            get
            {
                return @requestid;
            }
            set
            {
                @requestid = value;
            }
        }
        [Metreos.ApplicationFramework.ResultDataField("Result")]
        public virtual WebServices.NativeTypes.VocalPasswordServer.ResultType Result
        {
            get
            {
                return @result;
            }
            set
            {
                @result = value;
            }
        }
        public virtual bool ValidateInput()
        {
            return true;
        }
        public virtual void Clear()
        {
            @url = null;
            @proxyurl = null;
            @speakerid = null;
            @speakersubid = null;
            @audio = null;
            @configsetname = null;
            @previousrequestid = new System.Int32();
            @requestid = new System.Int32();
            @result = null;
        }
        public virtual WebServices.Base.VocalPasswordServer.VocalPasswordServer CreateService(string proxyPath)
        {
            WebServices.Base.VocalPasswordServer.VocalPasswordServer _metreosProxyService = new WebServices.Base.VocalPasswordServer.VocalPasswordServer();
            if (proxyPath != null && proxyPath != String.Empty && proxyPath != "NULL")
            {
                System.Net.WebProxy proxy = new System.Net.WebProxy(proxyPath);
                _metreosProxyService.Proxy = proxy;
            }
            return _metreosProxyService;
        }
        [Metreos.PackageGeneratorCore.Attributes.ActionAttribute("VerifyEx", false, "VerifyEx", "VerifyEx web service request")]
        public virtual string Execute(Metreos.ApplicationFramework.SessionData sessionData, Metreos.Core.IConfigUtility config)
        {
            WebServices.Base.VocalPasswordServer.VocalPasswordServer _metreosProxyService = null;
            try
            {
                _metreosProxyService = CreateService(proxyurl);
                if (url != null)
                {
                    _metreosProxyService.Url = url;
                }
                System.String __speakerid = @speakerid;
                System.String __speakersubid = @speakersubid;
                System.String __audio = @audio;
                System.String __configsetname = @configsetname;
                System.Int32 __previousrequestid = @previousrequestid;
                WebServices.Base.VocalPasswordServer.Result __result = _metreosProxyService.VerifyEx(__speakerid, __speakersubid, __audio, __configsetname, __previousrequestid, out requestid);
                result = new WebServices.NativeTypes.VocalPasswordServer.ResultType();
                result.Value = __result;
                return Metreos.Interfaces.IApp.VALUE_SUCCESS;
            }
            catch (System.Exception e)
            {
                log.Write(System.Diagnostics.TraceLevel.Error, e.ToString() );
                return Metreos.Interfaces.IApp.VALUE_FAILURE;
            }
            finally
            {
                if (_metreosProxyService != null)
                {
                    _metreosProxyService.Dispose();
                }
            }
        }
    }
    public class IdentifySpeakers : Metreos.ApplicationFramework.INativeAction
    {
        private Metreos.LoggingFramework.LogWriter log;
        private string url;
        private string proxyurl;
        private string[] speakersids;
        private string speakersubid;
        private string audio;
        private string configsetname;
        private int requestid;
        private WebServices.NativeTypes.VocalPasswordServer.ResultArray result;
        public virtual Metreos.LoggingFramework.LogWriter Log
        {
            get
            {
                return log;
            }
            set
            {
                log = value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("Url", false)]
        public virtual string Url
        {
            get
            {
                return @url;
            }
            set
            {
                @url = @value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("ProxyUrl", false)]
        public virtual string ProxyUrl
        {
            get
            {
                return @proxyurl;
            }
            set
            {
                @proxyurl = @value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("SpeakersIds", false)]
        public virtual string[] SpeakersIds
        {
            get
            {
                return @speakersids;
            }
            set
            {
                @speakersids = @value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("SpeakerSubId", false)]
        public virtual string SpeakerSubId
        {
            get
            {
                return @speakersubid;
            }
            set
            {
                @speakersubid = @value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("Audio", false)]
        public virtual string Audio
        {
            get
            {
                return @audio;
            }
            set
            {
                @audio = @value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("ConfigSetName", false)]
        public virtual string ConfigSetName
        {
            get
            {
                return @configsetname;
            }
            set
            {
                @configsetname = @value;
            }
        }
        [Metreos.ApplicationFramework.ResultDataField("RequestId")]
        public virtual int RequestId
        {
            get
            {
                return @requestid;
            }
            set
            {
                @requestid = value;
            }
        }
        [Metreos.ApplicationFramework.ResultDataField("Result")]
        public virtual WebServices.NativeTypes.VocalPasswordServer.ResultArray Result
        {
            get
            {
                return @result;
            }
            set
            {
                @result = value;
            }
        }
        public virtual bool ValidateInput()
        {
            return true;
        }
        public virtual void Clear()
        {
            @url = null;
            @proxyurl = null;
            @speakersids = null;
            @speakersubid = null;
            @audio = null;
            @configsetname = null;
            @requestid = new System.Int32();
            @result = null;
        }
        public virtual WebServices.Base.VocalPasswordServer.VocalPasswordServer CreateService(string proxyPath)
        {
            WebServices.Base.VocalPasswordServer.VocalPasswordServer _metreosProxyService = new WebServices.Base.VocalPasswordServer.VocalPasswordServer();
            if (proxyPath != null && proxyPath != String.Empty && proxyPath != "NULL")
            {
                System.Net.WebProxy proxy = new System.Net.WebProxy(proxyPath);
                _metreosProxyService.Proxy = proxy;
            }
            return _metreosProxyService;
        }
        [Metreos.PackageGeneratorCore.Attributes.ActionAttribute("IdentifySpeakers", false, "IdentifySpeakers", "IdentifySpeakers web service request")]
        public virtual string Execute(Metreos.ApplicationFramework.SessionData sessionData, Metreos.Core.IConfigUtility config)
        {
            WebServices.Base.VocalPasswordServer.VocalPasswordServer _metreosProxyService = null;
            try
            {
                _metreosProxyService = CreateService(proxyurl);
                if (url != null)
                {
                    _metreosProxyService.Url = url;
                }
                System.String[] __speakersids = @speakersids;
                System.String __speakersubid = @speakersubid;
                System.String __audio = @audio;
                System.String __configsetname = @configsetname;
                WebServices.Base.VocalPasswordServer.Result[] __result = _metreosProxyService.IdentifySpeakers(__speakersids, __speakersubid, __audio, __configsetname, out requestid);
                result = new WebServices.NativeTypes.VocalPasswordServer.ResultArray();
                result.Value = __result;
                return Metreos.Interfaces.IApp.VALUE_SUCCESS;
            }
            catch (System.Exception e)
            {
                log.Write(System.Diagnostics.TraceLevel.Error, e.ToString() );
                return Metreos.Interfaces.IApp.VALUE_FAILURE;
            }
            finally
            {
                if (_metreosProxyService != null)
                {
                    _metreosProxyService.Dispose();
                }
            }
        }
    }
    public class IdentifySpeakersAll : Metreos.ApplicationFramework.INativeAction
    {
        private Metreos.LoggingFramework.LogWriter log;
        private string url;
        private string proxyurl;
        private string[] speakersids;
        private string audio;
        private string configsetname;
        private int requestid;
        private WebServices.NativeTypes.VocalPasswordServer.ResultArray result;
        public virtual Metreos.LoggingFramework.LogWriter Log
        {
            get
            {
                return log;
            }
            set
            {
                log = value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("Url", false)]
        public virtual string Url
        {
            get
            {
                return @url;
            }
            set
            {
                @url = @value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("ProxyUrl", false)]
        public virtual string ProxyUrl
        {
            get
            {
                return @proxyurl;
            }
            set
            {
                @proxyurl = @value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("SpeakersIds", false)]
        public virtual string[] SpeakersIds
        {
            get
            {
                return @speakersids;
            }
            set
            {
                @speakersids = @value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("Audio", false)]
        public virtual string Audio
        {
            get
            {
                return @audio;
            }
            set
            {
                @audio = @value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("ConfigSetName", false)]
        public virtual string ConfigSetName
        {
            get
            {
                return @configsetname;
            }
            set
            {
                @configsetname = @value;
            }
        }
        [Metreos.ApplicationFramework.ResultDataField("RequestId")]
        public virtual int RequestId
        {
            get
            {
                return @requestid;
            }
            set
            {
                @requestid = value;
            }
        }
        [Metreos.ApplicationFramework.ResultDataField("Result")]
        public virtual WebServices.NativeTypes.VocalPasswordServer.ResultArray Result
        {
            get
            {
                return @result;
            }
            set
            {
                @result = value;
            }
        }
        public virtual bool ValidateInput()
        {
            return true;
        }
        public virtual void Clear()
        {
            @url = null;
            @proxyurl = null;
            @speakersids = null;
            @audio = null;
            @configsetname = null;
            @requestid = new System.Int32();
            @result = null;
        }
        public virtual WebServices.Base.VocalPasswordServer.VocalPasswordServer CreateService(string proxyPath)
        {
            WebServices.Base.VocalPasswordServer.VocalPasswordServer _metreosProxyService = new WebServices.Base.VocalPasswordServer.VocalPasswordServer();
            if (proxyPath != null && proxyPath != String.Empty && proxyPath != "NULL")
            {
                System.Net.WebProxy proxy = new System.Net.WebProxy(proxyPath);
                _metreosProxyService.Proxy = proxy;
            }
            return _metreosProxyService;
        }
        [Metreos.PackageGeneratorCore.Attributes.ActionAttribute("IdentifySpeakersAll", false, "IdentifySpeakersAll", "IdentifySpeakersAll web service request")]
        public virtual string Execute(Metreos.ApplicationFramework.SessionData sessionData, Metreos.Core.IConfigUtility config)
        {
            WebServices.Base.VocalPasswordServer.VocalPasswordServer _metreosProxyService = null;
            try
            {
                _metreosProxyService = CreateService(proxyurl);
                if (url != null)
                {
                    _metreosProxyService.Url = url;
                }
                System.String[] __speakersids = @speakersids;
                System.String __audio = @audio;
                System.String __configsetname = @configsetname;
                WebServices.Base.VocalPasswordServer.Result[] __result = _metreosProxyService.IdentifySpeakersAll(__speakersids, __audio, __configsetname, out requestid);
                result = new WebServices.NativeTypes.VocalPasswordServer.ResultArray();
                result.Value = __result;
                return Metreos.Interfaces.IApp.VALUE_SUCCESS;
            }
            catch (System.Exception e)
            {
                log.Write(System.Diagnostics.TraceLevel.Error, e.ToString() );
                return Metreos.Interfaces.IApp.VALUE_FAILURE;
            }
            finally
            {
                if (_metreosProxyService != null)
                {
                    _metreosProxyService.Dispose();
                }
            }
        }
    }
    public class IdentifyGroup : Metreos.ApplicationFramework.INativeAction
    {
        private Metreos.LoggingFramework.LogWriter log;
        private string url;
        private string proxyurl;
        private string groupid;
        private string speakersubid;
        private string audio;
        private string configsetname;
        private int requestid;
        private WebServices.NativeTypes.VocalPasswordServer.ResultArray result;
        public virtual Metreos.LoggingFramework.LogWriter Log
        {
            get
            {
                return log;
            }
            set
            {
                log = value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("Url", false)]
        public virtual string Url
        {
            get
            {
                return @url;
            }
            set
            {
                @url = @value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("ProxyUrl", false)]
        public virtual string ProxyUrl
        {
            get
            {
                return @proxyurl;
            }
            set
            {
                @proxyurl = @value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("GroupId", false)]
        public virtual string GroupId
        {
            get
            {
                return @groupid;
            }
            set
            {
                @groupid = @value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("SpeakerSubId", false)]
        public virtual string SpeakerSubId
        {
            get
            {
                return @speakersubid;
            }
            set
            {
                @speakersubid = @value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("Audio", false)]
        public virtual string Audio
        {
            get
            {
                return @audio;
            }
            set
            {
                @audio = @value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("ConfigSetName", false)]
        public virtual string ConfigSetName
        {
            get
            {
                return @configsetname;
            }
            set
            {
                @configsetname = @value;
            }
        }
        [Metreos.ApplicationFramework.ResultDataField("RequestId")]
        public virtual int RequestId
        {
            get
            {
                return @requestid;
            }
            set
            {
                @requestid = value;
            }
        }
        [Metreos.ApplicationFramework.ResultDataField("Result")]
        public virtual WebServices.NativeTypes.VocalPasswordServer.ResultArray Result
        {
            get
            {
                return @result;
            }
            set
            {
                @result = value;
            }
        }
        public virtual bool ValidateInput()
        {
            return true;
        }
        public virtual void Clear()
        {
            @url = null;
            @proxyurl = null;
            @groupid = null;
            @speakersubid = null;
            @audio = null;
            @configsetname = null;
            @requestid = new System.Int32();
            @result = null;
        }
        public virtual WebServices.Base.VocalPasswordServer.VocalPasswordServer CreateService(string proxyPath)
        {
            WebServices.Base.VocalPasswordServer.VocalPasswordServer _metreosProxyService = new WebServices.Base.VocalPasswordServer.VocalPasswordServer();
            if (proxyPath != null && proxyPath != String.Empty && proxyPath != "NULL")
            {
                System.Net.WebProxy proxy = new System.Net.WebProxy(proxyPath);
                _metreosProxyService.Proxy = proxy;
            }
            return _metreosProxyService;
        }
        [Metreos.PackageGeneratorCore.Attributes.ActionAttribute("IdentifyGroup", false, "IdentifyGroup", "IdentifyGroup web service request")]
        public virtual string Execute(Metreos.ApplicationFramework.SessionData sessionData, Metreos.Core.IConfigUtility config)
        {
            WebServices.Base.VocalPasswordServer.VocalPasswordServer _metreosProxyService = null;
            try
            {
                _metreosProxyService = CreateService(proxyurl);
                if (url != null)
                {
                    _metreosProxyService.Url = url;
                }
                System.String __groupid = @groupid;
                System.String __speakersubid = @speakersubid;
                System.String __audio = @audio;
                System.String __configsetname = @configsetname;
                WebServices.Base.VocalPasswordServer.Result[] __result = _metreosProxyService.IdentifyGroup(__groupid, __speakersubid, __audio, __configsetname, out requestid);
                result = new WebServices.NativeTypes.VocalPasswordServer.ResultArray();
                result.Value = __result;
                return Metreos.Interfaces.IApp.VALUE_SUCCESS;
            }
            catch (System.Exception e)
            {
                log.Write(System.Diagnostics.TraceLevel.Error, e.ToString() );
                return Metreos.Interfaces.IApp.VALUE_FAILURE;
            }
            finally
            {
                if (_metreosProxyService != null)
                {
                    _metreosProxyService.Dispose();
                }
            }
        }
    }
    public class IdentifyGroupAll : Metreos.ApplicationFramework.INativeAction
    {
        private Metreos.LoggingFramework.LogWriter log;
        private string url;
        private string proxyurl;
        private string groupid;
        private string audio;
        private string configsetname;
        private int requestid;
        private WebServices.NativeTypes.VocalPasswordServer.ResultArray result;
        public virtual Metreos.LoggingFramework.LogWriter Log
        {
            get
            {
                return log;
            }
            set
            {
                log = value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("Url", false)]
        public virtual string Url
        {
            get
            {
                return @url;
            }
            set
            {
                @url = @value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("ProxyUrl", false)]
        public virtual string ProxyUrl
        {
            get
            {
                return @proxyurl;
            }
            set
            {
                @proxyurl = @value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("GroupId", false)]
        public virtual string GroupId
        {
            get
            {
                return @groupid;
            }
            set
            {
                @groupid = @value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("Audio", false)]
        public virtual string Audio
        {
            get
            {
                return @audio;
            }
            set
            {
                @audio = @value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("ConfigSetName", false)]
        public virtual string ConfigSetName
        {
            get
            {
                return @configsetname;
            }
            set
            {
                @configsetname = @value;
            }
        }
        [Metreos.ApplicationFramework.ResultDataField("RequestId")]
        public virtual int RequestId
        {
            get
            {
                return @requestid;
            }
            set
            {
                @requestid = value;
            }
        }
        [Metreos.ApplicationFramework.ResultDataField("Result")]
        public virtual WebServices.NativeTypes.VocalPasswordServer.ResultArray Result
        {
            get
            {
                return @result;
            }
            set
            {
                @result = value;
            }
        }
        public virtual bool ValidateInput()
        {
            return true;
        }
        public virtual void Clear()
        {
            @url = null;
            @proxyurl = null;
            @groupid = null;
            @audio = null;
            @configsetname = null;
            @requestid = new System.Int32();
            @result = null;
        }
        public virtual WebServices.Base.VocalPasswordServer.VocalPasswordServer CreateService(string proxyPath)
        {
            WebServices.Base.VocalPasswordServer.VocalPasswordServer _metreosProxyService = new WebServices.Base.VocalPasswordServer.VocalPasswordServer();
            if (proxyPath != null && proxyPath != String.Empty && proxyPath != "NULL")
            {
                System.Net.WebProxy proxy = new System.Net.WebProxy(proxyPath);
                _metreosProxyService.Proxy = proxy;
            }
            return _metreosProxyService;
        }
        [Metreos.PackageGeneratorCore.Attributes.ActionAttribute("IdentifyGroupAll", false, "IdentifyGroupAll", "IdentifyGroupAll web service request")]
        public virtual string Execute(Metreos.ApplicationFramework.SessionData sessionData, Metreos.Core.IConfigUtility config)
        {
            WebServices.Base.VocalPasswordServer.VocalPasswordServer _metreosProxyService = null;
            try
            {
                _metreosProxyService = CreateService(proxyurl);
                if (url != null)
                {
                    _metreosProxyService.Url = url;
                }
                System.String __groupid = @groupid;
                System.String __audio = @audio;
                System.String __configsetname = @configsetname;
                WebServices.Base.VocalPasswordServer.Result[] __result = _metreosProxyService.IdentifyGroupAll(__groupid, __audio, __configsetname, out requestid);
                result = new WebServices.NativeTypes.VocalPasswordServer.ResultArray();
                result.Value = __result;
                return Metreos.Interfaces.IApp.VALUE_SUCCESS;
            }
            catch (System.Exception e)
            {
                log.Write(System.Diagnostics.TraceLevel.Error, e.ToString() );
                return Metreos.Interfaces.IApp.VALUE_FAILURE;
            }
            finally
            {
                if (_metreosProxyService != null)
                {
                    _metreosProxyService.Dispose();
                }
            }
        }
    }
    public class IsReadyToTrain : Metreos.ApplicationFramework.INativeAction
    {
        private Metreos.LoggingFramework.LogWriter log;
        private string url;
        private string proxyurl;
        private string speakerid;
        private string speakersubid;
        private string configsetname;
        private int requestid;
        private bool result;
        public virtual Metreos.LoggingFramework.LogWriter Log
        {
            get
            {
                return log;
            }
            set
            {
                log = value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("Url", false)]
        public virtual string Url
        {
            get
            {
                return @url;
            }
            set
            {
                @url = @value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("ProxyUrl", false)]
        public virtual string ProxyUrl
        {
            get
            {
                return @proxyurl;
            }
            set
            {
                @proxyurl = @value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("SpeakerId", false)]
        public virtual string SpeakerId
        {
            get
            {
                return @speakerid;
            }
            set
            {
                @speakerid = @value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("SpeakerSubId", false)]
        public virtual string SpeakerSubId
        {
            get
            {
                return @speakersubid;
            }
            set
            {
                @speakersubid = @value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("ConfigSetName", false)]
        public virtual string ConfigSetName
        {
            get
            {
                return @configsetname;
            }
            set
            {
                @configsetname = @value;
            }
        }
        [Metreos.ApplicationFramework.ResultDataField("RequestId")]
        public virtual int RequestId
        {
            get
            {
                return @requestid;
            }
            set
            {
                @requestid = value;
            }
        }
        [Metreos.ApplicationFramework.ResultDataField("Result")]
        public virtual bool Result
        {
            get
            {
                return @result;
            }
            set
            {
                @result = value;
            }
        }
        public virtual bool ValidateInput()
        {
            return true;
        }
        public virtual void Clear()
        {
            @url = null;
            @proxyurl = null;
            @speakerid = null;
            @speakersubid = null;
            @configsetname = null;
            @requestid = new System.Int32();
            @result = new System.Boolean();
        }
        public virtual WebServices.Base.VocalPasswordServer.VocalPasswordServer CreateService(string proxyPath)
        {
            WebServices.Base.VocalPasswordServer.VocalPasswordServer _metreosProxyService = new WebServices.Base.VocalPasswordServer.VocalPasswordServer();
            if (proxyPath != null && proxyPath != String.Empty && proxyPath != "NULL")
            {
                System.Net.WebProxy proxy = new System.Net.WebProxy(proxyPath);
                _metreosProxyService.Proxy = proxy;
            }
            return _metreosProxyService;
        }
        [Metreos.PackageGeneratorCore.Attributes.ActionAttribute("IsReadyToTrain", false, "IsReadyToTrain", "IsReadyToTrain web service request")]
        public virtual string Execute(Metreos.ApplicationFramework.SessionData sessionData, Metreos.Core.IConfigUtility config)
        {
            WebServices.Base.VocalPasswordServer.VocalPasswordServer _metreosProxyService = null;
            try
            {
                _metreosProxyService = CreateService(proxyurl);
                if (url != null)
                {
                    _metreosProxyService.Url = url;
                }
                System.String __speakerid = @speakerid;
                System.String __speakersubid = @speakersubid;
                System.String __configsetname = @configsetname;
                System.Boolean __result = _metreosProxyService.IsReadyToTrain(__speakerid, __speakersubid, __configsetname, out requestid);
                result = __result;
                return Metreos.Interfaces.IApp.VALUE_SUCCESS;
            }
            catch (System.Exception e)
            {
                log.Write(System.Diagnostics.TraceLevel.Error, e.ToString() );
                return Metreos.Interfaces.IApp.VALUE_FAILURE;
            }
            finally
            {
                if (_metreosProxyService != null)
                {
                    _metreosProxyService.Dispose();
                }
            }
        }
    }
    public class IsTrained : Metreos.ApplicationFramework.INativeAction
    {
        private Metreos.LoggingFramework.LogWriter log;
        private string url;
        private string proxyurl;
        private string speakerid;
        private string speakersubid;
        private string configsetname;
        private int requestid;
        private bool result;
        public virtual Metreos.LoggingFramework.LogWriter Log
        {
            get
            {
                return log;
            }
            set
            {
                log = value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("Url", false)]
        public virtual string Url
        {
            get
            {
                return @url;
            }
            set
            {
                @url = @value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("ProxyUrl", false)]
        public virtual string ProxyUrl
        {
            get
            {
                return @proxyurl;
            }
            set
            {
                @proxyurl = @value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("SpeakerId", false)]
        public virtual string SpeakerId
        {
            get
            {
                return @speakerid;
            }
            set
            {
                @speakerid = @value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("SpeakerSubId", false)]
        public virtual string SpeakerSubId
        {
            get
            {
                return @speakersubid;
            }
            set
            {
                @speakersubid = @value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("ConfigSetName", false)]
        public virtual string ConfigSetName
        {
            get
            {
                return @configsetname;
            }
            set
            {
                @configsetname = @value;
            }
        }
        [Metreos.ApplicationFramework.ResultDataField("RequestId")]
        public virtual int RequestId
        {
            get
            {
                return @requestid;
            }
            set
            {
                @requestid = value;
            }
        }
        [Metreos.ApplicationFramework.ResultDataField("Result")]
        public virtual bool Result
        {
            get
            {
                return @result;
            }
            set
            {
                @result = value;
            }
        }
        public virtual bool ValidateInput()
        {
            return true;
        }
        public virtual void Clear()
        {
            @url = null;
            @proxyurl = null;
            @speakerid = null;
            @speakersubid = null;
            @configsetname = null;
            @requestid = new System.Int32();
            @result = new System.Boolean();
        }
        public virtual WebServices.Base.VocalPasswordServer.VocalPasswordServer CreateService(string proxyPath)
        {
            WebServices.Base.VocalPasswordServer.VocalPasswordServer _metreosProxyService = new WebServices.Base.VocalPasswordServer.VocalPasswordServer();
            if (proxyPath != null && proxyPath != String.Empty && proxyPath != "NULL")
            {
                System.Net.WebProxy proxy = new System.Net.WebProxy(proxyPath);
                _metreosProxyService.Proxy = proxy;
            }
            return _metreosProxyService;
        }
        [Metreos.PackageGeneratorCore.Attributes.ActionAttribute("IsTrained", false, "IsTrained", "IsTrained web service request")]
        public virtual string Execute(Metreos.ApplicationFramework.SessionData sessionData, Metreos.Core.IConfigUtility config)
        {
            WebServices.Base.VocalPasswordServer.VocalPasswordServer _metreosProxyService = null;
            try
            {
                _metreosProxyService = CreateService(proxyurl);
                if (url != null)
                {
                    _metreosProxyService.Url = url;
                }
                System.String __speakerid = @speakerid;
                System.String __speakersubid = @speakersubid;
                System.String __configsetname = @configsetname;
                System.Boolean __result = _metreosProxyService.IsTrained(__speakerid, __speakersubid, __configsetname, out requestid);
                result = __result;
                return Metreos.Interfaces.IApp.VALUE_SUCCESS;
            }
            catch (System.Exception e)
            {
                log.Write(System.Diagnostics.TraceLevel.Error, e.ToString() );
                return Metreos.Interfaces.IApp.VALUE_FAILURE;
            }
            finally
            {
                if (_metreosProxyService != null)
                {
                    _metreosProxyService.Dispose();
                }
            }
        }
    }
    public class DeleteVoiceprint : Metreos.ApplicationFramework.INativeAction
    {
        private Metreos.LoggingFramework.LogWriter log;
        private string url;
        private string proxyurl;
        private string speakerid;
        private string speakersubid;
        private string configsetname;
        private int result;
        public virtual Metreos.LoggingFramework.LogWriter Log
        {
            get
            {
                return log;
            }
            set
            {
                log = value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("Url", false)]
        public virtual string Url
        {
            get
            {
                return @url;
            }
            set
            {
                @url = @value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("ProxyUrl", false)]
        public virtual string ProxyUrl
        {
            get
            {
                return @proxyurl;
            }
            set
            {
                @proxyurl = @value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("SpeakerId", false)]
        public virtual string SpeakerId
        {
            get
            {
                return @speakerid;
            }
            set
            {
                @speakerid = @value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("SpeakerSubId", false)]
        public virtual string SpeakerSubId
        {
            get
            {
                return @speakersubid;
            }
            set
            {
                @speakersubid = @value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("ConfigSetName", false)]
        public virtual string ConfigSetName
        {
            get
            {
                return @configsetname;
            }
            set
            {
                @configsetname = @value;
            }
        }
        [Metreos.ApplicationFramework.ResultDataField("Result")]
        public virtual int Result
        {
            get
            {
                return @result;
            }
            set
            {
                @result = value;
            }
        }
        public virtual bool ValidateInput()
        {
            return true;
        }
        public virtual void Clear()
        {
            @url = null;
            @proxyurl = null;
            @speakerid = null;
            @speakersubid = null;
            @configsetname = null;
            @result = new System.Int32();
        }
        public virtual WebServices.Base.VocalPasswordServer.VocalPasswordServer CreateService(string proxyPath)
        {
            WebServices.Base.VocalPasswordServer.VocalPasswordServer _metreosProxyService = new WebServices.Base.VocalPasswordServer.VocalPasswordServer();
            if (proxyPath != null && proxyPath != String.Empty && proxyPath != "NULL")
            {
                System.Net.WebProxy proxy = new System.Net.WebProxy(proxyPath);
                _metreosProxyService.Proxy = proxy;
            }
            return _metreosProxyService;
        }
        [Metreos.PackageGeneratorCore.Attributes.ActionAttribute("DeleteVoiceprint", false, "DeleteVoiceprint", "DeleteVoiceprint web service request")]
        public virtual string Execute(Metreos.ApplicationFramework.SessionData sessionData, Metreos.Core.IConfigUtility config)
        {
            WebServices.Base.VocalPasswordServer.VocalPasswordServer _metreosProxyService = null;
            try
            {
                _metreosProxyService = CreateService(proxyurl);
                if (url != null)
                {
                    _metreosProxyService.Url = url;
                }
                System.String __speakerid = @speakerid;
                System.String __speakersubid = @speakersubid;
                System.String __configsetname = @configsetname;
                System.Int32 __result = _metreosProxyService.DeleteVoiceprint(__speakerid, __speakersubid, __configsetname);
                result = __result;
                return Metreos.Interfaces.IApp.VALUE_SUCCESS;
            }
            catch (System.Exception e)
            {
                log.Write(System.Diagnostics.TraceLevel.Error, e.ToString() );
                return Metreos.Interfaces.IApp.VALUE_FAILURE;
            }
            finally
            {
                if (_metreosProxyService != null)
                {
                    _metreosProxyService.Dispose();
                }
            }
        }
    }
    public class DeleteVoiceTemplate : Metreos.ApplicationFramework.INativeAction
    {
        private Metreos.LoggingFramework.LogWriter log;
        private string url;
        private string proxyurl;
        private string speakerid;
        private string speakersubid;
        private string configsetname;
        private int result;
        public virtual Metreos.LoggingFramework.LogWriter Log
        {
            get
            {
                return log;
            }
            set
            {
                log = value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("Url", false)]
        public virtual string Url
        {
            get
            {
                return @url;
            }
            set
            {
                @url = @value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("ProxyUrl", false)]
        public virtual string ProxyUrl
        {
            get
            {
                return @proxyurl;
            }
            set
            {
                @proxyurl = @value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("SpeakerId", false)]
        public virtual string SpeakerId
        {
            get
            {
                return @speakerid;
            }
            set
            {
                @speakerid = @value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("SpeakerSubId", false)]
        public virtual string SpeakerSubId
        {
            get
            {
                return @speakersubid;
            }
            set
            {
                @speakersubid = @value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("ConfigSetName", false)]
        public virtual string ConfigSetName
        {
            get
            {
                return @configsetname;
            }
            set
            {
                @configsetname = @value;
            }
        }
        [Metreos.ApplicationFramework.ResultDataField("Result")]
        public virtual int Result
        {
            get
            {
                return @result;
            }
            set
            {
                @result = value;
            }
        }
        public virtual bool ValidateInput()
        {
            return true;
        }
        public virtual void Clear()
        {
            @url = null;
            @proxyurl = null;
            @speakerid = null;
            @speakersubid = null;
            @configsetname = null;
            @result = new System.Int32();
        }
        public virtual WebServices.Base.VocalPasswordServer.VocalPasswordServer CreateService(string proxyPath)
        {
            WebServices.Base.VocalPasswordServer.VocalPasswordServer _metreosProxyService = new WebServices.Base.VocalPasswordServer.VocalPasswordServer();
            if (proxyPath != null && proxyPath != String.Empty && proxyPath != "NULL")
            {
                System.Net.WebProxy proxy = new System.Net.WebProxy(proxyPath);
                _metreosProxyService.Proxy = proxy;
            }
            return _metreosProxyService;
        }
        [Metreos.PackageGeneratorCore.Attributes.ActionAttribute("DeleteVoiceTemplate", false, "DeleteVoiceTemplate", "DeleteVoiceTemplate web service request")]
        public virtual string Execute(Metreos.ApplicationFramework.SessionData sessionData, Metreos.Core.IConfigUtility config)
        {
            WebServices.Base.VocalPasswordServer.VocalPasswordServer _metreosProxyService = null;
            try
            {
                _metreosProxyService = CreateService(proxyurl);
                if (url != null)
                {
                    _metreosProxyService.Url = url;
                }
                System.String __speakerid = @speakerid;
                System.String __speakersubid = @speakersubid;
                System.String __configsetname = @configsetname;
                System.Int32 __result = _metreosProxyService.DeleteVoiceTemplate(__speakerid, __speakersubid, __configsetname);
                result = __result;
                return Metreos.Interfaces.IApp.VALUE_SUCCESS;
            }
            catch (System.Exception e)
            {
                log.Write(System.Diagnostics.TraceLevel.Error, e.ToString() );
                return Metreos.Interfaces.IApp.VALUE_FAILURE;
            }
            finally
            {
                if (_metreosProxyService != null)
                {
                    _metreosProxyService.Dispose();
                }
            }
        }
    }
    public class DeleteEnrollSegments : Metreos.ApplicationFramework.INativeAction
    {
        private Metreos.LoggingFramework.LogWriter log;
        private string url;
        private string proxyurl;
        private string speakerid;
        private string speakersubid;
        private string configsetname;
        private int result;
        public virtual Metreos.LoggingFramework.LogWriter Log
        {
            get
            {
                return log;
            }
            set
            {
                log = value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("Url", false)]
        public virtual string Url
        {
            get
            {
                return @url;
            }
            set
            {
                @url = @value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("ProxyUrl", false)]
        public virtual string ProxyUrl
        {
            get
            {
                return @proxyurl;
            }
            set
            {
                @proxyurl = @value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("SpeakerId", false)]
        public virtual string SpeakerId
        {
            get
            {
                return @speakerid;
            }
            set
            {
                @speakerid = @value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("SpeakerSubId", false)]
        public virtual string SpeakerSubId
        {
            get
            {
                return @speakersubid;
            }
            set
            {
                @speakersubid = @value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("ConfigSetName", false)]
        public virtual string ConfigSetName
        {
            get
            {
                return @configsetname;
            }
            set
            {
                @configsetname = @value;
            }
        }
        [Metreos.ApplicationFramework.ResultDataField("Result")]
        public virtual int Result
        {
            get
            {
                return @result;
            }
            set
            {
                @result = value;
            }
        }
        public virtual bool ValidateInput()
        {
            return true;
        }
        public virtual void Clear()
        {
            @url = null;
            @proxyurl = null;
            @speakerid = null;
            @speakersubid = null;
            @configsetname = null;
            @result = new System.Int32();
        }
        public virtual WebServices.Base.VocalPasswordServer.VocalPasswordServer CreateService(string proxyPath)
        {
            WebServices.Base.VocalPasswordServer.VocalPasswordServer _metreosProxyService = new WebServices.Base.VocalPasswordServer.VocalPasswordServer();
            if (proxyPath != null && proxyPath != String.Empty && proxyPath != "NULL")
            {
                System.Net.WebProxy proxy = new System.Net.WebProxy(proxyPath);
                _metreosProxyService.Proxy = proxy;
            }
            return _metreosProxyService;
        }
        [Metreos.PackageGeneratorCore.Attributes.ActionAttribute("DeleteEnrollSegments", false, "DeleteEnrollSegments", "DeleteEnrollSegments web service request")]
        public virtual string Execute(Metreos.ApplicationFramework.SessionData sessionData, Metreos.Core.IConfigUtility config)
        {
            WebServices.Base.VocalPasswordServer.VocalPasswordServer _metreosProxyService = null;
            try
            {
                _metreosProxyService = CreateService(proxyurl);
                if (url != null)
                {
                    _metreosProxyService.Url = url;
                }
                System.String __speakerid = @speakerid;
                System.String __speakersubid = @speakersubid;
                System.String __configsetname = @configsetname;
                System.Int32 __result = _metreosProxyService.DeleteEnrollSegments(__speakerid, __speakersubid, __configsetname);
                result = __result;
                return Metreos.Interfaces.IApp.VALUE_SUCCESS;
            }
            catch (System.Exception e)
            {
                log.Write(System.Diagnostics.TraceLevel.Error, e.ToString() );
                return Metreos.Interfaces.IApp.VALUE_FAILURE;
            }
            finally
            {
                if (_metreosProxyService != null)
                {
                    _metreosProxyService.Dispose();
                }
            }
        }
    }
    public class RemoveEnrollSegment : Metreos.ApplicationFramework.INativeAction
    {
        private Metreos.LoggingFramework.LogWriter log;
        private string url;
        private string proxyurl;
        private string speakerid;
        private string speakersubid;
        private int audiosegmentid;
        private string configsetname;
        private int result;
        public virtual Metreos.LoggingFramework.LogWriter Log
        {
            get
            {
                return log;
            }
            set
            {
                log = value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("Url", false)]
        public virtual string Url
        {
            get
            {
                return @url;
            }
            set
            {
                @url = @value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("ProxyUrl", false)]
        public virtual string ProxyUrl
        {
            get
            {
                return @proxyurl;
            }
            set
            {
                @proxyurl = @value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("SpeakerId", false)]
        public virtual string SpeakerId
        {
            get
            {
                return @speakerid;
            }
            set
            {
                @speakerid = @value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("SpeakerSubId", false)]
        public virtual string SpeakerSubId
        {
            get
            {
                return @speakersubid;
            }
            set
            {
                @speakersubid = @value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("AudioSegmentId", false)]
        public virtual int AudioSegmentId
        {
            get
            {
                return @audiosegmentid;
            }
            set
            {
                @audiosegmentid = @value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("ConfigSetName", false)]
        public virtual string ConfigSetName
        {
            get
            {
                return @configsetname;
            }
            set
            {
                @configsetname = @value;
            }
        }
        [Metreos.ApplicationFramework.ResultDataField("Result")]
        public virtual int Result
        {
            get
            {
                return @result;
            }
            set
            {
                @result = value;
            }
        }
        public virtual bool ValidateInput()
        {
            return true;
        }
        public virtual void Clear()
        {
            @url = null;
            @proxyurl = null;
            @speakerid = null;
            @speakersubid = null;
            @audiosegmentid = new System.Int32();
            @configsetname = null;
            @result = new System.Int32();
        }
        public virtual WebServices.Base.VocalPasswordServer.VocalPasswordServer CreateService(string proxyPath)
        {
            WebServices.Base.VocalPasswordServer.VocalPasswordServer _metreosProxyService = new WebServices.Base.VocalPasswordServer.VocalPasswordServer();
            if (proxyPath != null && proxyPath != String.Empty && proxyPath != "NULL")
            {
                System.Net.WebProxy proxy = new System.Net.WebProxy(proxyPath);
                _metreosProxyService.Proxy = proxy;
            }
            return _metreosProxyService;
        }
        [Metreos.PackageGeneratorCore.Attributes.ActionAttribute("RemoveEnrollSegment", false, "RemoveEnrollSegment", "RemoveEnrollSegment web service request")]
        public virtual string Execute(Metreos.ApplicationFramework.SessionData sessionData, Metreos.Core.IConfigUtility config)
        {
            WebServices.Base.VocalPasswordServer.VocalPasswordServer _metreosProxyService = null;
            try
            {
                _metreosProxyService = CreateService(proxyurl);
                if (url != null)
                {
                    _metreosProxyService.Url = url;
                }
                System.String __speakerid = @speakerid;
                System.String __speakersubid = @speakersubid;
                System.Int32 __audiosegmentid = @audiosegmentid;
                System.String __configsetname = @configsetname;
                System.Int32 __result = _metreosProxyService.RemoveEnrollSegment(__speakerid, __speakersubid, __audiosegmentid, __configsetname);
                result = __result;
                return Metreos.Interfaces.IApp.VALUE_SUCCESS;
            }
            catch (System.Exception e)
            {
                log.Write(System.Diagnostics.TraceLevel.Error, e.ToString() );
                return Metreos.Interfaces.IApp.VALUE_FAILURE;
            }
            finally
            {
                if (_metreosProxyService != null)
                {
                    _metreosProxyService.Dispose();
                }
            }
        }
    }
    public class GetEnrollSegmentsStatus : Metreos.ApplicationFramework.INativeAction
    {
        private Metreos.LoggingFramework.LogWriter log;
        private string url;
        private string proxyurl;
        private string speakerid;
        private string speakersubid;
        private string configsetname;
        private int requestid;
        private WebServices.NativeTypes.VocalPasswordServer.VPEnrollSegmentsStatusType result;
        public virtual Metreos.LoggingFramework.LogWriter Log
        {
            get
            {
                return log;
            }
            set
            {
                log = value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("Url", false)]
        public virtual string Url
        {
            get
            {
                return @url;
            }
            set
            {
                @url = @value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("ProxyUrl", false)]
        public virtual string ProxyUrl
        {
            get
            {
                return @proxyurl;
            }
            set
            {
                @proxyurl = @value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("SpeakerId", false)]
        public virtual string SpeakerId
        {
            get
            {
                return @speakerid;
            }
            set
            {
                @speakerid = @value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("SpeakerSubId", false)]
        public virtual string SpeakerSubId
        {
            get
            {
                return @speakersubid;
            }
            set
            {
                @speakersubid = @value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("ConfigSetName", false)]
        public virtual string ConfigSetName
        {
            get
            {
                return @configsetname;
            }
            set
            {
                @configsetname = @value;
            }
        }
        [Metreos.ApplicationFramework.ResultDataField("RequestId")]
        public virtual int RequestId
        {
            get
            {
                return @requestid;
            }
            set
            {
                @requestid = value;
            }
        }
        [Metreos.ApplicationFramework.ResultDataField("Result")]
        public virtual WebServices.NativeTypes.VocalPasswordServer.VPEnrollSegmentsStatusType Result
        {
            get
            {
                return @result;
            }
            set
            {
                @result = value;
            }
        }
        public virtual bool ValidateInput()
        {
            return true;
        }
        public virtual void Clear()
        {
            @url = null;
            @proxyurl = null;
            @speakerid = null;
            @speakersubid = null;
            @configsetname = null;
            @requestid = new System.Int32();
            @result = null;
        }
        public virtual WebServices.Base.VocalPasswordServer.VocalPasswordServer CreateService(string proxyPath)
        {
            WebServices.Base.VocalPasswordServer.VocalPasswordServer _metreosProxyService = new WebServices.Base.VocalPasswordServer.VocalPasswordServer();
            if (proxyPath != null && proxyPath != String.Empty && proxyPath != "NULL")
            {
                System.Net.WebProxy proxy = new System.Net.WebProxy(proxyPath);
                _metreosProxyService.Proxy = proxy;
            }
            return _metreosProxyService;
        }
        [Metreos.PackageGeneratorCore.Attributes.ActionAttribute("GetEnrollSegmentsStatus", false, "GetEnrollSegmentsStatus", "GetEnrollSegmentsStatus web service request")]
        public virtual string Execute(Metreos.ApplicationFramework.SessionData sessionData, Metreos.Core.IConfigUtility config)
        {
            WebServices.Base.VocalPasswordServer.VocalPasswordServer _metreosProxyService = null;
            try
            {
                _metreosProxyService = CreateService(proxyurl);
                if (url != null)
                {
                    _metreosProxyService.Url = url;
                }
                System.String __speakerid = @speakerid;
                System.String __speakersubid = @speakersubid;
                System.String __configsetname = @configsetname;
                WebServices.Base.VocalPasswordServer.VPEnrollSegmentsStatus __result = _metreosProxyService.GetEnrollSegmentsStatus(__speakerid, __speakersubid, __configsetname, out requestid);
                result = new WebServices.NativeTypes.VocalPasswordServer.VPEnrollSegmentsStatusType();
                result.Value = __result;
                return Metreos.Interfaces.IApp.VALUE_SUCCESS;
            }
            catch (System.Exception e)
            {
                log.Write(System.Diagnostics.TraceLevel.Error, e.ToString() );
                return Metreos.Interfaces.IApp.VALUE_FAILURE;
            }
            finally
            {
                if (_metreosProxyService != null)
                {
                    _metreosProxyService.Dispose();
                }
            }
        }
    }
    public class SetExternalRequestId : Metreos.ApplicationFramework.INativeAction
    {
        private Metreos.LoggingFramework.LogWriter log;
        private string url;
        private string proxyurl;
        private int internalrequestid;
        private string externalrequestid;
        private int result;
        public virtual Metreos.LoggingFramework.LogWriter Log
        {
            get
            {
                return log;
            }
            set
            {
                log = value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("Url", false)]
        public virtual string Url
        {
            get
            {
                return @url;
            }
            set
            {
                @url = @value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("ProxyUrl", false)]
        public virtual string ProxyUrl
        {
            get
            {
                return @proxyurl;
            }
            set
            {
                @proxyurl = @value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("InternalRequestId", false)]
        public virtual int InternalRequestId
        {
            get
            {
                return @internalrequestid;
            }
            set
            {
                @internalrequestid = @value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("ExternalRequestId", false)]
        public virtual string ExternalRequestId
        {
            get
            {
                return @externalrequestid;
            }
            set
            {
                @externalrequestid = @value;
            }
        }
        [Metreos.ApplicationFramework.ResultDataField("Result")]
        public virtual int Result
        {
            get
            {
                return @result;
            }
            set
            {
                @result = value;
            }
        }
        public virtual bool ValidateInput()
        {
            return true;
        }
        public virtual void Clear()
        {
            @url = null;
            @proxyurl = null;
            @internalrequestid = new System.Int32();
            @externalrequestid = null;
            @result = new System.Int32();
        }
        public virtual WebServices.Base.VocalPasswordServer.VocalPasswordServer CreateService(string proxyPath)
        {
            WebServices.Base.VocalPasswordServer.VocalPasswordServer _metreosProxyService = new WebServices.Base.VocalPasswordServer.VocalPasswordServer();
            if (proxyPath != null && proxyPath != String.Empty && proxyPath != "NULL")
            {
                System.Net.WebProxy proxy = new System.Net.WebProxy(proxyPath);
                _metreosProxyService.Proxy = proxy;
            }
            return _metreosProxyService;
        }
        [Metreos.PackageGeneratorCore.Attributes.ActionAttribute("SetExternalRequestId", false, "SetExternalRequestId", "SetExternalRequestId web service request")]
        public virtual string Execute(Metreos.ApplicationFramework.SessionData sessionData, Metreos.Core.IConfigUtility config)
        {
            WebServices.Base.VocalPasswordServer.VocalPasswordServer _metreosProxyService = null;
            try
            {
                _metreosProxyService = CreateService(proxyurl);
                if (url != null)
                {
                    _metreosProxyService.Url = url;
                }
                System.Int32 __internalrequestid = @internalrequestid;
                System.String __externalrequestid = @externalrequestid;
                System.Int32 __result = _metreosProxyService.SetExternalRequestId(__internalrequestid, __externalrequestid);
                result = __result;
                return Metreos.Interfaces.IApp.VALUE_SUCCESS;
            }
            catch (System.Exception e)
            {
                log.Write(System.Diagnostics.TraceLevel.Error, e.ToString() );
                return Metreos.Interfaces.IApp.VALUE_FAILURE;
            }
            finally
            {
                if (_metreosProxyService != null)
                {
                    _metreosProxyService.Dispose();
                }
            }
        }
    }
    public class GetRequestId : Metreos.ApplicationFramework.INativeAction
    {
        private Metreos.LoggingFramework.LogWriter log;
        private string url;
        private string proxyurl;
        private string externalrequestid;
        private int requestid;
        private int result;
        public virtual Metreos.LoggingFramework.LogWriter Log
        {
            get
            {
                return log;
            }
            set
            {
                log = value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("Url", false)]
        public virtual string Url
        {
            get
            {
                return @url;
            }
            set
            {
                @url = @value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("ProxyUrl", false)]
        public virtual string ProxyUrl
        {
            get
            {
                return @proxyurl;
            }
            set
            {
                @proxyurl = @value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("ExternalRequestId", false)]
        public virtual string ExternalRequestId
        {
            get
            {
                return @externalrequestid;
            }
            set
            {
                @externalrequestid = @value;
            }
        }
        [Metreos.ApplicationFramework.ResultDataField("RequestId")]
        public virtual int RequestId
        {
            get
            {
                return @requestid;
            }
            set
            {
                @requestid = value;
            }
        }
        [Metreos.ApplicationFramework.ResultDataField("Result")]
        public virtual int Result
        {
            get
            {
                return @result;
            }
            set
            {
                @result = value;
            }
        }
        public virtual bool ValidateInput()
        {
            return true;
        }
        public virtual void Clear()
        {
            @url = null;
            @proxyurl = null;
            @externalrequestid = null;
            @requestid = new System.Int32();
            @result = new System.Int32();
        }
        public virtual WebServices.Base.VocalPasswordServer.VocalPasswordServer CreateService(string proxyPath)
        {
            WebServices.Base.VocalPasswordServer.VocalPasswordServer _metreosProxyService = new WebServices.Base.VocalPasswordServer.VocalPasswordServer();
            if (proxyPath != null && proxyPath != String.Empty && proxyPath != "NULL")
            {
                System.Net.WebProxy proxy = new System.Net.WebProxy(proxyPath);
                _metreosProxyService.Proxy = proxy;
            }
            return _metreosProxyService;
        }
        [Metreos.PackageGeneratorCore.Attributes.ActionAttribute("GetRequestId", false, "GetRequestId", "GetRequestId web service request")]
        public virtual string Execute(Metreos.ApplicationFramework.SessionData sessionData, Metreos.Core.IConfigUtility config)
        {
            WebServices.Base.VocalPasswordServer.VocalPasswordServer _metreosProxyService = null;
            try
            {
                _metreosProxyService = CreateService(proxyurl);
                if (url != null)
                {
                    _metreosProxyService.Url = url;
                }
                System.String __externalrequestid = @externalrequestid;
                System.Int32 __result = _metreosProxyService.GetRequestId(__externalrequestid, out requestid);
                result = __result;
                return Metreos.Interfaces.IApp.VALUE_SUCCESS;
            }
            catch (System.Exception e)
            {
                log.Write(System.Diagnostics.TraceLevel.Error, e.ToString() );
                return Metreos.Interfaces.IApp.VALUE_FAILURE;
            }
            finally
            {
                if (_metreosProxyService != null)
                {
                    _metreosProxyService.Dispose();
                }
            }
        }
    }
    public class GetVerifyDetailedResult : Metreos.ApplicationFramework.INativeAction
    {
        private Metreos.LoggingFramework.LogWriter log;
        private string url;
        private string proxyurl;
        private int verifyrequestid;
        private int requestid;
        private WebServices.NativeTypes.VocalPasswordServer.DetailedResultType result;
        public virtual Metreos.LoggingFramework.LogWriter Log
        {
            get
            {
                return log;
            }
            set
            {
                log = value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("Url", false)]
        public virtual string Url
        {
            get
            {
                return @url;
            }
            set
            {
                @url = @value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("ProxyUrl", false)]
        public virtual string ProxyUrl
        {
            get
            {
                return @proxyurl;
            }
            set
            {
                @proxyurl = @value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("VerifyRequestId", false)]
        public virtual int VerifyRequestId
        {
            get
            {
                return @verifyrequestid;
            }
            set
            {
                @verifyrequestid = @value;
            }
        }
        [Metreos.ApplicationFramework.ResultDataField("RequestId")]
        public virtual int RequestId
        {
            get
            {
                return @requestid;
            }
            set
            {
                @requestid = value;
            }
        }
        [Metreos.ApplicationFramework.ResultDataField("Result")]
        public virtual WebServices.NativeTypes.VocalPasswordServer.DetailedResultType Result
        {
            get
            {
                return @result;
            }
            set
            {
                @result = value;
            }
        }
        public virtual bool ValidateInput()
        {
            return true;
        }
        public virtual void Clear()
        {
            @url = null;
            @proxyurl = null;
            @verifyrequestid = new System.Int32();
            @requestid = new System.Int32();
            @result = null;
        }
        public virtual WebServices.Base.VocalPasswordServer.VocalPasswordServer CreateService(string proxyPath)
        {
            WebServices.Base.VocalPasswordServer.VocalPasswordServer _metreosProxyService = new WebServices.Base.VocalPasswordServer.VocalPasswordServer();
            if (proxyPath != null && proxyPath != String.Empty && proxyPath != "NULL")
            {
                System.Net.WebProxy proxy = new System.Net.WebProxy(proxyPath);
                _metreosProxyService.Proxy = proxy;
            }
            return _metreosProxyService;
        }
        [Metreos.PackageGeneratorCore.Attributes.ActionAttribute("GetVerifyDetailedResult", false, "GetVerifyDetailedResult", "GetVerifyDetailedResult web service request")]
        public virtual string Execute(Metreos.ApplicationFramework.SessionData sessionData, Metreos.Core.IConfigUtility config)
        {
            WebServices.Base.VocalPasswordServer.VocalPasswordServer _metreosProxyService = null;
            try
            {
                _metreosProxyService = CreateService(proxyurl);
                if (url != null)
                {
                    _metreosProxyService.Url = url;
                }
                System.Int32 __verifyrequestid = @verifyrequestid;
                WebServices.Base.VocalPasswordServer.DetailedResult __result = _metreosProxyService.GetVerifyDetailedResult(__verifyrequestid, out requestid);
                result = new WebServices.NativeTypes.VocalPasswordServer.DetailedResultType();
                result.Value = __result;
                return Metreos.Interfaces.IApp.VALUE_SUCCESS;
            }
            catch (System.Exception e)
            {
                log.Write(System.Diagnostics.TraceLevel.Error, e.ToString() );
                return Metreos.Interfaces.IApp.VALUE_FAILURE;
            }
            finally
            {
                if (_metreosProxyService != null)
                {
                    _metreosProxyService.Dispose();
                }
            }
        }
    }
    public class GetIdentifyDetailedResult : Metreos.ApplicationFramework.INativeAction
    {
        private Metreos.LoggingFramework.LogWriter log;
        private string url;
        private string proxyurl;
        private int identifyrequestid;
        private int requestid;
        private WebServices.NativeTypes.VocalPasswordServer.DetailedResultArray result;
        public virtual Metreos.LoggingFramework.LogWriter Log
        {
            get
            {
                return log;
            }
            set
            {
                log = value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("Url", false)]
        public virtual string Url
        {
            get
            {
                return @url;
            }
            set
            {
                @url = @value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("ProxyUrl", false)]
        public virtual string ProxyUrl
        {
            get
            {
                return @proxyurl;
            }
            set
            {
                @proxyurl = @value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("IdentifyRequestId", false)]
        public virtual int IdentifyRequestId
        {
            get
            {
                return @identifyrequestid;
            }
            set
            {
                @identifyrequestid = @value;
            }
        }
        [Metreos.ApplicationFramework.ResultDataField("RequestId")]
        public virtual int RequestId
        {
            get
            {
                return @requestid;
            }
            set
            {
                @requestid = value;
            }
        }
        [Metreos.ApplicationFramework.ResultDataField("Result")]
        public virtual WebServices.NativeTypes.VocalPasswordServer.DetailedResultArray Result
        {
            get
            {
                return @result;
            }
            set
            {
                @result = value;
            }
        }
        public virtual bool ValidateInput()
        {
            return true;
        }
        public virtual void Clear()
        {
            @url = null;
            @proxyurl = null;
            @identifyrequestid = new System.Int32();
            @requestid = new System.Int32();
            @result = null;
        }
        public virtual WebServices.Base.VocalPasswordServer.VocalPasswordServer CreateService(string proxyPath)
        {
            WebServices.Base.VocalPasswordServer.VocalPasswordServer _metreosProxyService = new WebServices.Base.VocalPasswordServer.VocalPasswordServer();
            if (proxyPath != null && proxyPath != String.Empty && proxyPath != "NULL")
            {
                System.Net.WebProxy proxy = new System.Net.WebProxy(proxyPath);
                _metreosProxyService.Proxy = proxy;
            }
            return _metreosProxyService;
        }
        [Metreos.PackageGeneratorCore.Attributes.ActionAttribute("GetIdentifyDetailedResult", false, "GetIdentifyDetailedResult", "GetIdentifyDetailedResult web service request")]
        public virtual string Execute(Metreos.ApplicationFramework.SessionData sessionData, Metreos.Core.IConfigUtility config)
        {
            WebServices.Base.VocalPasswordServer.VocalPasswordServer _metreosProxyService = null;
            try
            {
                _metreosProxyService = CreateService(proxyurl);
                if (url != null)
                {
                    _metreosProxyService.Url = url;
                }
                System.Int32 __identifyrequestid = @identifyrequestid;
                WebServices.Base.VocalPasswordServer.DetailedResult[] __result = _metreosProxyService.GetIdentifyDetailedResult(__identifyrequestid, out requestid);
                result = new WebServices.NativeTypes.VocalPasswordServer.DetailedResultArray();
                result.Value = __result;
                return Metreos.Interfaces.IApp.VALUE_SUCCESS;
            }
            catch (System.Exception e)
            {
                log.Write(System.Diagnostics.TraceLevel.Error, e.ToString() );
                return Metreos.Interfaces.IApp.VALUE_FAILURE;
            }
            finally
            {
                if (_metreosProxyService != null)
                {
                    _metreosProxyService.Dispose();
                }
            }
        }
    }
    public class SetApplicationData : Metreos.ApplicationFramework.INativeAction
    {
        private Metreos.LoggingFramework.LogWriter log;
        private string url;
        private string proxyurl;
        private int uniqueid;
        private string title;
        private string data;
        private int result;
        public virtual Metreos.LoggingFramework.LogWriter Log
        {
            get
            {
                return log;
            }
            set
            {
                log = value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("Url", false)]
        public virtual string Url
        {
            get
            {
                return @url;
            }
            set
            {
                @url = @value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("ProxyUrl", false)]
        public virtual string ProxyUrl
        {
            get
            {
                return @proxyurl;
            }
            set
            {
                @proxyurl = @value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("UniqueId", false)]
        public virtual int UniqueId
        {
            get
            {
                return @uniqueid;
            }
            set
            {
                @uniqueid = @value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("Title", false)]
        public virtual string Title
        {
            get
            {
                return @title;
            }
            set
            {
                @title = @value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("Data", false)]
        public virtual string Data
        {
            get
            {
                return @data;
            }
            set
            {
                @data = @value;
            }
        }
        [Metreos.ApplicationFramework.ResultDataField("Result")]
        public virtual int Result
        {
            get
            {
                return @result;
            }
            set
            {
                @result = value;
            }
        }
        public virtual bool ValidateInput()
        {
            return true;
        }
        public virtual void Clear()
        {
            @url = null;
            @proxyurl = null;
            @uniqueid = new System.Int32();
            @title = null;
            @data = null;
            @result = new System.Int32();
        }
        public virtual WebServices.Base.VocalPasswordServer.VocalPasswordServer CreateService(string proxyPath)
        {
            WebServices.Base.VocalPasswordServer.VocalPasswordServer _metreosProxyService = new WebServices.Base.VocalPasswordServer.VocalPasswordServer();
            if (proxyPath != null && proxyPath != String.Empty && proxyPath != "NULL")
            {
                System.Net.WebProxy proxy = new System.Net.WebProxy(proxyPath);
                _metreosProxyService.Proxy = proxy;
            }
            return _metreosProxyService;
        }
        [Metreos.PackageGeneratorCore.Attributes.ActionAttribute("SetApplicationData", false, "SetApplicationData", "SetApplicationData web service request")]
        public virtual string Execute(Metreos.ApplicationFramework.SessionData sessionData, Metreos.Core.IConfigUtility config)
        {
            WebServices.Base.VocalPasswordServer.VocalPasswordServer _metreosProxyService = null;
            try
            {
                _metreosProxyService = CreateService(proxyurl);
                if (url != null)
                {
                    _metreosProxyService.Url = url;
                }
                System.Int32 __uniqueid = @uniqueid;
                System.String __title = @title;
                System.String __data = @data;
                System.Int32 __result = _metreosProxyService.SetApplicationData(__uniqueid, __title, __data);
                result = __result;
                return Metreos.Interfaces.IApp.VALUE_SUCCESS;
            }
            catch (System.Exception e)
            {
                log.Write(System.Diagnostics.TraceLevel.Error, e.ToString() );
                return Metreos.Interfaces.IApp.VALUE_FAILURE;
            }
            finally
            {
                if (_metreosProxyService != null)
                {
                    _metreosProxyService.Dispose();
                }
            }
        }
    }
    public class GetApplicationData : Metreos.ApplicationFramework.INativeAction
    {
        private Metreos.LoggingFramework.LogWriter log;
        private string url;
        private string proxyurl;
        private int uniqueid;
        private string title;
        private int requestid;
        private string result;
        public virtual Metreos.LoggingFramework.LogWriter Log
        {
            get
            {
                return log;
            }
            set
            {
                log = value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("Url", false)]
        public virtual string Url
        {
            get
            {
                return @url;
            }
            set
            {
                @url = @value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("ProxyUrl", false)]
        public virtual string ProxyUrl
        {
            get
            {
                return @proxyurl;
            }
            set
            {
                @proxyurl = @value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("UniqueId", false)]
        public virtual int UniqueId
        {
            get
            {
                return @uniqueid;
            }
            set
            {
                @uniqueid = @value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("Title", false)]
        public virtual string Title
        {
            get
            {
                return @title;
            }
            set
            {
                @title = @value;
            }
        }
        [Metreos.ApplicationFramework.ResultDataField("RequestId")]
        public virtual int RequestId
        {
            get
            {
                return @requestid;
            }
            set
            {
                @requestid = value;
            }
        }
        [Metreos.ApplicationFramework.ResultDataField("Result")]
        public virtual string Result
        {
            get
            {
                return @result;
            }
            set
            {
                @result = value;
            }
        }
        public virtual bool ValidateInput()
        {
            return true;
        }
        public virtual void Clear()
        {
            @url = null;
            @proxyurl = null;
            @uniqueid = new System.Int32();
            @title = null;
            @requestid = new System.Int32();
            @result = null;
        }
        public virtual WebServices.Base.VocalPasswordServer.VocalPasswordServer CreateService(string proxyPath)
        {
            WebServices.Base.VocalPasswordServer.VocalPasswordServer _metreosProxyService = new WebServices.Base.VocalPasswordServer.VocalPasswordServer();
            if (proxyPath != null && proxyPath != String.Empty && proxyPath != "NULL")
            {
                System.Net.WebProxy proxy = new System.Net.WebProxy(proxyPath);
                _metreosProxyService.Proxy = proxy;
            }
            return _metreosProxyService;
        }
        [Metreos.PackageGeneratorCore.Attributes.ActionAttribute("GetApplicationData", false, "GetApplicationData", "GetApplicationData web service request")]
        public virtual string Execute(Metreos.ApplicationFramework.SessionData sessionData, Metreos.Core.IConfigUtility config)
        {
            WebServices.Base.VocalPasswordServer.VocalPasswordServer _metreosProxyService = null;
            try
            {
                _metreosProxyService = CreateService(proxyurl);
                if (url != null)
                {
                    _metreosProxyService.Url = url;
                }
                System.Int32 __uniqueid = @uniqueid;
                System.String __title = @title;
                System.String __result = _metreosProxyService.GetApplicationData(__uniqueid, __title, out requestid);
                result = __result;
                return Metreos.Interfaces.IApp.VALUE_SUCCESS;
            }
            catch (System.Exception e)
            {
                log.Write(System.Diagnostics.TraceLevel.Error, e.ToString() );
                return Metreos.Interfaces.IApp.VALUE_FAILURE;
            }
            finally
            {
                if (_metreosProxyService != null)
                {
                    _metreosProxyService.Dispose();
                }
            }
        }
    }
    public class SetVoiceprintData : Metreos.ApplicationFramework.INativeAction
    {
        private Metreos.LoggingFramework.LogWriter log;
        private string url;
        private string proxyurl;
        private string speakerid;
        private string speakersubid;
        private string title;
        private string data;
        private int result;
        public virtual Metreos.LoggingFramework.LogWriter Log
        {
            get
            {
                return log;
            }
            set
            {
                log = value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("Url", false)]
        public virtual string Url
        {
            get
            {
                return @url;
            }
            set
            {
                @url = @value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("ProxyUrl", false)]
        public virtual string ProxyUrl
        {
            get
            {
                return @proxyurl;
            }
            set
            {
                @proxyurl = @value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("SpeakerId", false)]
        public virtual string SpeakerId
        {
            get
            {
                return @speakerid;
            }
            set
            {
                @speakerid = @value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("SpeakerSubId", false)]
        public virtual string SpeakerSubId
        {
            get
            {
                return @speakersubid;
            }
            set
            {
                @speakersubid = @value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("Title", false)]
        public virtual string Title
        {
            get
            {
                return @title;
            }
            set
            {
                @title = @value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("Data", false)]
        public virtual string Data
        {
            get
            {
                return @data;
            }
            set
            {
                @data = @value;
            }
        }
        [Metreos.ApplicationFramework.ResultDataField("Result")]
        public virtual int Result
        {
            get
            {
                return @result;
            }
            set
            {
                @result = value;
            }
        }
        public virtual bool ValidateInput()
        {
            return true;
        }
        public virtual void Clear()
        {
            @url = null;
            @proxyurl = null;
            @speakerid = null;
            @speakersubid = null;
            @title = null;
            @data = null;
            @result = new System.Int32();
        }
        public virtual WebServices.Base.VocalPasswordServer.VocalPasswordServer CreateService(string proxyPath)
        {
            WebServices.Base.VocalPasswordServer.VocalPasswordServer _metreosProxyService = new WebServices.Base.VocalPasswordServer.VocalPasswordServer();
            if (proxyPath != null && proxyPath != String.Empty && proxyPath != "NULL")
            {
                System.Net.WebProxy proxy = new System.Net.WebProxy(proxyPath);
                _metreosProxyService.Proxy = proxy;
            }
            return _metreosProxyService;
        }
        [Metreos.PackageGeneratorCore.Attributes.ActionAttribute("SetVoiceprintData", false, "SetVoiceprintData", "SetVoiceprintData web service request")]
        public virtual string Execute(Metreos.ApplicationFramework.SessionData sessionData, Metreos.Core.IConfigUtility config)
        {
            WebServices.Base.VocalPasswordServer.VocalPasswordServer _metreosProxyService = null;
            try
            {
                _metreosProxyService = CreateService(proxyurl);
                if (url != null)
                {
                    _metreosProxyService.Url = url;
                }
                System.String __speakerid = @speakerid;
                System.String __speakersubid = @speakersubid;
                System.String __title = @title;
                System.String __data = @data;
                System.Int32 __result = _metreosProxyService.SetVoiceprintData(__speakerid, __speakersubid, __title, __data);
                result = __result;
                return Metreos.Interfaces.IApp.VALUE_SUCCESS;
            }
            catch (System.Exception e)
            {
                log.Write(System.Diagnostics.TraceLevel.Error, e.ToString() );
                return Metreos.Interfaces.IApp.VALUE_FAILURE;
            }
            finally
            {
                if (_metreosProxyService != null)
                {
                    _metreosProxyService.Dispose();
                }
            }
        }
    }
    public class GetVoiceprintData : Metreos.ApplicationFramework.INativeAction
    {
        private Metreos.LoggingFramework.LogWriter log;
        private string url;
        private string proxyurl;
        private string speakerid;
        private string speakersubid;
        private string title;
        private int requestid;
        private string result;
        public virtual Metreos.LoggingFramework.LogWriter Log
        {
            get
            {
                return log;
            }
            set
            {
                log = value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("Url", false)]
        public virtual string Url
        {
            get
            {
                return @url;
            }
            set
            {
                @url = @value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("ProxyUrl", false)]
        public virtual string ProxyUrl
        {
            get
            {
                return @proxyurl;
            }
            set
            {
                @proxyurl = @value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("SpeakerId", false)]
        public virtual string SpeakerId
        {
            get
            {
                return @speakerid;
            }
            set
            {
                @speakerid = @value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("SpeakerSubId", false)]
        public virtual string SpeakerSubId
        {
            get
            {
                return @speakersubid;
            }
            set
            {
                @speakersubid = @value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("Title", false)]
        public virtual string Title
        {
            get
            {
                return @title;
            }
            set
            {
                @title = @value;
            }
        }
        [Metreos.ApplicationFramework.ResultDataField("RequestId")]
        public virtual int RequestId
        {
            get
            {
                return @requestid;
            }
            set
            {
                @requestid = value;
            }
        }
        [Metreos.ApplicationFramework.ResultDataField("Result")]
        public virtual string Result
        {
            get
            {
                return @result;
            }
            set
            {
                @result = value;
            }
        }
        public virtual bool ValidateInput()
        {
            return true;
        }
        public virtual void Clear()
        {
            @url = null;
            @proxyurl = null;
            @speakerid = null;
            @speakersubid = null;
            @title = null;
            @requestid = new System.Int32();
            @result = null;
        }
        public virtual WebServices.Base.VocalPasswordServer.VocalPasswordServer CreateService(string proxyPath)
        {
            WebServices.Base.VocalPasswordServer.VocalPasswordServer _metreosProxyService = new WebServices.Base.VocalPasswordServer.VocalPasswordServer();
            if (proxyPath != null && proxyPath != String.Empty && proxyPath != "NULL")
            {
                System.Net.WebProxy proxy = new System.Net.WebProxy(proxyPath);
                _metreosProxyService.Proxy = proxy;
            }
            return _metreosProxyService;
        }
        [Metreos.PackageGeneratorCore.Attributes.ActionAttribute("GetVoiceprintData", false, "GetVoiceprintData", "GetVoiceprintData web service request")]
        public virtual string Execute(Metreos.ApplicationFramework.SessionData sessionData, Metreos.Core.IConfigUtility config)
        {
            WebServices.Base.VocalPasswordServer.VocalPasswordServer _metreosProxyService = null;
            try
            {
                _metreosProxyService = CreateService(proxyurl);
                if (url != null)
                {
                    _metreosProxyService.Url = url;
                }
                System.String __speakerid = @speakerid;
                System.String __speakersubid = @speakersubid;
                System.String __title = @title;
                System.String __result = _metreosProxyService.GetVoiceprintData(__speakerid, __speakersubid, __title, out requestid);
                result = __result;
                return Metreos.Interfaces.IApp.VALUE_SUCCESS;
            }
            catch (System.Exception e)
            {
                log.Write(System.Diagnostics.TraceLevel.Error, e.ToString() );
                return Metreos.Interfaces.IApp.VALUE_FAILURE;
            }
            finally
            {
                if (_metreosProxyService != null)
                {
                    _metreosProxyService.Dispose();
                }
            }
        }
    }
    public class SetAuthenticity : Metreos.ApplicationFramework.INativeAction
    {
        private Metreos.LoggingFramework.LogWriter log;
        private string url;
        private string proxyurl;
        private int verifyrequestid;
        private WebServices.Base.VocalPasswordServer.Authentication authenticity;
        private int result;
        public virtual Metreos.LoggingFramework.LogWriter Log
        {
            get
            {
                return log;
            }
            set
            {
                log = value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("Url", false)]
        public virtual string Url
        {
            get
            {
                return @url;
            }
            set
            {
                @url = @value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("ProxyUrl", false)]
        public virtual string ProxyUrl
        {
            get
            {
                return @proxyurl;
            }
            set
            {
                @proxyurl = @value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("VerifyRequestId", false)]
        public virtual int VerifyRequestId
        {
            get
            {
                return @verifyrequestid;
            }
            set
            {
                @verifyrequestid = @value;
            }
        }
        [Metreos.ApplicationFramework.ActionParamField("Authenticity", false)]
        public virtual WebServices.Base.VocalPasswordServer.Authentication Authenticity
        {
            get
            {
                return @authenticity;
            }
            set
            {
                @authenticity = @value;
            }
        }
        [Metreos.ApplicationFramework.ResultDataField("Result")]
        public virtual int Result
        {
            get
            {
                return @result;
            }
            set
            {
                @result = value;
            }
        }
        public virtual bool ValidateInput()
        {
            return true;
        }
        public virtual void Clear()
        {
            @url = null;
            @proxyurl = null;
            @verifyrequestid = new System.Int32();
            @result = new System.Int32();
        }
        public virtual WebServices.Base.VocalPasswordServer.VocalPasswordServer CreateService(string proxyPath)
        {
            WebServices.Base.VocalPasswordServer.VocalPasswordServer _metreosProxyService = new WebServices.Base.VocalPasswordServer.VocalPasswordServer();
            if (proxyPath != null && proxyPath != String.Empty && proxyPath != "NULL")
            {
                System.Net.WebProxy proxy = new System.Net.WebProxy(proxyPath);
                _metreosProxyService.Proxy = proxy;
            }
            return _metreosProxyService;
        }
        [Metreos.PackageGeneratorCore.Attributes.ActionAttribute("SetAuthenticity", false, "SetAuthenticity", "SetAuthenticity web service request")]
        public virtual string Execute(Metreos.ApplicationFramework.SessionData sessionData, Metreos.Core.IConfigUtility config)
        {
            WebServices.Base.VocalPasswordServer.VocalPasswordServer _metreosProxyService = null;
            try
            {
                _metreosProxyService = CreateService(proxyurl);
                if (url != null)
                {
                    _metreosProxyService.Url = url;
                }
                System.Int32 __verifyrequestid = @verifyrequestid;
                WebServices.Base.VocalPasswordServer.Authentication __authenticity = @authenticity;
                System.Int32 __result = _metreosProxyService.SetAuthenticity(__verifyrequestid, __authenticity);
                result = __result;
                return Metreos.Interfaces.IApp.VALUE_SUCCESS;
            }
            catch (System.Exception e)
            {
                log.Write(System.Diagnostics.TraceLevel.Error, e.ToString() );
                return Metreos.Interfaces.IApp.VALUE_FAILURE;
            }
            finally
            {
                if (_metreosProxyService != null)
                {
                    _metreosProxyService.Dispose();
                }
            }
        }
    }
}
