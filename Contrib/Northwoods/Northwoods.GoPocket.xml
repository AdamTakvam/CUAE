<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Northwoods.GoPocket</name>
    </assembly>
    <members>
        <member name="T:Northwoods.Go.GoControl">
            <summary>
            This graphical object provides a way to get the appearance and behavior
            from an existing Windows Forms <c>Control</c>.
            <p>
            Warning: the design and usage of this class may change significantly
            in future releases.  In particular, changes are likely to focus management
            and bounds management with scaling.
            </p>
            </summary>
        </member>
        <member name="T:Northwoods.Go.GoObject">
            <summary>
            The GoObject abstract class represents graphical objects that can be
            added to <see cref="T:Northwoods.Go.GoDocument"/>s to be displayed by <see cref="T:Northwoods.Go.GoView"/>s.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoObject.NoSpot">
            <summary>
            Use this spot when no particular spot seems appropriate.
            </summary>
            <seealso cref="M:Northwoods.Go.GoObject.GetSpotLocation(System.Int32)"/>
        </member>
        <member name="F:Northwoods.Go.GoObject.NoHandle">
            <summary>
            Use this handle when no particular handle seems appropriate.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoObject.Middle">
            <summary>
            This represents the point at the center of the object's bounds.
            </summary>
            <seealso cref="M:Northwoods.Go.GoObject.GetSpotLocation(System.Int32)"/>
        </member>
        <member name="F:Northwoods.Go.GoObject.MiddleCenter">
            <summary>
            This represents the point at the center of the object's bounds.
            </summary>
            <seealso cref="F:Northwoods.Go.GoObject.Middle"/>
            <seealso cref="M:Northwoods.Go.GoObject.GetSpotLocation(System.Int32)"/>
        </member>
        <member name="F:Northwoods.Go.GoObject.TopLeft">
            <summary>
            This represents a corner point in the object's bounds.
            </summary>
            <seealso cref="M:Northwoods.Go.GoObject.GetSpotLocation(System.Int32)"/>
        </member>
        <member name="F:Northwoods.Go.GoObject.TopRight">
            <summary>
            This represents a corner point in the object's bounds.
            </summary>
            <seealso cref="M:Northwoods.Go.GoObject.GetSpotLocation(System.Int32)"/>
        </member>
        <member name="F:Northwoods.Go.GoObject.BottomRight">
            <summary>
            This represents a corner point in the object's bounds.
            </summary>
            <seealso cref="M:Northwoods.Go.GoObject.GetSpotLocation(System.Int32)"/>
        </member>
        <member name="F:Northwoods.Go.GoObject.BottomLeft">
            <summary>
            This represents a corner point in the object's bounds.
            </summary>
            <seealso cref="M:Northwoods.Go.GoObject.GetSpotLocation(System.Int32)"/>
        </member>
        <member name="F:Northwoods.Go.GoObject.MiddleTop">
            <summary>
            This represents a point in the object's bounds.
            </summary>
            <seealso cref="M:Northwoods.Go.GoObject.GetSpotLocation(System.Int32)"/>
        </member>
        <member name="F:Northwoods.Go.GoObject.TopCenter">
            <summary>
            This represents a point in the object's bounds.
            </summary>
            <seealso cref="F:Northwoods.Go.GoObject.MiddleTop"/>
            <seealso cref="M:Northwoods.Go.GoObject.GetSpotLocation(System.Int32)"/>
        </member>
        <member name="F:Northwoods.Go.GoObject.MiddleRight">
            <summary>
            This represents a point in the object's bounds.
            </summary>
            <seealso cref="M:Northwoods.Go.GoObject.GetSpotLocation(System.Int32)"/>
        </member>
        <member name="F:Northwoods.Go.GoObject.MiddleBottom">
            <summary>
            This represents a point in the object's bounds.
            </summary>
            <seealso cref="M:Northwoods.Go.GoObject.GetSpotLocation(System.Int32)"/>
        </member>
        <member name="F:Northwoods.Go.GoObject.BottomCenter">
            <summary>
            This represents a point in the object's bounds.
            </summary>
            <seealso cref="F:Northwoods.Go.GoObject.MiddleBottom"/>
            <seealso cref="M:Northwoods.Go.GoObject.GetSpotLocation(System.Int32)"/>
        </member>
        <member name="F:Northwoods.Go.GoObject.MiddleLeft">
            <summary>
            This represents a point in the object's bounds.
            </summary>
            <seealso cref="M:Northwoods.Go.GoObject.GetSpotLocation(System.Int32)"/>
        </member>
        <member name="F:Northwoods.Go.GoObject.LastSpot">
            <summary>
            User-defined spots should have identifiers greater than this value.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoObject.LastHandle">
            <summary>
            User-defined handles should have identifiers greater than this value.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoObject.RepaintAll">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoObject.ChangedBounds">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoObject.ChangedVisible">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoObject.ChangedSelectable">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoObject.ChangedMovable">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoObject.ChangedCopyable">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoObject.ChangedResizable">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoObject.ChangedReshapable">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoObject.ChangedDeletable">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoObject.ChangedEditable">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoObject.ChangedAutoRescales">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoObject.ChangedResizeRealtime">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoObject.ChangedShadowed">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoObject.ChangedAddedObserver">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoObject.ChangedRemovedObserver">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoObject.ChangedDragsNode">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoObject.ChangedPrintable">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoObject.LastChangedHint">
            <summary>
            Users can define their own <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> event subhint values greater than this value.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoObject.#ctor">
            <summary>
            The constructor produces a GoObject with no <see cref="P:Northwoods.Go.GoObject.Parent"/>
            that is not part of any <see cref="P:Northwoods.Go.GoObject.Layer"/> and that has no particular
            <see cref="P:Northwoods.Go.GoObject.Bounds"/>.
            </summary>
            <remarks>
            By default the following properties are true:
            <see cref="P:Northwoods.Go.GoObject.Visible"/>, <see cref="P:Northwoods.Go.GoObject.Selectable"/>, <see cref="P:Northwoods.Go.GoObject.Movable"/>,
            <see cref="P:Northwoods.Go.GoObject.Copyable"/>, <see cref="P:Northwoods.Go.GoObject.Resizable"/>, <see cref="P:Northwoods.Go.GoObject.Reshapable"/>,
            <see cref="P:Northwoods.Go.GoObject.Deletable"/>, <see cref="P:Northwoods.Go.GoObject.AutoRescales"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoObject.CopyObject(Northwoods.Go.GoCopyDictionary)">
            <summary>
            Produces a copy of this object within the given copy dictionary.
            </summary>
            <param name="env">
            The <see cref="T:Northwoods.Go.GoCopyDictionary"/> provides the context to be used for performing
            the copy.
            </param>
            <returns>
            A newly allocated copy of this object, or null.
            </returns>
            <remarks>
            If you just need to make a copy of a <see cref="T:Northwoods.Go.GoObject"/>, call
            <see cref="M:Northwoods.Go.GoDocument.AddCopy(Northwoods.Go.GoObject,Northwoods.Go.PointF)"/> or <see cref="M:Northwoods.Go.GoDocument.CopyFromCollection(Northwoods.Go.IGoCollection)"/>.
            You should override this method in your derived classes when it has some
            fields that have reference objects that need to be copied.
            Your override method should first call <c>base.CopyObject(env)</c>
            to get the newly copied object.
            The copied object does not belong to any layer or any group, nor does
            it have any observers;
            the caller is responsible for adding it to the appropriate
            collection and adding the appropriate observers.
            If <c>base.CopyObject(env)</c> returns null, it's either already copied,
            or mapped to an existing object in this document,
            or shouldn't be copied at all.
            You probably should not be calling this method for any reason
            but the initial <c>base.CopyObject(env)</c> call in an override
            of this method.
            Within an override of this method, if you need to make a copy of
            another object, call <see cref="M:Northwoods.Go.GoCopyDictionary.Copy(Northwoods.Go.GoObject)"/> instead.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoObject.CopyObjectDelayed(Northwoods.Go.GoCopyDictionary,Northwoods.Go.GoObject)">
            <summary>
            For objects that require a second pass to complete the copying,
            this method is called after the first pass of copying all of the objects
            in <see cref="M:Northwoods.Go.GoDocument.CopyFromCollection(Northwoods.Go.IGoCollection)"/>.
            </summary>
            <param name="env"></param>
            <param name="newobj"></param>
            <remarks>
            This method need only be overridden by objects that refer to other
            independent objects.  The problem usually is that during the
            call to <see cref="M:Northwoods.Go.GoObject.CopyObject(Northwoods.Go.GoCopyDictionary)"/>, some of the objects that this
            object refers to might not yet have been copied.  So it's best to
            add this object to the <see cref="P:Northwoods.Go.GoCopyDictionary.Delayeds"/>
            collection in the call to <see cref="M:Northwoods.Go.GoObject.CopyObject(Northwoods.Go.GoCopyDictionary)"/>, and then
            fix things up during the second pass in the call to this method,
            <c>CopyObjectDelayed</c>.
            For most objects, this method just adds the new observers that are
            copies of any old observers of this object.  For <see cref="T:Northwoods.Go.GoLink"/>s,
            however, it also makes sure both ports refer to the copied ports, and
            if the ports were not copied, it removes the link.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoObject.IsChildOf(Northwoods.Go.GoObject)">
            <summary>
            Determines if this object is a child, perhaps indirectly, of the given object.
            </summary>
            <param name="obj"></param>
            <returns></returns>
            <remarks>
            This predicate will be false if <paramref name="obj"/> is this object itself or
            if it is not a <see cref="T:Northwoods.Go.GoGroup"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoObject.FindCommonParent(Northwoods.Go.GoObject,Northwoods.Go.GoObject)">
            <summary>
            Find the <see cref="T:Northwoods.Go.GoGroup"/> that is closest parent group for this object and another.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns>
            This will return null if either argument is null or
            if there is no parent group that contains both objects.
            If <paramref name="a"/> is the same object as <paramref name="b"/>, it will return it.
            If <paramref name="a"/> is a parent of <paramref name="b"/>,
            it will return <paramref name="a"/>. 
            If <paramref name="b"/> is a parent of <paramref name="a"/>,
            it will return <paramref name="b"/>. 
            </returns>
        </member>
        <member name="M:Northwoods.Go.GoObject.Remove">
            <summary>
            This convenience method just removes this object from its container, if there is any.
            </summary>
            <remarks>
            This is implemented as:
            <code>
              GoLayer layer = this.Layer;
              if (layer != null) {
                layer.Remove(this);
              } else {
                GoGroup parent = this.Parent;
                if (parent != null)
                  parent.Remove(this);
              }
            </code>
            Removing an object from a layer also removes it from its parent group, if any.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoObject.ComputeBounds">
            <summary>
            Recalculates the actual bounding rectangle for this object when it might
            be invalid.
            </summary>
            <returns>
            The true bounding rectangle, in document coordinates.
            </returns>
            <remarks>
            This method is called if the <see cref="P:Northwoods.Go.GoObject.InvalidBounds"/> property
            is true, and some code needs the value of the <see cref="P:Northwoods.Go.GoObject.Bounds"/>
            property or after the bounds have changed and <see cref="M:Northwoods.Go.GoObject.OnBoundsChanged(System.Drawing.RectangleF)"/>
            or <see cref="M:Northwoods.Go.GoGroup.OnChildBoundsChanged(Northwoods.Go.GoObject,System.Drawing.RectangleF)"/> have been called.
            The <see cref="P:Northwoods.Go.GoObject.InvalidBounds"/> property is set back to false
            just before calling this method.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoObject.SpotOpposite(System.Int32)">
            <summary>
            Get the spot that is on the opposite side of a given spot.
            </summary>
            <param name="spot">
            A predefined or user-defined integer spot or handle ID.
            </param>
            <returns>
            The opposite spot for the standard nine object spots.
            For other values, it just returns that value.
            </returns>
            <remarks>
            This is typically used by methods that position objects in
            a group (such as <see cref="M:Northwoods.Go.GoGroup.LayoutChildren(Northwoods.Go.GoObject)"/>)
            or that specify link points for ports (<see cref="P:Northwoods.Go.GoPort.ToSpot"/>).
            You may want to override this method to handle your own
            custom spot values, those with a value greater than
            </remarks>
            <see cref="F:Northwoods.Go.GoObject.LastSpot"/>.
            <seealso cref="M:Northwoods.Go.GoObject.GetSpotLocation(System.Int32)"/>
            <seealso cref="M:Northwoods.Go.GoObject.SetSpotLocation(System.Int32,Northwoods.Go.PointF)"/>
        </member>
        <member name="M:Northwoods.Go.GoObject.GetRectangleSpotLocation(System.Drawing.RectangleF,System.Int32)">
            <summary>
            Get the position of a spot in a rectangle.
            </summary>
            <param name="r">a <c>RectangleF</c></param>
            <param name="spot">a predefine or user-defined integer spot or handle ID.</param>
            <returns>the <c>PointF</c> position of that spot in the rectangle</returns>
            <remarks>
            This is typically used by methods that need to position objects within a group.
            You may want to override this method to handle your own
            custom spot values, those with a value greater than
            <see cref="F:Northwoods.Go.GoObject.LastSpot"/>.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoObject.GetSpotLocation(System.Int32)"/>
            <seealso cref="M:Northwoods.Go.GoObject.SetSpotLocation(System.Int32,Northwoods.Go.PointF)"/>
        </member>
        <member name="M:Northwoods.Go.GoObject.SetRectangleSpotLocation(System.Drawing.RectangleF,System.Int32,Northwoods.Go.PointF)">
            <summary>
            Modify a rectangle such that its new spot location is at a given point.
            </summary>
            <param name="r">a <c>RectangleF</c></param>
            <param name="spot">a predefine or user-defined integer spot or handle ID.</param>
            <param name="p">a <c>PointF</c> specifying the desired new location for the rectangle</param>
            <returns>the modified <c>RectangleF</c>; the original Width and Height are kept.</returns>
            <remarks>
            This is typically used by methods that need to position objects within a group.
            You may want to override this method to handle your own
            custom spot values, those with a value greater than
            <see cref="F:Northwoods.Go.GoObject.LastSpot"/>.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoObject.GetSpotLocation(System.Int32)"/>
            <seealso cref="M:Northwoods.Go.GoObject.SetSpotLocation(System.Int32,Northwoods.Go.PointF)"/>
        </member>
        <member name="M:Northwoods.Go.GoObject.GetSpotLocation(System.Int32)">
            <summary>
            Get the position of a spot on this object.
            </summary>
            <param name="spot">
            A predefined or user-defined integer spot or handle ID.
            </param>
            <returns>
            A <c>PointF</c> value in document coordinates.
            </returns>
            <remarks>
            You may define your own custom spot values, as long as they
            have a value greater than <see cref="F:Northwoods.Go.GoObject.LastSpot"/>.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoObject.SetSpotLocation(System.Int32,Northwoods.Go.PointF)"/>
            <seealso cref="M:Northwoods.Go.GoObject.SetSpotLocation(System.Int32,Northwoods.Go.GoObject,System.Int32)"/>
            <seealso cref="M:Northwoods.Go.GoObject.SpotOpposite(System.Int32)"/>
            <seealso cref="P:Northwoods.Go.GoObject.Location"/>
            <seealso cref="P:Northwoods.Go.GoObject.Position"/>
        </member>
        <member name="M:Northwoods.Go.GoObject.SetSpotLocation(System.Int32,Northwoods.Go.PointF)">
            <summary>
            Move this object so this object's given spot is at the given location.
            </summary>
            <param name="spot">
            A predefined or user-defined integer spot or handle ID.
            </param>
            <param name="newp">
            The new <c>PointF</c> position for this object's spot to be at.
            </param>
            <seealso cref="M:Northwoods.Go.GoObject.GetSpotLocation(System.Int32)"/>
            <seealso cref="M:Northwoods.Go.GoObject.SetSpotLocation(System.Int32,Northwoods.Go.GoObject,System.Int32)"/>
        </member>
        <member name="M:Northwoods.Go.GoObject.SetSpotLocation(System.Int32,Northwoods.Go.GoObject,System.Int32)">
            <summary>
            Move this object so this object's given spot is the same as another
            object's spot's position.
            </summary>
            <param name="spot">
            A predefined or user-defined integer spot or handle ID.
            </param>
            <param name="obj"></param>
            <param name="otherSpot"></param>
            <seealso cref="M:Northwoods.Go.GoObject.GetSpotLocation(System.Int32)"/>
            <seealso cref="M:Northwoods.Go.GoObject.SetSpotLocation(System.Int32,Northwoods.Go.PointF)"/>
        </member>
        <member name="M:Northwoods.Go.GoObject.SetSizeKeepingLocation(System.Drawing.SizeF)">
            <summary>
            Sets a new size for this object while maintaining the same location.
            </summary>
            <param name="s"></param>
            <remarks>
            If the natural location of an object is not the top-left corner,
            changing the size of an object will also change its location.
            However, there are times when you wish to change the size without
            changing the location.
            This method is more efficient than remembering the Location,
            setting the Size, and then setting the Location again.
            By default this assumes the <see cref="P:Northwoods.Go.GoObject.Location"/> is really the
            <see cref="F:Northwoods.Go.GoObject.TopLeft"/> spot of the object.
            If you override this method, you should also override the
            <see cref="P:Northwoods.Go.GoObject.Location"/> property.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoObject.CanView">
            <summary>
            Called to see if the user can see this object.
            </summary>
            <remarks>
            This returns true if <c>Visible</c>, if its parent
            is visible, and if this object is
            part of a layer, if <c>Layer.CanViewObjects</c> is true.
            This predicate is used by methods such as <see cref="M:Northwoods.Go.GoObject.Paint(System.Drawing.Graphics,Northwoods.Go.GoView)"/>.
            </remarks>
            <seealso cref="P:Northwoods.Go.GoObject.Visible"/>
            <seealso cref="M:Northwoods.Go.GoLayer.CanViewObjects"/>
        </member>
        <member name="M:Northwoods.Go.GoObject.CanPrint">
            <summary>
            Called to see if the view can print this object.
            </summary>
            <remarks>
            This returns true if <c>Printable</c>, if its parent
            is printable, and if this object is
            part of a layer, whether <c>Layer.CanPrintObjects</c> is true.
            This predicate is used by methods such as <see cref="M:Northwoods.Go.GoObject.Paint(System.Drawing.Graphics,Northwoods.Go.GoView)"/>
            when <see cref="P:Northwoods.Go.GoView.IsPrinting"/> is true.
            </remarks>
            <seealso cref="P:Northwoods.Go.GoObject.Printable"/>
            <seealso cref="M:Northwoods.Go.GoLayer.CanPrintObjects"/>
        </member>
        <member name="M:Northwoods.Go.GoObject.CanSelect">
            <summary>
            Called to see if the user can select this object.
            </summary>
            <remarks>
            This returns true if <c>Selectable</c>, and if this object is
            part of a layer, if <c>Layer.CanSelectObjects</c>.
            This object's parent need not be selectable for this
            object to be selectable.
            This predicate is used by methods such as <see cref="M:Northwoods.Go.GoView.SelectInRectangle(System.Drawing.RectangleF)"/>
            and <see cref="M:Northwoods.Go.GoObject.Pick(Northwoods.Go.PointF,System.Boolean)"/>.
            </remarks>
            <seealso cref="P:Northwoods.Go.GoObject.Selectable"/>
            <seealso cref="M:Northwoods.Go.GoLayer.CanSelectObjects"/>
        </member>
        <member name="M:Northwoods.Go.GoObject.CanMove">
            <summary>
            Called to see if the user can move this object.
            </summary>
            <remarks>
            This returns true if <c>Movable</c>, and, if this object is
            in a layer, if <c>Layer.CanMoveObjects</c>.
            This object's parent need not be movable for this
            object to be movable.
            This predicate is used by methods such as <see cref="M:Northwoods.Go.GoView.MoveSelection(Northwoods.Go.GoSelection,System.Drawing.SizeF,System.Boolean)"/>.
            </remarks>
            <seealso cref="P:Northwoods.Go.GoObject.Movable"/>
            <seealso cref="M:Northwoods.Go.GoLayer.CanMoveObjects"/>
        </member>
        <member name="M:Northwoods.Go.GoObject.CanCopy">
            <summary>
            Called to see if the user can copy this object.
            </summary>
            <remarks>
            This returns true if <c>Copyable</c>, and, if this object is
            in a layer, if <c>Layer.CanCopyObjects</c>.
            This object's parent need not be copyable for this
            object to be copyable.
            This predicate is used by methods such as <see cref="M:Northwoods.Go.GoView.CopySelection(Northwoods.Go.GoSelection,System.Drawing.SizeF,System.Boolean)"/>.
            </remarks>
            <seealso cref="P:Northwoods.Go.GoObject.Copyable"/>
            <seealso cref="M:Northwoods.Go.GoLayer.CanCopyObjects"/>
        </member>
        <member name="M:Northwoods.Go.GoObject.CanResize">
            <summary>
            Called to see if the user can resize this object.
            </summary>
            <remarks>
            This returns true if <see cref="P:Northwoods.Go.GoObject.Resizable"/>, and, if this object is
            in a layer, if <c>Layer.CanResizeObjects()</c> is true.
            This object's parent need not be resizable for this
            object to be resizable.
            This predicate is used by <see cref="T:Northwoods.Go.GoToolResizing"/>.
            </remarks>
            <seealso cref="P:Northwoods.Go.GoObject.Resizable"/>
            <seealso cref="M:Northwoods.Go.GoLayer.CanResizeObjects"/>
        </member>
        <member name="M:Northwoods.Go.GoObject.CanReshape">
            <summary>
            Called to see if the user can reshape this object.
            </summary>
            <remarks>
            This returns true if <c>Reshapable</c>, and, if this object is
            in a layer, if <c>Layer.CanReshapeObjects</c>.
            This object's parent need not be reshapable for this
            object to be reshapable.
            This predicate is used by <see cref="T:Northwoods.Go.GoToolResizing"/>.
            </remarks>
            <seealso cref="P:Northwoods.Go.GoObject.Reshapable"/>
            <seealso cref="M:Northwoods.Go.GoLayer.CanReshapeObjects"/>
        </member>
        <member name="M:Northwoods.Go.GoObject.CanDelete">
            <summary>
            Called to see if the user can delete this object.
            </summary>
            <remarks>
            This returns true if <c>Deletable</c>, and, if this object is
            in a layer, if <c>Layer.CanDeleteObjects</c>.
            This object's parent need not be deletable for this
            object to be deletable.
            This predicate is used by methods such as <see cref="M:Northwoods.Go.GoView.DeleteSelection(Northwoods.Go.GoSelection)"/>.
            </remarks>
            <seealso cref="P:Northwoods.Go.GoObject.Deletable"/>
            <seealso cref="M:Northwoods.Go.GoLayer.CanDeleteObjects"/>
        </member>
        <member name="M:Northwoods.Go.GoObject.CanEdit">
            <summary>
            Called to see if the user can edit this object.
            </summary>
            <remarks>
            This returns true if <c>Editable</c>, and, if this object is
            in a layer, if <c>Layer.CanEditObjects</c>.
            This object's parent need not be editable for this
            object to be editable.
            This predicate is used by methods such as <see cref="M:Northwoods.Go.GoText.OnSingleClick(Northwoods.Go.GoInputEventArgs,Northwoods.Go.GoView)"/>.
            </remarks>
            <seealso cref="P:Northwoods.Go.GoObject.Editable"/>
            <seealso cref="M:Northwoods.Go.GoLayer.CanEditObjects"/>
        </member>
        <member name="M:Northwoods.Go.GoObject.Changing(System.Int32)">
            <summary>
            Notify this object's document or view that some part of this object's
            state is about to be changed.
            </summary>
            <param name="subhint"></param>
            <remarks>
            Normally this method is only called for the benefit of the
            <see cref="T:Northwoods.Go.GoUndoManager"/> to record larger or more complex state
            before a change than can easily or efficiently be passed as the
            "old" or "previous" value in a call to <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/>.
            This method does nothing if <see cref="P:Northwoods.Go.GoObject.SuspendsUpdates"/> is true.
            If you intend to turn on <see cref="P:Northwoods.Go.GoObject.SuspendsUpdates"/> for a while,
            to reduce the overhead of repeated notifications,
            you probably should call this method first and make sure the
            <see cref="M:Northwoods.Go.GoObject.CopyOldValueForUndo(Northwoods.Go.GoChangedEventArgs)"/> and <see cref="M:Northwoods.Go.GoObject.CopyNewValueForRedo(Northwoods.Go.GoChangedEventArgs)"/>
            methods can remember all of the relevant state before the unrecorded
            changes occur.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)">
            <summary>
            Notify this object's document or view that some part of this object's
            state has been changed.
            </summary>
            <param name="subhint"></param>
            <param name="oldI">
            An <c>integer</c> value.
            </param>
            <param name="oldVal">
            An <c>Object</c> value.
            </param>
            <param name="oldRect">
            A <c>RectangleF</c> value, also useful for <c>PointF</c>, <c>SizeF</c>, and <c>float</c> values.
            </param>
            <param name="newI">
            An <c>integer</c> value.
            </param>
            <param name="newVal">
            An <c>Object</c> value.
            </param>
            <param name="newRect">
            A <c>RectangleF</c> value, also useful for <c>PointF</c>, <c>SizeF</c>, and <c>float</c> values.
            </param>
            <remarks>
            <para>
            Any override of this method and any methods that this calls should not
            further modify this object, either directly or indirectly.
            </para>
            <para>
            Each of your property setters should call this method after actually
            changing the object's state.
            You should only call this method if the property's value actually changed.
            You should use the <paramref name="oldI"/>, <paramref name="oldVal"/>,
            and/or <paramref name="oldRect"/> parameters for passing the previous old
            property value.
            You should use the <paramref name="newI"/>, <paramref name="newVal"/>,
            and/or <paramref name="newRect"/> parameters for passing the new
            property value.
            The old and new values can be used by <see cref="E:Northwoods.Go.GoDocument.Changed"/>
            event handlers to update their state.
            A special case of such event handlers is the <see cref="T:Northwoods.Go.GoUndoManager"/>,
            which records the old and new values so that it can perform undo and redo
            operations.
            </para>
            <para>
            If <see cref="P:Northwoods.Go.GoObject.SuspendsUpdates"/> is true (it is normally false of course),
            this method does nothing.  Your override of this method should check for
            <see cref="P:Northwoods.Go.GoObject.SuspendsUpdates"/> before invoking any updating functionality.
            If this object is part of a layer, it calls
            <see cref="M:Northwoods.Go.IGoLayerCollectionContainer.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/>
            with a hint of <see cref="F:Northwoods.Go.GoLayer.ChangedObject"/>.
            If there are any observers watching changes to this object,
            this method calls <see cref="M:Northwoods.Go.GoObject.OnObservedChanged(Northwoods.Go.GoObject,System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> on each of this object's
            observers.
            </para>
            <para>
            A number of subhints are pre-defined:
            <list type="table">
            <listheader><term><see cref="T:Northwoods.Go.GoObject"/></term></listheader>
            <item> <term><see cref="F:Northwoods.Go.GoObject.RepaintAll"/></term> <term>1000</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoObject.ChangedBounds"/></term> <term>1001</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoObject.ChangedVisible"/></term> <term>1003</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoObject.ChangedSelectable"/></term> <term>1004</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoObject.ChangedMovable"/></term> <term>1005</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoObject.ChangedCopyable"/></term> <term>1006</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoObject.ChangedResizable"/></term> <term>1007</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoObject.ChangedReshapable"/></term> <term>1008</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoObject.ChangedDeletable"/></term> <term>1009</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoObject.ChangedEditable"/></term> <term>1010</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoObject.ChangedAutoRescales"/></term> <term>1011</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoObject.ChangedResizeRealtime"/></term> <term>1012</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoObject.ChangedShadowed"/></term> <term>1013</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoObject.ChangedAddedObserver"/></term> <term>1014</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoObject.ChangedRemovedObserver"/></term> <term>1015</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoObject.ChangedDragsNode"/></term> <term>1016</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoObject.ChangedPrintable"/></term> <term>1017</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoObject.LastChangedHint"/></term> <term>10000</term> </item>
            </list>
            <list type="table">
            <listheader><term><see cref="T:Northwoods.Go.GoGroup"/></term></listheader>
            <item> <term><see cref="F:Northwoods.Go.GoGroup.InsertedObject"/></term> <term>1051</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoGroup.RemovedObject"/></term> <term>1052</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoGroup.ChangedZOrder"/></term> <term>1053</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoGroup.ReplacedObject"/></term> <term>1054</term> </item>
            </list>
            <list type="table">
            <listheader><term><see cref="T:Northwoods.Go.GoShape"/></term></listheader>
            <item> <term><see cref="F:Northwoods.Go.GoShape.ChangedPen"/></term> <term>1101</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoShape.ChangedBrush"/></term> <term>1102</term> </item>
            </list>
            <list type="table">
            <listheader><term><see cref="T:Northwoods.Go.GoStroke"/></term></listheader>
            <item> <term><see cref="F:Northwoods.Go.GoStroke.ChangedAddPoint"/></term> <term>1201</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoStroke.ChangedRemovePoint"/></term> <term>1202</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoStroke.ChangedModifiedPoint"/></term> <term>1203</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoStroke.ChangedAllPoints"/></term> <term>1204</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoStroke.ChangedStyle"/></term> <term>1205</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoStroke.ChangedCurviness"/></term> <term>1206</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoStroke.ChangedHighlightPen"/></term> <term>1236</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoStroke.ChangedHighlight"/></term> <term>1237</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoStroke.ChangedHighlightWhenSelected"/></term> <term>1238</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoStroke.ChangedToArrowHead"/></term> <term>1250</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoStroke.ChangedToArrowLength"/></term> <term>1251</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoStroke.ChangedToArrowShaftLength"/></term> <term>1252</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoStroke.ChangedToArrowWidth"/></term> <term>1253</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoStroke.ChangedToArrowFilled"/></term> <term>1254</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoStroke.ChangedToArrowStyle"/></term> <term>1255</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoStroke.ChangedFromArrowHead"/></term> <term>1260</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoStroke.ChangedFromArrowLength"/></term> <term>1261</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoStroke.ChangedFromArrowShaftLength"/></term> <term>1262</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoStroke.ChangedFromArrowWidth"/></term> <term>1263</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoStroke.ChangedFromArrowFilled"/></term> <term>1264</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoStroke.ChangedFromArrowStyle"/></term> <term>1265</term> </item>
            </list>
            <list type="table">
            <listheader><term><see cref="T:Northwoods.Go.GoLink"/></term></listheader>
            <item> <term><see cref="F:Northwoods.Go.GoLink.ChangedLinkUserFlags"/></term> <term>1300</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoLink.ChangedLinkUserObject"/></term> <term>1301</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoLink.ChangedFromPort"/></term> <term>1302</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoLink.ChangedToPort"/></term> <term>1303</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoLink.ChangedOrthogonal"/></term> <term>1304</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoLink.ChangedRelinkable"/></term> <term>1305</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoLink.ChangedAbstractLink"/></term> <term>1306</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoLink.ChangedAvoidsNodes"/></term> <term>1307</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoLink.ChangedPartID"/></term> <term>1309</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoLink.ChangedAdjustingStyle"/></term> <term>1310</term> </item>
            </list>
            <list type="table">
            <listheader><term><see cref="T:Northwoods.Go.GoLabeledLink"/></term></listheader>
            <item> <term><see cref="F:Northwoods.Go.GoLabeledLink.ChangedLink"/></term> <term>1311</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoLabeledLink.ChangedFromLabel"/></term> <term>1312</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoLabeledLink.ChangedMidLabel"/></term> <term>1313</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoLabeledLink.ChangedToLabel"/></term> <term>1314</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoLabeledLink.ChangedFromLabelCentered"/></term> <term>1315</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoLabeledLink.ChangedMidLabelCentered"/></term> <term>1316</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoLabeledLink.ChangedToLabelCentered"/></term> <term>1317</term> </item>
            </list>
            <list type="table">
            <listheader><term><see cref="T:Northwoods.Go.GoPolygon"/></term></listheader>
            <item> <term><see cref="F:Northwoods.Go.GoPolygon.ChangedAddPoint"/></term> <term>1401</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoPolygon.ChangedRemovePoint"/></term> <term>1402</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoPolygon.ChangedModifiedPoint"/></term> <term>1403</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoPolygon.ChangedAllPoints"/></term> <term>1412</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoPolygon.ChangedStyle"/></term> <term>1414</term> </item>
            </list>
            <list type="table">
            <listheader><term><see cref="T:Northwoods.Go.GoTriangle"/></term></listheader>
            <item> <term><see cref="F:Northwoods.Go.GoTriangle.ChangedPointA"/></term> <term>1431</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoTriangle.ChangedPointB"/></term> <term>1432</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoTriangle.ChangedPointC"/></term> <term>1433</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoTriangle.ChangedAllPoints"/></term> <term>1434</term> </item>
            </list>
            <list type="table">
            <listheader><term><see cref="T:Northwoods.Go.GoRoundedRectangle"/></term></listheader>
            <item> <term><see cref="F:Northwoods.Go.GoRoundedRectangle.ChangedCorner"/></term> <term>1441</term> </item>
            </list>
            <list type="table">
            <listheader><term><see cref="T:Northwoods.Go.GoHexagon"/></term></listheader>
            <item> <term><see cref="F:Northwoods.Go.GoHexagon.ChangedDistanceLeft"/></term> <term>1442</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoHexagon.ChangedDistanceRight"/></term> <term>1443</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoHexagon.ChangedDistanceTop"/></term> <term>1444</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoHexagon.ChangedDistanceBottom"/></term> <term>1445</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoHexagon.ChangedOrientation"/></term> <term>1446</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoHexagon.ChangedReshapeBehavior"/></term> <term>1447</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoHexagon.ChangedReshapableCorner"/></term> <term>1448</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoHexagon.ChangedKeepsLengthwiseSymmetry"/></term> <term>1449</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoHexagon.ChangedKeepsCrosswiseSymmetry"/></term> <term>1450</term> </item>
            </list>
            <list type="table">
            <listheader><term><see cref="T:Northwoods.Go.GoPie"/></term></listheader>
            <item> <term><see cref="F:Northwoods.Go.GoPie.ChangedStartAngle"/></term> <term>1451</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoPie.ChangedSweepAngle"/></term> <term>1452</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoPie.ChangedResizableStartAngle"/></term> <term>1453</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoPie.ChangedResizableEndAngle"/></term> <term>1454</term> </item>
            </list>
            <list type="table">
            <listheader><term><see cref="T:Northwoods.Go.GoCylinder"/></term></listheader>
            <item> <term><see cref="F:Northwoods.Go.GoCylinder.ChangedMinorRadius"/></term> <term>1453</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoCylinder.ChangedOrientation"/></term> <term>1454</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoCylinder.ChangedPerspective"/></term> <term>1455</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoCylinder.ChangedResizableRadius"/></term> <term>1456</term> </item>
            </list>
            <list type="table">
            <listheader><term><see cref="T:Northwoods.Go.GoCube"/></term></listheader>
            <item> <term><see cref="F:Northwoods.Go.GoCube.ChangedDepth"/></term> <term>1457</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoCube.ChangedPerspective"/></term> <term>1458</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoCube.ChangedReshapableDepth"/></term> <term>1459</term> </item>
            </list>
            <list type="table">
            <listheader><term><see cref="T:Northwoods.Go.GoTrapezoid"/></term></listheader>
            <item> <term><see cref="F:Northwoods.Go.GoTrapezoid.ChangedPointA"/></term> <term>1460</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoTrapezoid.ChangedPointB"/></term> <term>1461</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoTrapezoid.ChangedPointC"/></term> <term>1462</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoTrapezoid.ChangedPointD"/></term> <term>1463</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoTrapezoid.ChangedMultiplePoints"/></term> <term>1464</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoTrapezoid.ChangedOrientation"/></term> <term>1465</term> </item>
            </list>
            <list type="table">
            <listheader><term><see cref="T:Northwoods.Go.GoParallelogram"/></term></listheader>
            <item> <term><see cref="F:Northwoods.Go.GoParallelogram.ChangedSkew"/></term> <term>1466</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoParallelogram.ChangedReshapableSkew"/></term> <term>1467</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoParallelogram.ChangedDirection"/></term> <term>1468</term> </item>
            </list>
            <list type="table">
            <listheader><term><see cref="T:Northwoods.Go.GoOctagon"/></term></listheader>
            <item> <term><see cref="F:Northwoods.Go.GoOctagon.ChangedCorner"/></term> <term>1469</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoOctagon.ChangedReshapableCorner"/></term> <term>1470</term> </item>
            </list>
            <list type="table">
            <listheader><term><see cref="T:Northwoods.Go.GoText"/></term></listheader>
            <item> <term><see cref="F:Northwoods.Go.GoText.ChangedText"/></term> <term>1501</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoText.ChangedFamilyName"/></term> <term>1502</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoText.ChangedFontSize"/></term> <term>1503</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoText.ChangedAlignment"/></term> <term>1504</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoText.ChangedTextColor"/></term> <term>1505</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoText.ChangedBackgroundColor"/></term> <term>1506</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoText.ChangedTransparentBackground"/></term> <term>1507</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoText.ChangedBold"/></term> <term>1508</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoText.ChangedItalic"/></term> <term>1509</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoText.ChangedUnderline"/></term> <term>1510</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoText.ChangedStrikeThrough"/></term> <term>1511</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoText.ChangedMultiline"/></term> <term>1512</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoText.ChangedBackgroundOpaqueWhenSelected"/></term> <term>1515</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoText.ChangedClipping"/></term> <term>1516</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoText.ChangedAutoResizes"/></term> <term>1518</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoText.ChangedWrapping"/></term> <term>1520</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoText.ChangedWrappingWidth"/></term> <term>1521</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoText.ChangedGdiCharSet"/></term> <term>1522</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoText.ChangedEditorStyle"/></term> <term>1523</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoText.ChangedMinimum"/></term> <term>1524</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoText.ChangedMaximum"/></term> <term>1525</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoText.ChangedDropDownList"/></term> <term>1526</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoText.ChangedChoices"/></term> <term>1527</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoText.ChangedRightToLeft"/></term> <term>1528</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoText.ChangedRightToLeftFromView"/></term> <term>1529</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoText.ChangedBordered"/></term> <term>1530</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoText.ChangedStringTrimming"/></term> <term>1531</term> </item>
            </list>
            <list type="table">
            <listheader><term><see cref="T:Northwoods.Go.GoImage"/></term></listheader>
            <item> <term><see cref="F:Northwoods.Go.GoImage.ChangedImage"/></term> <term>1601</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoImage.ChangedResourceManager"/></term> <term>1602</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoImage.ChangedName"/></term> <term>1603</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoImage.ChangedAlignment"/></term> <term>1604</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoImage.ChangedAutoResizes"/></term> <term>1605</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoImage.ChangedImageList"/></term> <term>1606</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoImage.ChangedIndex"/></term> <term>1607</term> </item>
            </list>
            <list type="table">
            <listheader><term><see cref="T:Northwoods.Go.GoPort"/></term></listheader>
            <item> <term><see cref="F:Northwoods.Go.GoPort.ChangedPortUserFlags"/></term> <term>1700</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoPort.ChangedPortUserObject"/></term> <term>1701</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoPort.ChangedStyle"/></term> <term>1702</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoPort.ChangedObject"/></term> <term>1703</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoPort.ChangedValidFrom"/></term> <term>1704</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoPort.ChangedValidTo"/></term> <term>1705</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoPort.ChangedValidSelfNode"/></term> <term>1706</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoPort.ChangedFromSpot"/></term> <term>1707</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoPort.ChangedToSpot"/></term> <term>1708</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoPort.ChangedAddedLink"/></term> <term>1709</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoPort.ChangedRemovedLink"/></term> <term>1710</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoPort.ChangedValidDuplicateLinks"/></term> <term>1711</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoPort.ChangedEndSegmentLength"/></term> <term>1712</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoPort.ChangedPartID"/></term> <term>1713</term> </item>
            </list>
            <list type="table">
            <listheader><term><see cref="T:Northwoods.Go.GoControl"/></term></listheader>
            <item> <term><see cref="F:Northwoods.Go.GoControl.ChangedControlType"/></term> <term>1901</term> </item>
            </list>
            <list type="table">
            <listheader><term><see cref="T:Northwoods.Go.GoNode"/></term></listheader>
            <item> <term><see cref="F:Northwoods.Go.GoNode.ChangedNodeUserFlags"/></term> <term>2000</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoNode.ChangedNodeUserObject"/></term> <term>2001</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoNode.ChangedToolTipText"/></term> <term>2002</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoNode.ChangedPartID"/></term> <term>2004</term> </item>
            </list>
            <list type="table">
            <listheader><term><see cref="T:Northwoods.Go.GoNodeIcon"/></term></listheader>
            <item> <term><see cref="F:Northwoods.Go.GoNodeIcon.ChangedMinimumIconSize"/></term> <term>2050</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoNodeIcon.ChangedMaximumIconSize"/></term> <term>2051</term> </item>
            </list>
            <list type="table">
            <listheader><term><see cref="T:Northwoods.Go.GoBasicNode"/></term></listheader>
            <item> <term><see cref="F:Northwoods.Go.GoBasicNode.ChangedLabelSpot"/></term> <term>2101</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoBasicNode.ChangedShape"/></term> <term>2102</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoBasicNode.ChangedLabel"/></term> <term>2103</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoBasicNode.ChangedPort"/></term> <term>2104</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoBasicNode.ChangedMiddleLabelMargin"/></term> <term>2105</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoBasicNode.ChangedAutoResizes"/></term> <term>2106</term> </item>
            </list>
            <list type="table">
            <listheader><term><see cref="T:Northwoods.Go.GoBoxNode"/></term></listheader>
            <item> <term><see cref="F:Northwoods.Go.GoBoxNode.ChangedBody"/></term> <term>2201</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoBoxNode.ChangedPortBorderMargin"/></term> <term>2202</term> </item>
            </list>
            <list type="table">
            <listheader><term><see cref="T:Northwoods.Go.GoBoxPort"/></term></listheader>
            <item> <term><see cref="F:Northwoods.Go.GoBoxPort.ChangedLinkPointsSpread"/></term> <term>2211</term> </item>
            </list>
            <list type="table">
            <listheader><term><see cref="T:Northwoods.Go.GoComment"/></term></listheader>
            <item> <term><see cref="F:Northwoods.Go.GoComment.ChangedTopLeftMargin"/></term> <term>2301</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoComment.ChangedBottomRightMargin"/></term> <term>2302</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoComment.ChangedPartID"/></term> <term>2303</term> </item>
            </list>
            <list type="table">
            <listheader><term><see cref="T:Northwoods.Go.GoBalloon"/></term></listheader>
            <item> <term><see cref="F:Northwoods.Go.GoBalloon.ChangedAnchor"/></term> <term>2310</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoBalloon.ChangedBaseWidth"/></term> <term>2312</term> </item>
            </list>
            <list type="table">
            <listheader><term><see cref="T:Northwoods.Go.GoGeneralNode"/></term></listheader>
            <item> <term><see cref="F:Northwoods.Go.GoGeneralNode.InsertedPort"/></term> <term>2401</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoGeneralNode.RemovedPort"/></term> <term>2402</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoGeneralNode.ReplacedPort"/></term> <term>2403</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoGeneralNode.ChangedTopLabel"/></term> <term>2404</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoGeneralNode.ChangedBottomLabel"/></term> <term>2405</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoGeneralNode.ChangedIcon"/></term> <term>2406</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoGeneralNode.ChangedOrientation"/></term> <term>2407</term> </item>
            </list>
            <list type="table">
            <listheader><term><see cref="T:Northwoods.Go.GoGeneralNodePort"/></term></listheader>
            <item> <term><see cref="F:Northwoods.Go.GoGeneralNodePort.ChangedName"/></term> <term>2430</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoGeneralNodePort.ChangedLabel"/></term> <term>2431</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoGeneralNodePort.ChangedSideIndex"/></term> <term>2432</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoGeneralNodePort.ChangedLeftSide"/></term> <term>2433</term> </item>
            </list>
            <list type="table">
            <listheader><term><see cref="T:Northwoods.Go.GoListGroup"/></term></listheader>
            <item> <term><see cref="F:Northwoods.Go.GoListGroup.ChangedSpacing"/></term> <term>2501</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoListGroup.ChangedAlignment"/></term> <term>2502</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoListGroup.ChangedLinePen"/></term> <term>2503</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoListGroup.ChangedBorderPen"/></term> <term>2504</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoListGroup.ChangedBrush"/></term> <term>2505</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoListGroup.ChangedCorner"/></term> <term>2506</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoListGroup.ChangedTopLeftMargin"/></term> <term>2507</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoListGroup.ChangedBottomRightMargin"/></term> <term>2508</term> </item>
            </list>
            <list type="table">
            <listheader><term><see cref="T:Northwoods.Go.GoSimpleNode"/></term></listheader>
            <item> <term><see cref="F:Northwoods.Go.GoSimpleNode.ChangedText"/></term> <term>2601</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoSimpleNode.ChangedIcon"/></term> <term>2602</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoSimpleNode.ChangedLabel"/></term> <term>2603</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoSimpleNode.ChangedInPort"/></term> <term>2604</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoSimpleNode.ChangedOutPort"/></term> <term>2605</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoSimpleNode.ChangedOrientation"/></term> <term>2606</term> </item>
            </list>
            <list type="table">
            <listheader><term><see cref="T:Northwoods.Go.GoIconicNode"/></term></listheader>
            <item> <term><see cref="F:Northwoods.Go.GoIconicNode.ChangedDraggableLabel"/></term> <term>2651</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoIconicNode.ChangedIcon"/></term> <term>2652</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoIconicNode.ChangedLabel"/></term> <term>2653</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoIconicNode.ChangedPort"/></term> <term>2654</term> </item>
            </list>
            <list type="table">
            <listheader><term><see cref="T:Northwoods.Go.GoSubGraph"/></term></listheader>
            <item> <term><see cref="F:Northwoods.Go.GoSubGraph.ChangedExpanded"/></term> <term>2701</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoSubGraph.ChangedLabel"/></term> <term>2702</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoSubGraph.ChangedCollapsible"/></term> <term>2703</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoSubGraph.ChangedBackgroundColor"/></term> <term>2704</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoSubGraph.ChangedOpacity"/></term> <term>2705</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoSubGraph.ChangedLabelSpot"/></term> <term>2706</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoSubGraph.ChangedMargin"/></term> <term>2707</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoSubGraph.ChangedBorderPen"/></term> <term>2708</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoSubGraph.ChangedPickableBackground"/></term> <term>2709</term> </item>
            </list>
            <list type="table">
            <listheader><term><see cref="T:Northwoods.Go.GoTextNode"/></term></listheader>
            <item> <term><see cref="F:Northwoods.Go.GoTextNode.ChangedLabel"/></term> <term>2801</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoTextNode.ChangedBackground"/></term> <term>2802</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoTextNode.ChangedTopPort"/></term> <term>2803</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoTextNode.ChangedRightPort"/></term> <term>2804</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoTextNode.ChangedBottomPort"/></term> <term>2805</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoTextNode.ChangedLeftPort"/></term> <term>2806</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoTextNode.ChangedTopLeftMargin"/></term> <term>2807</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoTextNode.ChangedBottomRightMargin"/></term> <term>2808</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoTextNode.ChangedAutoResizes"/></term> <term>2809</term> </item>
            </list>
            <list type="table">
            <listheader><term><see cref="T:Northwoods.Go.GoButton"/></term></listheader>
            <item> <term><see cref="F:Northwoods.Go.GoButton.ChangedBackground"/></term> <term>2901</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoButton.ChangedIcon"/></term> <term>2902</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoButton.ChangedLabel"/></term> <term>2903</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoButton.ChangedTopLeftMargin"/></term> <term>2904</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoButton.ChangedBottomRightMargin"/></term> <term>2905</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoButton.ChangedActionEnabled"/></term> <term>2906</term> </item>
            </list>
            <list type="table">
            <listheader><term><see cref="T:Northwoods.Go.GoMultiTextNode"/></term></listheader>
            <item> <term><see cref="F:Northwoods.Go.GoMultiTextNode.InsertedLeftPort"/></term> <term>3001</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoMultiTextNode.InsertedRightPort"/></term> <term>3002</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoMultiTextNode.RemovedLeftPort"/></term> <term>3003</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoMultiTextNode.RemovedRightPort"/></term> <term>3004</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoMultiTextNode.ReplacedPort"/></term> <term>3005</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoMultiTextNode.ChangedTopPort"/></term> <term>3006</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoMultiTextNode.ChangedBottomPort"/></term> <term>3007</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoMultiTextNode.ChangedItemWidth"/></term> <term>3008</term> </item>
            </list>
            Please note that this list may not be complete--in fact you are encouraged to
            add new subhints for your own properties and other changes.
            </para>
            </remarks>
            <seealso cref="M:Northwoods.Go.GoObject.AddObserver(Northwoods.Go.GoObject)"/>
            <seealso cref="M:Northwoods.Go.GoObject.RemoveObserver(Northwoods.Go.GoObject)"/>
        </member>
        <member name="M:Northwoods.Go.GoObject.InvalidateViews">
            <summary>
            Cause all views to repaint this object when they get a chance.
            </summary>
            <remarks>
            This calls <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> with a <see cref="F:Northwoods.Go.GoObject.RepaintAll"/> subhint.
            You will only need to call this if you have overridden <see cref="M:Northwoods.Go.GoObject.Paint(System.Drawing.Graphics,Northwoods.Go.GoView)"/>
            and the area that you paint extends beyond the regular <see cref="P:Northwoods.Go.GoObject.Bounds"/>.
            The primary usage is before making any change that affects only the paint bounds,
            as determined by <see cref="M:Northwoods.Go.GoObject.ExpandPaintBounds(System.Drawing.RectangleF,Northwoods.Go.GoView)"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoObject.OnLayerChanged(Northwoods.Go.GoLayer,Northwoods.Go.GoLayer,Northwoods.Go.GoObject)">
            <summary>
            Called when this object's layer is changed.
            </summary>
            <param name="oldlayer">
            This <see cref="T:Northwoods.Go.GoLayer"/> value is the old value of <see cref="P:Northwoods.Go.GoObject.Layer"/>.
            The value will be null if the object did not belong to a layer but
            is being added to one.
            </param>
            <param name="newlayer">
            This <see cref="T:Northwoods.Go.GoLayer"/> value is the new value of <see cref="P:Northwoods.Go.GoObject.Layer"/>.
            The value will be null if the object is being removed from a layer.
            </param>
            <param name="mainObj">
            This is the object that is being inserted or removed from a layer.
            </param>
            <remarks>
            When this object is being removed from its layer, this method is
            called before the actual value of <see cref="P:Northwoods.Go.GoObject.Layer"/> is set to null.
            Otherwise this method is called after the layer has been changed.
            Both <paramref name="oldlayer"/> and <paramref name="newlayer"/>
            can be non-null when the object is being moved from one layer to another.
            By default this method does nothing.
            Any implementation of this method should not cause a change in layers.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoObject.OnParentChanged(Northwoods.Go.GoGroup,Northwoods.Go.GoGroup)">
            <summary>
            Called when this object's parent is changed.
            </summary>
            <param name="oldgroup">
            This <see cref="T:Northwoods.Go.GoGroup"/> value is the old value of <see cref="P:Northwoods.Go.GoObject.Parent"/>.
            The value will be null if the object did not belong to a group but
            is being added to one.
            </param>
            <param name="newgroup">
            This <see cref="T:Northwoods.Go.GoGroup"/> value is the new value of <see cref="P:Northwoods.Go.GoObject.Parent"/>.
            The value will be null if the object is being removed from a group.
            </param>
            <remarks>
            When this object is being removed from its group, this method is
            called before the actual value of <see cref="P:Northwoods.Go.GoObject.Parent"/> is set to null.
            Otherwise this method is called after the parent has been changed.
            When this object is being removed from its group, its <see cref="P:Northwoods.Go.GoObject.Layer"/>
            will be set to null too.
            When this object is being added to a group, its <see cref="P:Northwoods.Go.GoObject.Layer"/>
            property will be set to be the same as its new parent's layer.
            By default this method does nothing.
            Any implementation of this method should not cause a change in parents
            or layers.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoObject.OnBoundsChanged(System.Drawing.RectangleF)">
            <summary>
            Called after this object's bounds has changed.
            </summary>
            <param name="old">
            A <c>RectangleF</c> in document coordinates holding the previous bounds.
            </param>
            <remarks>
            By default this method does nothing.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoGroup.OnBoundsChanged(System.Drawing.RectangleF)"/>
            <seealso cref="M:Northwoods.Go.GoGroup.OnChildBoundsChanged(Northwoods.Go.GoObject,System.Drawing.RectangleF)"/>
        </member>
        <member name="M:Northwoods.Go.GoObject.OnObservedChanged(Northwoods.Go.GoObject,System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)">
            <summary>
            Called when an observed object has been changed.
            </summary>
            <param name="observed">
            The modified object being observed by this object.
            </param>
            <param name="subhint">The same as for the <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> method.</param>
            <param name="oldI">The same as for the <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> method.</param>
            <param name="oldVal">The same as for the <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> method.</param>
            <param name="oldRect">The same as for the <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> method.</param>
            <param name="newI">The same as for the <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> method.</param>
            <param name="newVal">The same as for the <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> method.</param>
            <param name="newRect">The same as for the <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> method.</param>
            <remarks>
            <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> calls this method on each of the
            observing objects that were registered with the observed object
            by a call to <see cref="M:Northwoods.Go.GoObject.AddObserver(Northwoods.Go.GoObject)"/>.
            If the observed's <see cref="P:Northwoods.Go.GoObject.SuspendsUpdates"/> property is true,
            this method will not be called on its observers.
            By default this method does nothing.
            Any implementation of this method should be very careful about causing any
            changes to the observed object.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoGroup.OnChildBoundsChanged(Northwoods.Go.GoObject,System.Drawing.RectangleF)"/>
        </member>
        <member name="M:Northwoods.Go.GoObject.AddObserver(Northwoods.Go.GoObject)">
            <summary>
            Register an object as an observer of changes to this object.
            </summary>
            <param name="obj"></param>
            <remarks>
            Adding an observer object means that that observer's <see cref="M:Northwoods.Go.GoObject.OnObservedChanged(Northwoods.Go.GoObject,System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/>
            method will be called whenever this object is changed.
            If the <paramref name="obj"/> is already an observer for this object,
            this call does nothing.
            <see cref="M:Northwoods.Go.GoObject.CopyObject(Northwoods.Go.GoCopyDictionary)"/> will not copy the list of observers for this object;
            the caller of <see cref="M:Northwoods.Go.GoObject.CopyObject(Northwoods.Go.GoCopyDictionary)"/> is responsible for doing so, just as with
            adding the copied object to a layer and/or group to update the <see cref="P:Northwoods.Go.GoObject.Layer"/>
            and <see cref="P:Northwoods.Go.GoObject.Parent"/> properties.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoObject.RemoveObserver(Northwoods.Go.GoObject)"/>
        </member>
        <member name="M:Northwoods.Go.GoObject.RemoveObserver(Northwoods.Go.GoObject)">
            <summary>
            Make sure an object is not an observer of changes to this object.
            </summary>
            <param name="obj"></param>
            <seealso cref="M:Northwoods.Go.GoObject.AddObserver(Northwoods.Go.GoObject)"/>
            <seealso cref="M:Northwoods.Go.GoObject.OnObservedChanged(Northwoods.Go.GoObject,System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/>
        </member>
        <member name="M:Northwoods.Go.GoObject.Paint(System.Drawing.Graphics,Northwoods.Go.GoView)">
            <summary>
            Render this object to a Graphics object.
            </summary>
            <param name="g">
            The <c>Graphics</c> object with which to draw.
            </param>
            <param name="view">
            The <see cref="T:Northwoods.Go.GoView"/> provides additional context for this painting
            operation.
            </param>
            <remarks>
            This method may get called frequently and should not modify any object or view state.
            The default implementation paints nothing.
            Each derived class should override this method.
            The <paramref name="view"/> parameter is useful for customizing
            the drawing behavior based on the kind of view to which we are drawing.
            For example, the <see cref="P:Northwoods.Go.GoView.ShadowOffset"/> property specifies 
            the size of the drop shadow painted by objects whose <see cref="P:Northwoods.Go.GoObject.Shadowed"/>
            property is true.
            If you override this method, you may also need to override <see cref="M:Northwoods.Go.GoObject.ExpandPaintBounds(System.Drawing.RectangleF,Northwoods.Go.GoView)"/>,
            and perhaps the other geometry methods, including <see cref="M:Northwoods.Go.GoObject.ComputeBounds"/>,
            <see cref="M:Northwoods.Go.GoObject.ContainsPoint(Northwoods.Go.PointF)"/>, <see cref="M:Northwoods.Go.GoObject.ContainedByRectangle(System.Drawing.RectangleF)"/>,
            <see cref="M:Northwoods.Go.GoObject.GetNearestIntersectionPoint(Northwoods.Go.PointF,Northwoods.Go.PointF,Northwoods.Go.PointF@)"/>,
            and other methods such as <see cref="M:Northwoods.Go.GoObject.AddSelectionHandles(Northwoods.Go.GoSelection,Northwoods.Go.GoObject)"/> and <see cref="M:Northwoods.Go.GoObject.DoResize(Northwoods.Go.GoView,System.Drawing.RectangleF,Northwoods.Go.PointF,System.Int32,Northwoods.Go.GoInputState,System.Drawing.SizeF,System.Drawing.SizeF)"/>.
            Furthermore, in the implementation of a property setter that causes the paint bounds
            to change, you will need to call <see cref="M:Northwoods.Go.GoObject.InvalidateViews"/> before actually
            changing your object's state, so that views will get a chance to notice the
            paint bounds before it changes.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoObject.ExpandPaintBounds(System.Drawing.RectangleF,Northwoods.Go.GoView)">
            <summary>
            Expand a bounding rectangle to better represent where
            this object is painted.
            </summary>
            <param name="rect">
            A <c>RectangleF</c> in document coordinates.
            </param>
            <param name="view">
            The view in which the object is being painted.
            This may be null, if the particular view is not known.
            </param>
            <returns>
            A <c>RectangleF</c> in document coordinates that may be slightly
            larger than the <paramref name="rect"/> argument, to account for
            where this object may be painted.
            </returns>
            <remarks>
            The <see cref="P:Northwoods.Go.GoObject.Bounds"/> property provides the abstract position and
            size of an object.  However, the actual painted area is often somewhat
            larger, because of the thickness of a <c>Pen</c> or because of a
            shadow.
            The default behavior of this method is just to return the
            <paramref name="rect"/> value.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoObject.ContainsPoint(Northwoods.Go.PointF)">
            <summary>
            Determine if a given point is inside and on this object.
            </summary>
            <param name="p">
            A <c>PointF</c> in document coordinates.
            </param>
            <returns>
            True if the argument <paramref name="p"/> is considered to be "in"
            this object.
            </returns>
            <remarks>
            This method tries to return true for points near a stroke or near or
            inside a possibly filled object such as an ellipse or a polygon.
            This method ignores any drop shadow, but normally includes the
            width of any <c>Pen</c>.
            The default behavior of this method is to return true if the
            point <paramref name="p"/> is within this object's <see cref="P:Northwoods.Go.GoObject.Bounds"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoObject.ContainedByRectangle(System.Drawing.RectangleF)">
            <summary>
            Determine if a given rectangle completely encloses this object.
            </summary>
            <param name="r">
            a <c>RectangleF</c> in document coordinates.
            </param>
            <returns>
            True if this object is considered to be "inside" the rectangle <paramref name="r"/>.
            </returns>
            <remarks>
            The default behavior is to see if this object's <see cref="P:Northwoods.Go.GoObject.Bounds"/> are within
            the rectangle <paramref name="r"/>.
            A zero width and/or height for this object is acceptable; but if either
            <c>c.Width</c> or <c>c.Height</c> are zero or negative, this will return false.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoObject.GetNearestIntersectionPoint(Northwoods.Go.PointF,Northwoods.Go.PointF,Northwoods.Go.PointF@)">
            <summary>
            Find the closest point in this object to a given point that is on a line from that point.
            </summary>
            <param name="p1">
            the point we are looking to be closest to, on the line formed with <paramref name="p2"/>
            </param>
            <param name="p2">
            forms a line with <paramref name="p1"/>
            </param>
            <param name="result">
            the point of this object that is closest to <paramref name="p1"/> and that is on
            the infinite line from <paramref name="p1"/> to <paramref name="p2"/>
            </param>
            <returns>
            true if the infinite line does intersect with this object; false otherwise
            </returns>
        </member>
        <member name="M:Northwoods.Go.GoObject.GetNearestIntersectionPoint(System.Drawing.RectangleF,Northwoods.Go.PointF,Northwoods.Go.PointF,Northwoods.Go.PointF@)">
            <summary>
            Find the closest point of a rectangle to a given point that is on a line from that point.
            </summary>
            <param name="rect"></param>
            <param name="p1">
            the point we are looking to be closest to, on the line formed with <paramref name="p2"/>
            </param>
            <param name="p2">
            forms a line with <paramref name="p1"/>
            </param>
            <param name="result">
            the point of this object that is closest to <paramref name="p1"/> and that is on
            the infinite line from <paramref name="p1"/> to <paramref name="p2"/>
            </param>
            <returns>
            true if the infinite line does intersect with this object; false otherwise
            </returns>
        </member>
        <member name="M:Northwoods.Go.GoObject.Pick(Northwoods.Go.PointF,System.Boolean)">
            <summary>
            Return an object at a point, perhaps only a selectable one.
            </summary>
            <param name="p">
            A <c>PointF</c> in document coordinates.
            </param>
            <param name="selectableOnly">
            Whether the return value must be selectable by the user.
            </param>
            <returns>
            An object under the point <paramref name="p"/>.
            If <paramref name="selectableOnly"/> is true, the object
            returned will have its <see cref="M:Northwoods.Go.GoObject.CanSelect"/> property be true.
            This method returns null if no suitable object is found.
            </returns>
            <remarks>
            This will return null if this object is not visible or if
            the <paramref name="p"/> is not in this object.
            If <paramref name="selectableOnly"/> is false, it will return
            this object; if that parameter is true, it will return this
            object only if <see cref="M:Northwoods.Go.GoObject.CanSelect"/> is true.
            Finally, if <see cref="M:Northwoods.Go.GoObject.CanSelect"/> is false, and this object
            is part of a <see cref="T:Northwoods.Go.GoGroup"/>, it proceeds up the chain
            of <see cref="P:Northwoods.Go.GoObject.Parent"/> objects until it finds one whose
            <see cref="M:Northwoods.Go.GoObject.CanSelect"/> property is true, and returns that.
            Failing all of those tests, this method will return null.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoObject.OnSingleClick(Northwoods.Go.GoInputEventArgs,Northwoods.Go.GoView)">
            <summary>
            Called when the user single clicks on this object.
            </summary>
            <param name="evt"></param>
            <param name="view"></param>
            <returns>
            True to indicate this
            object handled the event and thus that the calling view
            need not continue calling the method up the chain of parents.
            </returns>
            <remarks>
            By default this method does nothing but return false.
            <see cref="M:Northwoods.Go.GoView.DoSingleClick(Northwoods.Go.GoInputEventArgs)"/> is the normal caller,
            which in turn is called by various tools.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoObject.OnDoubleClick(Northwoods.Go.GoInputEventArgs,Northwoods.Go.GoView)"/>
            <seealso cref="M:Northwoods.Go.GoObject.OnContextClick(Northwoods.Go.GoInputEventArgs,Northwoods.Go.GoView)"/>
        </member>
        <member name="M:Northwoods.Go.GoObject.OnDoubleClick(Northwoods.Go.GoInputEventArgs,Northwoods.Go.GoView)">
            <summary>
            Called when the user double clicks on this object.
            </summary>
            <param name="evt"></param>
            <param name="view"></param>
            <returns>
            True to indicate this
            object handled the event and thus that the calling view
            need not continue calling the method up the chain of parents.
            </returns>
            <remarks>
            By default this method does nothing but return false.
            <see cref="M:Northwoods.Go.GoView.DoDoubleClick(Northwoods.Go.GoInputEventArgs)"/> is the normal caller,
            which in turn is called by various tools.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoObject.OnSingleClick(Northwoods.Go.GoInputEventArgs,Northwoods.Go.GoView)"/>
            <seealso cref="M:Northwoods.Go.GoObject.OnContextClick(Northwoods.Go.GoInputEventArgs,Northwoods.Go.GoView)"/>
        </member>
        <member name="M:Northwoods.Go.GoObject.OnContextClick(Northwoods.Go.GoInputEventArgs,Northwoods.Go.GoView)">
            <summary>
            Called when the user context clicks on this object.
            </summary>
            <param name="evt"></param>
            <param name="view"></param>
            <returns>
            True to indicate this
            object handled the event and thus that the calling view
            need not continue calling the method up the chain of parents.
            </returns>
            <remarks>
            By default this method does nothing but return false.
            The context menu click is normally a right mouse click.
            This method is normally invoked by <see cref="M:Northwoods.Go.GoView.DoContextClick(Northwoods.Go.GoInputEventArgs)"/>.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoObject.OnSingleClick(Northwoods.Go.GoInputEventArgs,Northwoods.Go.GoView)"/>
            <seealso cref="M:Northwoods.Go.GoObject.OnDoubleClick(Northwoods.Go.GoInputEventArgs,Northwoods.Go.GoView)"/>
        </member>
        <member name="M:Northwoods.Go.GoObject.GetToolTip(Northwoods.Go.GoView)">
            <summary>
            Called to get a String to display as a tooltip for this object.
            </summary>
            <param name="view"></param>
            <returns>
            A <c>String</c>, or null to indicate no tooltip for this object.
            </returns>
            <remarks>
            By default this method does nothing but return null.
            A non-null <c>String</c> indicates this
            object handled the event and thus that the calling view
            need not continue calling the method up the chain of parents.
            <see cref="M:Northwoods.Go.GoView.DoToolTipObject(Northwoods.Go.GoObject)"/> is the normal caller.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoObject.OnGotSelection(Northwoods.Go.GoSelection)">
            <summary>
            Called when this object becomes selected.
            </summary>
            <param name="sel">
            The <see cref="T:Northwoods.Go.GoSelection"/> of the <see cref="T:Northwoods.Go.GoView"/> in which
            this object has been selected.
            </param>
            <remarks>
            Any implementation of this method should not change which objects are selected.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoObject.OnLostSelection(Northwoods.Go.GoSelection)"/>
            <seealso cref="M:Northwoods.Go.GoObject.AddSelectionHandles(Northwoods.Go.GoSelection,Northwoods.Go.GoObject)"/>
        </member>
        <member name="M:Northwoods.Go.GoObject.OnLostSelection(Northwoods.Go.GoSelection)">
            <summary>
            Called when this object becomes unselected.
            </summary>
            <param name="sel">
            The <see cref="T:Northwoods.Go.GoSelection"/> of the <see cref="T:Northwoods.Go.GoView"/> in which
            this object had been selected.
            </param>
            <remarks>
            Any implementation of this method should not change which objects are selected.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoObject.OnGotSelection(Northwoods.Go.GoSelection)"/>
            <seealso cref="M:Northwoods.Go.GoObject.RemoveSelectionHandles(Northwoods.Go.GoSelection)"/>
        </member>
        <member name="M:Northwoods.Go.GoObject.AddSelectionHandles(Northwoods.Go.GoSelection,Northwoods.Go.GoObject)">
            <summary>
            Add selection handles for this object for the given selection collection.
            </summary>
            <param name="sel"></param>
            <param name="selectedObj"></param>
            <remarks>
            This typically calls <see cref="M:Northwoods.Go.GoSelection.CreateBoundingHandle(Northwoods.Go.GoObject,Northwoods.Go.GoObject)"/> or
            <see cref="M:Northwoods.Go.GoSelection.CreateResizeHandle(Northwoods.Go.GoObject,Northwoods.Go.GoObject,Northwoods.Go.PointF,System.Int32,System.Boolean)"/> as needed.
            The standard implementation first calls <see cref="M:Northwoods.Go.GoObject.RemoveSelectionHandles(Northwoods.Go.GoSelection)"/>
            to make sure no obsolete handles remain for this object.
            If <see cref="M:Northwoods.Go.GoObject.CanResize"/> is false, it just creates a bounding handle.
            Otherwise if <see cref="M:Northwoods.Go.GoObject.CanReshape"/> is true, it creates eight resize
            handles at the eight standard spots along the object's bounds.
            If <see cref="M:Northwoods.Go.GoObject.CanReshape"/> is false, it only creates the four resize
            handles at the object's corners.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoObject.CreateBoundingHandle">
            <summary>
            Create a bounding handle for this object.
            </summary>
            <returns>
            This must return a <see cref="T:Northwoods.Go.GoObject"/> that implements <see cref="T:Northwoods.Go.IGoHandle"/>
            and is an appropriate size and position for surrounding the object.
            </returns>
            <remarks>
            By default this allocates a new <see cref="T:Northwoods.Go.GoHandle"/>.
            <see cref="M:Northwoods.Go.GoSelection.CreateBoundingHandle(Northwoods.Go.GoObject,Northwoods.Go.GoObject)"/> will call this method to
            allocate a handle and size and position it.
            <see cref="M:Northwoods.Go.GoSelection.CreateBoundingHandle(Northwoods.Go.GoObject,Northwoods.Go.GoObject)"/> is then responsible for
            specifying its properties, including its <see cref="P:Northwoods.Go.GoShape.Pen"/> and
            <see cref="P:Northwoods.Go.GoShape.Brush"/> if the handle is a <see cref="T:Northwoods.Go.GoShape"/>.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoObject.CreateResizeHandle(System.Int32)"/>
        </member>
        <member name="M:Northwoods.Go.GoObject.CreateResizeHandle(System.Int32)">
            <summary>
            Create a resize handle for this object, given a handle ID.
            </summary>
            <param name="handleid"></param>
            <returns>
            This must return a <see cref="T:Northwoods.Go.GoObject"/> that implements <see cref="T:Northwoods.Go.IGoHandle"/>.
            </returns>
            <remarks>
            By default this allocates a new <see cref="T:Northwoods.Go.GoHandle"/>.
            <see cref="M:Northwoods.Go.GoSelection.CreateResizeHandle(Northwoods.Go.GoObject,Northwoods.Go.GoObject,Northwoods.Go.PointF,System.Int32,System.Boolean)"/> will call this method to
            allocate a handle which it will position.
            <see cref="M:Northwoods.Go.GoSelection.CreateResizeHandle(Northwoods.Go.GoObject,Northwoods.Go.GoObject,Northwoods.Go.PointF,System.Int32,System.Boolean)"/> also is responsible
            for specifying its other <see cref="T:Northwoods.Go.GoObject"/> properties,
            including its <see cref="P:Northwoods.Go.GoShape.Pen"/> and <see cref="P:Northwoods.Go.GoShape.Brush"/> if
            the handle is a <see cref="T:Northwoods.Go.GoShape"/>.
            You may find it convenient to adjust the shape (<see cref="P:Northwoods.Go.GoHandle.Style"/>) or size
            of a particular handle by overriding this method.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoObject.CreateBoundingHandle"/>
        </member>
        <member name="M:Northwoods.Go.GoObject.RemoveSelectionHandles(Northwoods.Go.GoSelection)">
            <summary>
            Remove all selection handles for this object for the given selection collection.
            </summary>
            <param name="sel"></param>
            <remarks>
            By default this just calls <see cref="M:Northwoods.Go.GoSelection.RemoveHandles(Northwoods.Go.GoObject)"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoObject.DoMove(Northwoods.Go.GoView,Northwoods.Go.PointF,Northwoods.Go.PointF)">
            <summary>
            Called when a user moves this object.
            </summary>
            <param name="view"></param>
            <param name="origLoc"></param>
            <param name="newLoc"></param>
            <remarks>
            This is normally called from <see cref="M:Northwoods.Go.GoView.MoveSelection(Northwoods.Go.GoSelection,System.Drawing.SizeF,System.Boolean)"/> and
            <see cref="M:Northwoods.Go.GoView.CopySelection(Northwoods.Go.GoSelection,System.Drawing.SizeF,System.Boolean)"/>.
            By default it just sets this object's <see cref="P:Northwoods.Go.GoObject.Location"/> property
            to the result of a call to <see cref="M:Northwoods.Go.GoObject.ComputeMove(Northwoods.Go.PointF,Northwoods.Go.PointF)"/>:
            <c>Location = ComputeMove(origLoc, newLoc)</c>
            However, you can override this method or <see cref="M:Northwoods.Go.GoObject.ComputeMove(Northwoods.Go.PointF,Northwoods.Go.PointF)"/>
            to constrain the places that this object can be moved to by the user.
            You will still be able to move this object programmatically by
            setting the <see cref="P:Northwoods.Go.GoObject.Location"/> or <see cref="P:Northwoods.Go.GoObject.Position"/> property
            directly.
            If you want to constrain this object's movement both interactively and
            programmatically, you should override the <see cref="P:Northwoods.Go.GoObject.Bounds"/> property.
            Override <see cref="M:Northwoods.Go.GoObject.ComputeMove(Northwoods.Go.PointF,Northwoods.Go.PointF)"/> if you want to constrain the user's
            movement of this object without regard to the actual view or input events
            causing the move.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoObject.ComputeMove(Northwoods.Go.PointF,Northwoods.Go.PointF)">
            <summary>
            Calculate a new location for this object.
            </summary>
            <param name="origLoc"></param>
            <param name="newLoc"></param>
            <returns>
            A <c>PointF</c> in document coordinates.
            </returns>
            <remarks>
            This is normally called from <see cref="M:Northwoods.Go.GoObject.DoMove(Northwoods.Go.GoView,Northwoods.Go.PointF,Northwoods.Go.PointF)"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoObject.DoResize(Northwoods.Go.GoView,System.Drawing.RectangleF,Northwoods.Go.PointF,System.Int32,Northwoods.Go.GoInputState,System.Drawing.SizeF,System.Drawing.SizeF)">
            <summary>
            Called when a user resizes this object.
            </summary>
            <param name="view"></param>
            <param name="origRect"></param>
            <param name="newPoint"></param>
            <param name="whichHandle"></param>
            <param name="evttype"></param>
            <param name="min"></param>
            <param name="max"></param>
            <remarks>
            This is normally called from <see cref="T:Northwoods.Go.GoToolResizing"/>.
            By default it just calls <see cref="M:Northwoods.Go.GoObject.ComputeResize(System.Drawing.RectangleF,Northwoods.Go.PointF,System.Int32,System.Drawing.SizeF,System.Drawing.SizeF,System.Boolean)"/>, allowing
            reshaping if this object's <see cref="M:Northwoods.Go.GoObject.CanReshape"/> property is true
            and the <paramref name="view"/>'s last input's <see cref="P:Northwoods.Go.GoInputEventArgs.Shift"/>
            property is true.
            The resulting <c>RectangleF</c> value is used as this object's new
            <see cref="P:Northwoods.Go.GoObject.Bounds"/> if <see cref="P:Northwoods.Go.GoObject.ResizesRealtime"/> is true or if
            <paramref name="evttype"/> is <see cref="F:Northwoods.Go.GoInputState.Finish"/>.
            Override <see cref="M:Northwoods.Go.GoObject.ComputeResize(System.Drawing.RectangleF,Northwoods.Go.PointF,System.Int32,System.Drawing.SizeF,System.Drawing.SizeF,System.Boolean)"/> if you want to constrain the user's
            resizing of this object without regard to the actual view or input events
            causing the resize.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoObject.ComputeResize(System.Drawing.RectangleF,Northwoods.Go.PointF,System.Int32,System.Drawing.SizeF,System.Drawing.SizeF,System.Boolean)">
            <summary>
            Calculate a new bounding rectangle for this object.
            </summary>
            <param name="origRect"></param>
            <param name="newPoint"></param>
            <param name="handle"></param>
            <param name="min"></param>
            <param name="max"></param>
            <param name="reshape"></param>
            <returns>
            A new <c>RectangleF</c> bounding rectangle, in document coordinates.
            </returns>
            <remarks>
            This is normally called from <see cref="M:Northwoods.Go.GoObject.DoResize(Northwoods.Go.GoView,System.Drawing.RectangleF,Northwoods.Go.PointF,System.Int32,Northwoods.Go.GoInputState,System.Drawing.SizeF,System.Drawing.SizeF)"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoObject.DoBeginEdit(Northwoods.Go.GoView)">
            <summary>
            Start editing this object in the given view.
            </summary>
            <param name="view"></param>
            <remarks>
            Because no editor is suitable for all <see cref="T:Northwoods.Go.GoObject"/>s,
            this method does nothing by default.
            An implementation of this method should probably start a
            transaction, call <see cref="M:Northwoods.Go.GoObject.CreateEditor(Northwoods.Go.GoView)"/>, initialize the
            resulting <see cref="T:Northwoods.Go.GoControl"/> appropriately, remember it
            as the value of the <see cref="P:Northwoods.Go.GoObject.Editor"/> property, and add it to
            the view by setting the <see cref="P:Northwoods.Go.GoView.EditControl"/> property.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoObject.CreateEditor(Northwoods.Go.GoView)"/>
            <seealso cref="M:Northwoods.Go.GoObject.DoEndEdit(Northwoods.Go.GoView)"/>
        </member>
        <member name="M:Northwoods.Go.GoObject.CreateEditor(Northwoods.Go.GoView)">
            <summary>
            Create a GoControl that implements an editor for this object in the given view.
            </summary>
            <param name="view"></param>
            <returns>
            A <see cref="T:Northwoods.Go.GoControl"/> object to be added to a <see cref="T:Northwoods.Go.GoView"/>
            that is responsible for displaying a <c>Control</c> to allow the user
            to edit this object.
            </returns>
            <remarks>
            The default behavior is to just return null.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoObject.DoBeginEdit(Northwoods.Go.GoView)"/>
            <seealso cref="M:Northwoods.Go.GoObject.DoEndEdit(Northwoods.Go.GoView)"/>
            <seealso cref="P:Northwoods.Go.GoObject.Editor"/>
        </member>
        <member name="M:Northwoods.Go.GoObject.DoEndEdit(Northwoods.Go.GoView)">
            <summary>
            Stop editing this object in the given view.
            </summary>
            <param name="view"></param>
            <remarks>
            By default this method does nothing.
            However, an implementation of this method should probably
            update this object appropriately, remove the <see cref="T:Northwoods.Go.GoControl"/>
            from the view by setting the <see cref="P:Northwoods.Go.GoView.EditControl"/>
            property to null, and finish the transaction.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoObject.DoBeginEdit(Northwoods.Go.GoView)"/>
            <seealso cref="M:Northwoods.Go.GoObject.CreateEditor(Northwoods.Go.GoView)"/>
        </member>
        <member name="M:Northwoods.Go.GoObject.GetShadowOffset(Northwoods.Go.GoView)">
            <summary>
            Gets the size of a drop shadow for this object in the given view.
            </summary>
            <param name="view"></param>
            <returns>
            A <c>SizeF</c> value that specifies the X and Y offset from the
            object's position.  A positive value for X places the drop shadow
            toward the right; a positive value for Y places it toward the bottom.
            Normally this value has small positive values for both <c>Width</c>
            (X) and <c>Height</c> (Y), resulting in a shadow that corresponds to
            a light source coming from the top left of the view.
            </returns>
            <remarks>
            By default this just returns <c>view.ShadowOffset</c>.
            You can override this to customize the size of ths drop shadow
            for this kind of object.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoObject.GetShadowBrush(Northwoods.Go.GoView)"/>
            <seealso cref="M:Northwoods.Go.GoObject.GetShadowPen(Northwoods.Go.GoView,System.Single)"/>
            <seealso cref="P:Northwoods.Go.GoView.ShadowOffset"/>
        </member>
        <member name="M:Northwoods.Go.GoObject.GetShadowBrush(Northwoods.Go.GoView)">
            <summary>
            Get a Brush for painting a drop shadow in the given view.
            </summary>
            <param name="view"></param>
            <returns>
            A <c>Brush</c>, typically a partially transparent gray.
            </returns>
            <remarks>
            By default this just returns <c>view.GetShadowBrush()</c>.
            You can override this to customize the shadow for this kind of object.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoObject.GetShadowOffset(Northwoods.Go.GoView)"/>
            <seealso cref="M:Northwoods.Go.GoObject.GetShadowPen(Northwoods.Go.GoView,System.Single)"/>
            <seealso cref="M:Northwoods.Go.GoView.GetShadowBrush"/>
        </member>
        <member name="M:Northwoods.Go.GoObject.GetShadowPen(Northwoods.Go.GoView,System.Single)">
            <summary>
            Get a Pen for painting a drop shadow in the given view.
            </summary>
            <param name="view"></param>
            <param name="width"></param>
            <returns>
            A <c>Pen</c>, typically a partially transparent gray.
            </returns>
            <remarks>
            By default this just returns <c>view.GetShadowPen(width)</c>.
            You can override this to customize the shadow for this kind of object.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoObject.GetShadowOffset(Northwoods.Go.GoView)"/>
            <seealso cref="M:Northwoods.Go.GoObject.GetShadowBrush(Northwoods.Go.GoView)"/>
            <seealso cref="M:Northwoods.Go.GoView.GetShadowPen(System.Single)"/>
        </member>
        <member name="M:Northwoods.Go.GoObject.CopyOldValueForUndo(Northwoods.Go.GoChangedEventArgs)">
            <summary>
            Preserve any mutable state needed to perform an <see cref="M:Northwoods.Go.IGoUndoableEdit.Undo"/>.
            </summary>
            <param name="e">The particular <see cref="T:Northwoods.Go.GoChangedEventArgs"/> edit.</param>
            <remarks>
            This does not need to be overridden for changes to properties of type integer,
            single float, <c>RectangleF</c>, <c>PointF</c>, <c>SizeF</c> or references to
            independent objects, as long as the old value is passed in the arguments to
            <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/>.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoDocument.CopyOldValueForUndo(Northwoods.Go.GoChangedEventArgs)"/>
        </member>
        <member name="M:Northwoods.Go.GoObject.CopyNewValueForRedo(Northwoods.Go.GoChangedEventArgs)">
            <summary>
            Preserve any mutable state needed to perform an <see cref="M:Northwoods.Go.IGoUndoableEdit.Redo"/>.
            </summary>
            <param name="e">The particular <see cref="T:Northwoods.Go.GoChangedEventArgs"/> edit.</param>
            <remarks>
            This does not need to be overridden for changes to properties of type integer,
            single float, <c>RectangleF</c>, <c>PointF</c>, <c>SizeF</c> or references to
            independent objects, as long as the new value is passed in the arguments to
            <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/>.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoDocument.CopyNewValueForRedo(Northwoods.Go.GoChangedEventArgs)"/>
        </member>
        <member name="M:Northwoods.Go.GoObject.ChangeValue(Northwoods.Go.GoChangedEventArgs,System.Boolean)">
            <summary>
            Perform an undo or redo, given a <see cref="T:Northwoods.Go.GoChangedEventArgs"/> representing
            a change on this object.
            </summary>
            <param name="e">The particular <see cref="T:Northwoods.Go.GoChangedEventArgs"/> edit.</param>
            <param name="undo">If true, restore the old value, otherwise restore the new value.</param>
            <seealso cref="M:Northwoods.Go.GoDocument.ChangeValue(Northwoods.Go.GoChangedEventArgs,System.Boolean)"/>
        </member>
        <member name="M:Northwoods.Go.GoObject.MakeRect(System.Single)">
            <summary>
            A static method for converting a float to a RectangleF, for calls to <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/>.
            </summary>
            <param name="x"></param>
        </member>
        <member name="M:Northwoods.Go.GoObject.MakeRect(Northwoods.Go.PointF)">
            <summary>
            A static method for converting a PointF to a RectangleF, for calls to <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/>.
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:Northwoods.Go.GoObject.MakeRect(System.Drawing.SizeF)">
            <summary>
            A static method for converting a SizeF to a RectangleF, for calls to <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/>.
            </summary>
            <param name="s"></param>
        </member>
        <member name="F:Northwoods.Go.GoObject.NullRect">
            <summary>
            This is an empty <c>RectangleF</c>, which is convenient when calling <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/>.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoObject.Layer">
            <summary>
            Gets the layer to which this object belongs.
            </summary>
            <remarks>
            If this object is not part of any layer, either directly
            as a top-level object, or as part of a group,
            then this property value will be null.
            You cannot set this property--call <see cref="M:Northwoods.Go.GoLayer.Add(Northwoods.Go.GoObject)"/> instead.
            <see cref="M:Northwoods.Go.GoObject.CopyObject(Northwoods.Go.GoCopyDictionary)"/> will not set this property directly, nor will
            it automatically add the copied object to some layer to set this property
            indirectly.
            The caller of <see cref="M:Northwoods.Go.GoObject.CopyObject(Northwoods.Go.GoCopyDictionary)"/> is responsible for deciding which
            <see cref="T:Northwoods.Go.GoLayer"/> to add the newly copied object, if any.
            </remarks>
            <seealso cref="P:Northwoods.Go.GoObject.IsInDocument"/>
            <seealso cref="P:Northwoods.Go.GoObject.Document"/>
            <seealso cref="P:Northwoods.Go.GoObject.IsInView"/>
            <seealso cref="P:Northwoods.Go.GoObject.View"/>
            <seealso cref="M:Northwoods.Go.GoObject.OnLayerChanged(Northwoods.Go.GoLayer,Northwoods.Go.GoLayer,Northwoods.Go.GoObject)"/>
        </member>
        <member name="P:Northwoods.Go.GoObject.IsInDocument">
            <summary>
            Gets whether this object belongs to a document.
            </summary>
            <seealso cref="P:Northwoods.Go.GoObject.Document"/>
        </member>
        <member name="P:Northwoods.Go.GoObject.Document">
            <summary>
            Gets the document that this object belongs to,
            or null if this is not in a layer or if this is in a view layer.
            </summary>
            <remarks>
            You cannot set this property--call <see cref="M:Northwoods.Go.GoLayer.Add(Northwoods.Go.GoObject)"/> instead.
            </remarks>
            <seealso cref="P:Northwoods.Go.GoObject.IsInDocument"/>
        </member>
        <member name="P:Northwoods.Go.GoObject.IsInView">
            <summary>
            Gets whether this object belongs to a view.
            </summary>
            <seealso cref="P:Northwoods.Go.GoObject.View"/>
        </member>
        <member name="P:Northwoods.Go.GoObject.View">
            <summary>
            Gets the view that this object belongs to,
            or null if this is not in a layer or if this is in a document layer.
            </summary>
            <remarks>
            You cannot set this property--call <see cref="M:Northwoods.Go.GoLayer.Add(Northwoods.Go.GoObject)"/> instead.
            </remarks>
            <seealso cref="P:Northwoods.Go.GoObject.IsInView"/>
        </member>
        <member name="P:Northwoods.Go.GoObject.Parent">
            <summary>
            Gets the parent group for this object.
            </summary>
            <remarks>
            If this object belongs to a <see cref="T:Northwoods.Go.GoGroup"/>, we return that group.
            Otherwise we return null.
            You cannot set this property--call <see cref="M:Northwoods.Go.GoGroup.Add(Northwoods.Go.GoObject)"/> instead.
            This property does not depend on the object belonging to a layer.
            <see cref="M:Northwoods.Go.GoObject.CopyObject(Northwoods.Go.GoCopyDictionary)"/> will not set this property directly, nor will
            it automatically add the copied object to some group to set this property
            indirectly.
            The caller of <see cref="M:Northwoods.Go.GoObject.CopyObject(Northwoods.Go.GoCopyDictionary)"/> is responsible for deciding if and
            where to add the newly copied object to a <see cref="T:Northwoods.Go.GoGroup"/>.
            </remarks>
            <seealso cref="P:Northwoods.Go.GoObject.IsTopLevel"/>
            <seealso cref="M:Northwoods.Go.GoObject.OnParentChanged(Northwoods.Go.GoGroup,Northwoods.Go.GoGroup)"/>
        </member>
        <member name="P:Northwoods.Go.GoObject.IsTopLevel">
            <summary>
            Gets whether this object is a top-level object.
            </summary>
            <remarks>
            This property is true if there is no <see cref="P:Northwoods.Go.GoObject.Parent"/> group.
            This property does not depend on the object belonging to a layer.
            </remarks>
            <seealso cref="P:Northwoods.Go.GoObject.TopLevelObject"/>
        </member>
        <member name="P:Northwoods.Go.GoObject.TopLevelObject">
            <summary>
            Gets the top-level object for this object.
            </summary>
            <remarks>
            If this object's <see cref="P:Northwoods.Go.GoObject.IsTopLevel"/> property is true,
            we just return this object.
            Otherwise we look up the <see cref="P:Northwoods.Go.GoObject.Parent"/> chain until
            we find the top-level object.
            This property does not depend on the object belonging to a layer.
            </remarks>
            <seealso cref="P:Northwoods.Go.GoObject.Parent"/>
        </member>
        <member name="P:Northwoods.Go.GoObject.ParentNode">
            <summary>
            This convenience property gets the highest-level object in the <see cref="P:Northwoods.Go.GoObject.Parent"/>
            chain that is not a <see cref="T:Northwoods.Go.GoSubGraph"/>.
            </summary>
            <remarks>
            If this is a top-level object, or if this is an immediate child of a <see cref="T:Northwoods.Go.GoSubGraph"/>,
            the value is just itself.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoObject.Bounds">
            <summary>
            Gets or sets the bounding rectangle for this object.
            </summary>
            <value>
            This <c>RectangleF</c> value describes the size and position of the object
            in document coordinates.
            The <c>Width</c> and <c>Height</c> must be non-negative.
            </value>
            <remarks>
            When getting the bounds, if <see cref="P:Northwoods.Go.GoObject.InvalidBounds"/> is true,
            we call <see cref="M:Northwoods.Go.GoObject.ComputeBounds"/> to get the correct updated bounds.
            When setting the bounds, we call <see cref="M:Northwoods.Go.GoObject.OnBoundsChanged(System.Drawing.RectangleF)"/>,
            <see cref="M:Northwoods.Go.GoGroup.OnChildBoundsChanged(Northwoods.Go.GoObject,System.Drawing.RectangleF)"/> on the <see cref="P:Northwoods.Go.GoObject.Parent"/> (if any),
            and <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> with a subhint of <c>ChangedBounds</c>.
            You should override setting this property if you want to make sure this
            object never gets certain bounds, such as a size that's too small or large,
            or a position that is "out-of-bounds" for your application.
            However, if you only want to constrain how the user is allowed to
            move this object around with the mouse, you should override
            <see cref="M:Northwoods.Go.GoObject.ComputeMove(Northwoods.Go.PointF,Northwoods.Go.PointF)"/> instead, or override <see cref="M:Northwoods.Go.GoObject.DoMove(Northwoods.Go.GoView,Northwoods.Go.PointF,Northwoods.Go.PointF)"/>
            if the constraint should be specific to a particular view or if
            something other than the <see cref="P:Northwoods.Go.GoObject.Location"/> should be set.
            </remarks>
            <seealso cref="P:Northwoods.Go.GoObject.Position"/>
            <seealso cref="P:Northwoods.Go.GoObject.Size"/>
            <seealso cref="P:Northwoods.Go.GoObject.Center"/>
            <seealso cref="P:Northwoods.Go.GoObject.Left"/>
            <seealso cref="P:Northwoods.Go.GoObject.Top"/>
            <seealso cref="P:Northwoods.Go.GoObject.Width"/>
            <seealso cref="P:Northwoods.Go.GoObject.Height"/>
            <seealso cref="P:Northwoods.Go.GoObject.Right"/>
            <seealso cref="P:Northwoods.Go.GoObject.Bottom"/>
            <seealso cref="M:Northwoods.Go.GoObject.GetSpotLocation(System.Int32)"/>
            <seealso cref="M:Northwoods.Go.GoObject.SetSpotLocation(System.Int32,Northwoods.Go.PointF)"/>
            <seealso cref="P:Northwoods.Go.GoObject.Location"/>
        </member>
        <member name="P:Northwoods.Go.GoObject.Position">
            <summary>
            Gets or sets this object's top-left corner's position.
            </summary>
            <value>
            The <c>PointF</c> value is in document coordinates.
            </value>
            <remarks>
            This is just a convenience property that operates on this object's
            <see cref="P:Northwoods.Go.GoObject.Bounds"/>.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoObject.GetSpotLocation(System.Int32)"/>
            <seealso cref="M:Northwoods.Go.GoObject.SetSpotLocation(System.Int32,Northwoods.Go.PointF)"/>
            <seealso cref="P:Northwoods.Go.GoObject.Location"/>
        </member>
        <member name="P:Northwoods.Go.GoObject.Size">
            <summary>
            Gets or sets this object's dimensions.
            </summary>
            <value>
            The <c>SizeF</c> value is in document coordinates.
            </value>
            <remarks>
            This is just a convenience property that operates on this object's
            <see cref="P:Northwoods.Go.GoObject.Bounds"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoObject.Center">
            <summary>
            Gets or sets this object's center position.
            </summary>
            <value>
            The <c>PointF</c> value is in document coordinates.
            </value>
            <remarks>
            This is just a convenience property that operates on this object's
            <see cref="P:Northwoods.Go.GoObject.Bounds"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoObject.Left">
            <summary>
            Gets or sets this object's left coordinate.
            </summary>
            <value>
            The <c>float</c> value is in document coordinates.
            </value>
            <remarks>
            This is just a convenience property that operates on this object's
            <see cref="P:Northwoods.Go.GoObject.Bounds"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoObject.Top">
            <summary>
            Gets or sets this object's top coordinate.
            </summary>
            <value>
            The <c>float</c> value is in document coordinates.
            </value>
            <remarks>
            This is just a convenience property that operates on this object's
            <see cref="P:Northwoods.Go.GoObject.Bounds"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoObject.Width">
            <summary>
            Gets or sets this object's width.
            </summary>
            <value>
            The <c>float</c> value is in document coordinates.
            </value>
            <remarks>
            This is just a convenience property that operates on this object's
            <see cref="P:Northwoods.Go.GoObject.Bounds"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoObject.Height">
            <summary>
            Gets or sets this object's height.
            </summary>
            <value>
            The <c>float</c> value is in document coordinates.
            </value>
            <remarks>
            This is just a convenience property that operates on this object's
            <see cref="P:Northwoods.Go.GoObject.Bounds"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoObject.Right">
            <summary>
            Gets or sets this object's right coordinate.
            </summary>
            <value>
            The <c>float</c> value is in document coordinates.
            </value>
            <remarks>
            This is just a convenience property that operates on this object's
            <see cref="P:Northwoods.Go.GoObject.Bounds"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoObject.Bottom">
            <summary>
            Gets or sets this object's bottom coordinate.
            </summary>
            <value>
            The <c>float</c> value is in document coordinates.
            </value>
            <remarks>
            This is just a convenience property that operates on this object's
            <see cref="P:Northwoods.Go.GoObject.Bounds"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoObject.Location">
            <summary>
            Gets or sets this object's natural position.
            </summary>
            <value>
            The <c>PointF</c> value is in document coordinates.
            </value>
            <remarks>
            This property is normally the object's <see cref="F:Northwoods.Go.GoObject.TopLeft"/> position.
            However, it is common for certain kinds of objects to assume that the
            assigned location actually refers to a different spot of the bounding
            rectangle.  For example, for <see cref="T:Northwoods.Go.GoText"/> objects, the text's
            alignment property determines the <c>Location</c>.  For groups, one of
            the child objects might be the natural thing to be positioned as the
            user would see it.  For example, the icon of a node might provide the
            Location for the node as a whole.
            If you override this property, you should also override
            <see cref="M:Northwoods.Go.GoObject.SetSizeKeepingLocation(System.Drawing.SizeF)"/>.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoObject.SetSizeKeepingLocation(System.Drawing.SizeF)"/>
            <seealso cref="P:Northwoods.Go.GoObject.Bounds"/>
            <seealso cref="M:Northwoods.Go.GoObject.GetSpotLocation(System.Int32)"/>
            <seealso cref="M:Northwoods.Go.GoObject.SetSpotLocation(System.Int32,Northwoods.Go.PointF)"/>
        </member>
        <member name="P:Northwoods.Go.GoObject.Visible">
            <summary>
            Gets or sets whether the user can see this object.
            </summary>
            <value>
            This defaults to true.
            You should normally call the <see cref="M:Northwoods.Go.GoObject.CanView"/> method
            instead of getting this property.
            </value>
            <remarks>
            A false value prevents the user from seeing this object
            by the normal mechanisms.
            Even when this property value is true, this object might not be
            seeable by the user because the object's layer is not visible.
            A user will not normally be able to select an invisible object
            or do other interactive operations with an invisible object.
            However, an invisible object can still be part of a layer and
            document or view, and can still take part in all programmatic
            operations such as manipulating its bounds.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoObject.CanView"/>
            <seealso cref="P:Northwoods.Go.GoLayer.AllowView"/>
            <seealso cref="P:Northwoods.Go.GoObject.Printable"/>
        </member>
        <member name="P:Northwoods.Go.GoObject.Printable">
            <summary>
            Gets or sets whether the view can print this object.
            </summary>
            <value>
            This defaults to true.
            You should normally call the <see cref="M:Northwoods.Go.GoObject.CanPrint"/> method
            instead of getting this property.
            </value>
            <remarks>
            A false value prevents the view from printing this object
            by the normal mechanisms.
            Even when this property value is true, this object might not be
            printable by the view because the object's layer is not printable.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoObject.CanPrint"/>
            <seealso cref="P:Northwoods.Go.GoLayer.AllowPrint"/>
            <seealso cref="P:Northwoods.Go.GoObject.Visible"/>
        </member>
        <member name="P:Northwoods.Go.GoObject.Selectable">
            <summary>
            Gets or sets whether the user can select this object.
            </summary>
            <value>
            This defaults to true.  However, for some objects, such
            as <see cref="T:Northwoods.Go.GoPort"/>, this defaults to false.
            You should normally call the <see cref="M:Northwoods.Go.GoObject.CanSelect"/> method
            instead of getting this property.
            </value>
            <remarks>
            A false value prevents the user from selecting this object
            by the normal mechanisms.
            Even when this property value is true, this object might not be
            selectable by the user because its layer or document disallows it,
            or because the view disallows it.
            Your code can always select objects programmatically by calling
            <c>aView.Selection.Select(obj)</c> or <c>aView.Selection.Add(obj)</c>.
            When this object's <c>CanSelect</c> is false, then if this object is
            part of a group, the normal selection mechanism will see if the
            group's <c>CanSelect</c> is true.  If so, the group will be selected.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoObject.CanSelect"/>
            <seealso cref="M:Northwoods.Go.GoLayer.CanSelectObjects"/>
        </member>
        <member name="P:Northwoods.Go.GoObject.Movable">
            <summary>
            Gets or sets whether the user can move this object.
            </summary>
            <value>
            This defaults to true.  However, for some objects, such
            as <see cref="T:Northwoods.Go.GoLink"/>, this defaults to false.
            You should normally call the <see cref="M:Northwoods.Go.GoObject.CanMove"/> method
            instead of getting this property.
            </value>
            <remarks>
            A false value prevents the user from moving this object
            by the normal mechanisms.
            Even when this property value is true, this object might not be
            movable by the user because the layer or document disallows it,
            or because the view disallows it.
            Your code can always move objects programmatically by calling
            <c>obj.Position = newPos</c>.
            When this object is part of a group, the default drag behavior
            is to move just the object.  However, the <see cref="P:Northwoods.Go.GoObject.DraggingObject"/>
            really determines what is actually moved.  Note that some objects
            will not be able to move, or will not be able to move freely,
            because of constraints enforced in setting the <see cref="P:Northwoods.Go.GoObject.Bounds"/>
            or in the parent's <see cref="M:Northwoods.Go.GoGroup.LayoutChildren(Northwoods.Go.GoObject)"/> method.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoObject.CanMove"/>
            <seealso cref="M:Northwoods.Go.GoLayer.CanMoveObjects"/>
            <seealso cref="M:Northwoods.Go.GoObject.DoMove(Northwoods.Go.GoView,Northwoods.Go.PointF,Northwoods.Go.PointF)"/>
        </member>
        <member name="P:Northwoods.Go.GoObject.Copyable">
            <summary>
            Gets or sets whether the user can copy this object.
            </summary>
            <value>
            This defaults to true.
            You should normally call the <see cref="M:Northwoods.Go.GoObject.CanCopy"/> method
            instead of getting this property.
            </value>
            <remarks>
            A false value prevents the user from copying this object
            by the normal mechanisms.
            Even when this property value is true, this object might not be
            copyable by the user because the layer or document disallows it,
            or because the view disallows it.
            Your code can always copy objects programmatically by calling
            <see cref="!:Document.CopyFromCollection"/>.
            When this object is part of a group, the default drag behavior
            is to copy just the object.  However, the <see cref="P:Northwoods.Go.GoObject.DraggingObject"/>
            really determines what is actually copied.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoObject.CanCopy"/>
            <seealso cref="M:Northwoods.Go.GoLayer.CanCopyObjects"/>
        </member>
        <member name="P:Northwoods.Go.GoObject.Resizable">
            <summary>
            Gets or sets whether the user can resize this object.
            </summary>
            <value>
            This defaults to true.  However, for some objects, such
            as <see cref="T:Northwoods.Go.GoText"/> and <see cref="T:Northwoods.Go.GoPort"/>,
            this defaults to false.
            You should normally call the <see cref="M:Northwoods.Go.GoObject.CanResize"/> method
            instead of getting this property.
            </value>
            <remarks>
            A false value prevents the user from resizing this object
            by the normal mechanisms.
            Even when this property value is true, this object might not be
            resizable by the user because the layer or document disallows it,
            or because the view disallows it.
            Your code can always resize objects programmatically by calling
            <c>obj.Size = newSize</c> or <c>obj.Bounds = newRect</c>.
            For an object to be resizable, its <see cref="P:Northwoods.Go.GoObject.SelectionObject"/>
            is really what should be resizable.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoObject.CanResize"/>
            <seealso cref="M:Northwoods.Go.GoLayer.CanResizeObjects"/>
            <seealso cref="M:Northwoods.Go.GoObject.DoResize(Northwoods.Go.GoView,System.Drawing.RectangleF,Northwoods.Go.PointF,System.Int32,Northwoods.Go.GoInputState,System.Drawing.SizeF,System.Drawing.SizeF)"/>
            <seealso cref="P:Northwoods.Go.GoObject.Reshapable"/>
        </member>
        <member name="P:Northwoods.Go.GoObject.Reshapable">
            <summary>
            Gets or sets whether the user can reshape this object.
            </summary>
            <value>
            This defaults to true.  However, for some objects, such as
            <see cref="T:Northwoods.Go.GoImage"/> this defaults to false, so that users
            cannot change the aspect ratio.
            You should normally call the <see cref="M:Northwoods.Go.GoObject.CanReshape"/> method
            instead of getting this property.
            </value>
            <remarks>
            A false value prevents the user from reshaping this object
            by the normal mechanisms.
            Even when this property value is true, this object might not be
            reshapable by the user because the layer or document disallows it,
            or because the view disallows it.
            Your code can always reshape objects programmatically by calling
            <c>obj.Size = newSize</c> or <c>obj.Bounds = newRect</c>
            or by making other changes to alter the shape of the object.
            For an object to be reshapable, its <see cref="P:Northwoods.Go.GoObject.SelectionObject"/>
            is really what should be reshapable--for a <see cref="T:Northwoods.Go.GoGroup"/>,
            this is often one of its child objects.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoObject.CanReshape"/>
            <seealso cref="M:Northwoods.Go.GoLayer.CanReshapeObjects"/>
            <seealso cref="P:Northwoods.Go.GoObject.Resizable"/>
        </member>
        <member name="P:Northwoods.Go.GoObject.Deletable">
            <summary>
            Gets or sets whether the user can delete this object.
            </summary>
            <value>
            This defaults to true.
            You should normally call the <see cref="M:Northwoods.Go.GoObject.CanDelete"/> method
            instead of getting this property.
            </value>
            <remarks>
            A false value prevents the user from deleting this object
            by the normal mechanisms (i.e., removing it from its layer).
            Even when this property value is true, this object might not be
            deletable by the user because the layer or document disallows it,
            or because the view disallows it.
            Your code can always delete objects programmatically by calling
            <c>obj.Remove()</c>.
            When this object is part of a group, the default edit delete behavior
            is to remove the object from the group.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoObject.CanDelete"/>
            <seealso cref="M:Northwoods.Go.GoLayer.CanDeleteObjects"/>
        </member>
        <member name="P:Northwoods.Go.GoObject.Editable">
            <summary>
            Gets or sets whether the user can edit this object.
            </summary>
            <value>
            This defaults to false.
            You should normally call the <see cref="M:Northwoods.Go.GoObject.CanEdit"/> method
            instead of getting this property.
            </value>
            <remarks>
            A false value prevents the user from editing this object
            by the normal mechanisms.
            Even when this property value is true, this object might not be
            editable by the user because the layer or document disallows it,
            or because the view disallows it.
            Your code can always edit objects programmatically by calling
            <c>obj.DoBeginEdit(aView)</c>.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoObject.CanEdit"/>
            <seealso cref="M:Northwoods.Go.GoLayer.CanEditObjects"/>
        </member>
        <member name="P:Northwoods.Go.GoObject.AutoRescales">
            <summary>
            Gets or sets whether this object automatically rescales its appearance when
            its size changes.
            </summary>
            <value>
            This defaults to true.
            </value>
            <remarks>
            For most objects, particularly shapes, it is natural that when the size
            changes, the object adjusts its appearance appropriately smaller or larger,
            and accomodating any change in aspect ratio.
            Most classes ignore this property.
            However, there are certain circumstances where users do not expect this behavior,
            for example for <see cref="T:Northwoods.Go.GoText"/> instances that are part of
            a resizable group.  Typically you will set this property false for text
            objects added to groups.  <see cref="M:Northwoods.Go.GoGroup.RescaleChildren(System.Drawing.RectangleF)"/> heeds
            this property.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoObject.ResizesRealtime">
            <summary>
            Gets or sets whether this object continuously changes its size during a user resizing operation.
            </summary>
            <value>
            This defaults to false.  However, for some objects, such
            as <see cref="T:Northwoods.Go.GoPolygon"/> and <see cref="T:Northwoods.Go.GoStroke"/>,
            this defaults to true.
            </value>
            <remarks>
            One advantage of a false value for this property is that only one undo record
            is generated for a user's resizing operation--namely the final one on mouse up.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoObject.DoResize(Northwoods.Go.GoView,System.Drawing.RectangleF,Northwoods.Go.PointF,System.Int32,Northwoods.Go.GoInputState,System.Drawing.SizeF,System.Drawing.SizeF)"/>
        </member>
        <member name="P:Northwoods.Go.GoObject.Shadowed">
            <summary>
            Gets or sets whether this object is painted with a drop shadow.
            </summary>
            <value>
            This defaults to false.
            </value>
            <remarks>
            Normally the drop shadow is achieved by painting the shadow first,
            using <see cref="M:Northwoods.Go.GoObject.GetShadowBrush(Northwoods.Go.GoView)"/> or <see cref="M:Northwoods.Go.GoObject.GetShadowPen(Northwoods.Go.GoView,System.Single)"/>
            at the <see cref="M:Northwoods.Go.GoObject.GetShadowOffset(Northwoods.Go.GoView)"/>, and then doing the regular
            painting.
            The shadow affects the paint bounds, but not the object's bounds.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoObject.ExpandPaintBounds(System.Drawing.RectangleF,Northwoods.Go.GoView)"/>
        </member>
        <member name="P:Northwoods.Go.GoObject.DragsNode">
            <summary>
            Gets or sets whether this object, when selected and a child of a group,
            and when dragged, drags the parent node instead.
            </summary>
            <value>
            This defaults to false.
            </value>
            <remarks>
            This is used by <see cref="P:Northwoods.Go.GoObject.DraggingObject"/> so that
            <see cref="M:Northwoods.Go.GoView.MoveSelection(Northwoods.Go.GoSelection,System.Drawing.SizeF,System.Boolean)"/> or <see cref="M:Northwoods.Go.GoView.CopySelection(Northwoods.Go.GoSelection,System.Drawing.SizeF,System.Boolean)"/>
            will move or copy the node instead of the child object.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoObject.SuspendsUpdates">
            <summary>
            Gets or sets whether any document Changed event handlers are called upon a
            change to this object.
            </summary>
            <value>
            A value of true means that any document Changed event handlers and any
            UndoManager are not called.
            A value of false means that the notifications do take place.
            The default value is false.
            </value>
            <remarks>
            When this property is true, no views of this document will be updated
            as this object is changed, and no undo/redo information is kept.
            When you set the property to false again, you will need to make
            sure all the views are correct (you may wish to call <see cref="M:Northwoods.Go.GoObject.InvalidateViews"/>).
            You should also be sure the user and the UndoManager will
            not be confused by the loss of any undo/redo information while
            this property was true.
            Setting this property does not raise any Changed events.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/>
            <seealso cref="P:Northwoods.Go.GoDocument.SuspendsUpdates"/>
            <seealso cref="P:Northwoods.Go.GoObject.SkipsUndoManager"/>
        </member>
        <member name="P:Northwoods.Go.GoObject.SkipsUndoManager">
            <summary>
            Gets or sets whether the UndoManager is notified upon a change to this object.
            </summary>
            <value>
            A value of true means the <see cref="T:Northwoods.Go.GoUndoManager"/>'s
            <see cref="M:Northwoods.Go.GoUndoManager.DocumentChanged(System.Object,Northwoods.Go.GoChangedEventArgs)"/> method is not called.
            A value of false means that if there is an <see cref="T:Northwoods.Go.GoUndoManager"/>,
            it is notified so that it can record changes for undo and redo purposes.
            The default value is false.
            </value>
            <remarks>
            You must be careful that any changes that occur while this property
            is true will not confuse the user when they perform Undo's and Redo's
            but the changes are not undone or redone.
            Setting this property does not raise any Changed events.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/>
            <seealso cref="P:Northwoods.Go.GoDocument.SkipsUndoManager"/>
            <seealso cref="P:Northwoods.Go.GoObject.SuspendsUpdates"/>
        </member>
        <member name="P:Northwoods.Go.GoObject.InvalidBounds">
            <summary>
            Gets or sets whether the bounds are up to date.
            </summary>
            <remarks>
            This is typically set to true as some change is made to this
            object that requires recalculation of the bounds.
            This flag is automatically set to false and the
            <see cref="M:Northwoods.Go.GoObject.ComputeBounds"/> method then actually does that
            calculation on demand.
            Setting this property does not raise any Changed events.
            </remarks>
            <seealso cref="P:Northwoods.Go.GoObject.Bounds"/>
        </member>
        <member name="P:Northwoods.Go.GoObject.BeingRemoved">
            <summary>
            Gets whether this object is in the process of being removed from its layer or group.
            </summary>
            <remarks>
            Sometimes when handling certain events you need to know whether the
            object is being removed from its group or layer, so that you can decide
            on alternative behaviors.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoLayer.Remove(Northwoods.Go.GoObject)"/>
            <seealso cref="M:Northwoods.Go.GoGroup.Remove(Northwoods.Go.GoObject)"/>
        </member>
        <member name="P:Northwoods.Go.GoObject.Initializing">
            <summary>
            Gets or sets whether this object is in the process of being initialized.
            </summary>
            <remarks>
            This property is provided as a standard way to indicate that the object
            is not yet completely initialized, thereby allowing some methods to optimize
            their behavior.
            Most of the simpler objects do not need to use this flag.
            More complicated objects such as <see cref="T:Northwoods.Go.GoGroup"/>s use this flag
            both during construction and initialization to avoid repeated work in
            methods such as <see cref="M:Northwoods.Go.GoGroup.LayoutChildren(Northwoods.Go.GoObject)"/>.
            Setting this property does not raise any Changed events.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoObject.Observers">
            <summary>
            Gets an enumerator over the list of observer objects of this object.
            </summary>
            <value>
            A <see cref="T:Northwoods.Go.GoCollectionEnumerator"/> that iterates over the <see cref="T:Northwoods.Go.GoObject"/>s
            that are observers.  Most objects do not have any observer objects.
            </value>
        </member>
        <member name="P:Northwoods.Go.GoObject.SelectionObject">
            <summary>
            Gets the object that gets selection handles when this object is selected.
            </summary>
            <remarks>
            Sometimes when an object gets selected, you want to make it look like
            another object is what really got selected.
            Normally this happens for groups, where you don't want to have selection
            handles on the whole group, but only on some particular child object.
            This property allows you to specify which object should get selection
            handles when this object gains selection.
            The default value is this object itself.
            The selection object's <see cref="M:Northwoods.Go.GoObject.CanResize"/> method will control if that
            object gets resize selection handles and if the user can actually resize
            that object.
            You should be careful to make sure the value of this property is
            not confusing to the user.  Returning unrelated or varying objects
            may produce indeterminate behavior.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoObject.OnGotSelection(Northwoods.Go.GoSelection)"/>
            <seealso cref="M:Northwoods.Go.GoObject.AddSelectionHandles(Northwoods.Go.GoSelection,Northwoods.Go.GoObject)"/>
        </member>
        <member name="P:Northwoods.Go.GoObject.DraggingObject">
            <summary>
            Gets the object that will be dragged instead of this selected object.
            </summary>
            <remarks>
            This property is used by <see cref="M:Northwoods.Go.GoView.MoveSelection(Northwoods.Go.GoSelection,System.Drawing.SizeF,System.Boolean)"/> and
            <see cref="M:Northwoods.Go.GoView.CopySelection(Northwoods.Go.GoSelection,System.Drawing.SizeF,System.Boolean)"/>.
            If <see cref="P:Northwoods.Go.GoObject.DragsNode"/> is true, this will return the node that this
            object is part of, which may be the <see cref="P:Northwoods.Go.GoObject.Parent"/> or a grandparent.
            If this is a top-level object, the value will be this object itself.
            By default this will just return this object itself.
            You should be careful to make sure the value of this property is
            not confusing to the user.  Returning unrelated or varying objects
            may produce indeterminate behavior.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoObject.Editor">
            <summary>
            Gets the <see cref="T:Northwoods.Go.GoControl"/> being used to edit this object.
            </summary>
            <value>
            This value is normally null, but should be non-null during the modal
            editing of this object using a <see cref="T:Northwoods.Go.GoControl"/> to host a
            <c>Control</c> in a <see cref="T:Northwoods.Go.GoView"/>.
            </value>
            <seealso cref="M:Northwoods.Go.GoObject.CreateEditor(Northwoods.Go.GoView)"/>
            <seealso cref="M:Northwoods.Go.GoObject.DoBeginEdit(Northwoods.Go.GoView)"/>
            <seealso cref="M:Northwoods.Go.GoObject.DoEndEdit(Northwoods.Go.GoView)"/>
        </member>
        <member name="F:Northwoods.Go.GoControl.ChangedControlType">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoControl.#ctor">
            <summary>
            The constructor produces a GoControl with no <c>ControlType</c>.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoControl.CopyObject(Northwoods.Go.GoCopyDictionary)">
            <summary>
            Copying a GoControl does not copy any view to Control mappings.
            </summary>
            <param name="env"></param>
            <returns>The copied GoControl.</returns>
        </member>
        <member name="M:Northwoods.Go.GoControl.DoEndEdit(Northwoods.Go.GoView)">
            <summary>
            This method just calls <see cref="M:Northwoods.Go.GoObject.DoEndEdit(Northwoods.Go.GoView)"/> on the
            <see cref="P:Northwoods.Go.GoControl.EditedObject"/>.
            </summary>
            <param name="view"></param>
        </member>
        <member name="M:Northwoods.Go.GoControl.OnLayerChanged(Northwoods.Go.GoLayer,Northwoods.Go.GoLayer,Northwoods.Go.GoObject)">
            <summary>
            When a GoControl is added to a document, we need to add corresponding
            Controls to all of its views; when it is removed from a document, we
            need to remove all of its Controls in all of its views.
            </summary>
            <param name="oldLayer"></param>
            <param name="newLayer"></param>
            <param name="mainObj"></param>
        </member>
        <member name="M:Northwoods.Go.GoControl.FindControl(Northwoods.Go.GoView)">
            <summary>
            This returns the <c>Control</c> that exists for this object
            in the given <paramref name="view"/>.
            </summary>
            <param name="view"></param>
            <returns>a <c>Control</c>, or null if <see cref="M:Northwoods.Go.GoControl.GetControl(Northwoods.Go.GoView)"/>
            hasn't been called or if <see cref="M:Northwoods.Go.GoControl.CreateControl(Northwoods.Go.GoView)"/> returned null</returns>
        </member>
        <member name="M:Northwoods.Go.GoControl.GetControl(Northwoods.Go.GoView)">
            <summary>
            This is responsible for creating and initializing a <c>Control</c>
            and adding it to a view, if does not already exist.
            </summary>
            <param name="view"></param>
            <returns>A <c>Control</c>, added to the <pararef name="view"/>.</returns>
        </member>
        <member name="M:Northwoods.Go.GoControl.CreateControl(Northwoods.Go.GoView)">
            <summary>
            Create a Control by calling the zero argument constructor
            of the <see cref="P:Northwoods.Go.GoControl.ControlType"/>.
            </summary>
            <param name="view"></param>
            <returns>A <c>Control</c>.</returns>
            <remarks>
            <see cref="M:Northwoods.Go.GoControl.GetControl(Northwoods.Go.GoView)"/> is reponsible for adding the <c>Control</c>
            to the view's collection of controls.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoControl.DisposeControl(System.Windows.Forms.Control,Northwoods.Go.GoView)">
            <summary>
            This method is called when a <c>Control</c> created by
            <see cref="M:Northwoods.Go.GoControl.CreateControl(Northwoods.Go.GoView)"/> needs to be removed from a view.
            </summary>
            <param name="comp"></param>
            <param name="view"></param>
            <remarks>
            By default this also calls <c>Control.Dispose()</c>.
            If the view is in "edit" mode using this GoControl,
            the <c>Control</c> is removed and disposed by the view,
            after <see cref="P:Northwoods.Go.GoView.EditControl"/> is set to null.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoControl.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)">
            <summary>
            If the GoControl's visibility changes, we need to change the
            visibility of all of its corresponding Controls.
            </summary>
            <param name="subhint"></param>
            <param name="oldI"></param>
            <param name="oldVal"></param>
            <param name="oldRect"></param>
            <param name="newI"></param>
            <param name="newVal"></param>
            <param name="newRect"></param>
        </member>
        <member name="M:Northwoods.Go.GoControl.Paint(System.Drawing.Graphics,Northwoods.Go.GoView)">
            <summary>
            Make sure the Control in the view exists and is positioned and sized correctly.
            </summary>
            <param name="g"></param>
            <param name="view"></param>
            <remarks>
            This ignores the <see cref="P:Northwoods.Go.GoObject.Shadowed"/> property.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoControl.ChangeValue(Northwoods.Go.GoChangedEventArgs,System.Boolean)">
            <summary>
            Performs changes for undo and redo.
            </summary>
            <seealso cref="M:Northwoods.Go.GoObject.ChangeValue(Northwoods.Go.GoChangedEventArgs,System.Boolean)"/>
        </member>
        <member name="P:Northwoods.Go.GoControl.ControlType">
            <summary>
            Gets or sets the <c>Type</c> used to specify which <c>Control</c> to create.
            </summary>
            <value>
            The value must be a <c>Type</c> that is a subclass of <c>Control</c>.
            </value>
            <remarks>
            <see cref="M:Northwoods.Go.GoControl.CreateControl(Northwoods.Go.GoView)"/> uses this value to create a <c>Control</c> for each
            <see cref="T:Northwoods.Go.GoView"/> that this GoControl is being displayed in.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoControl.EditedObject">
            <summary>
            Gets or sets the <see cref="T:Northwoods.Go.GoObject"/> for which this control is acting as an editor.
            </summary>
            <remarks>
            This does not raise a Changed notification, since it should only be used for view objects.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoControl.Map">
            <summary>
            Gets the <c>Hashtable</c> maps <see cref="T:Northwoods.Go.GoView"/>s to <c>Control</c>s.
            </summary>
            <remarks>
            There may be zero, one, or many views that are displaying this GoControl.
            Each one needs to have its own instantiation of a <c>Control</c>.
            </remarks>
        </member>
        <member name="T:Northwoods.Go.GoPerspective">
            <summary>
            Specifies the 3D perspective to simulate for any "3D" GoObject.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoPerspective.TopLeft">
            <summary>
            A perspective style for any "3D" GoObject.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoPerspective.BottomLeft">
            <summary>
            A perspective style for any "3D" GoObject.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoPerspective.TopRight">
            <summary>
            A perspective style for any "3D" GoObject.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoPerspective.BottomRight">
            <summary>
            A perspective style for any "3D" GoObject.
            </summary>
        </member>
        <member name="T:Northwoods.Go.GoCube">
            <summary>
            A 2-D representation of a Rectangular Prism, with the 
            "depth" dimension controlled by an additional GoHandle.
            </summary>
        </member>
        <member name="T:Northwoods.Go.GoShape">
            <summary>
            An abstract geometrical shape that uses a <c>Pen</c> to draw an outline and
            optionally a <c>Brush</c> to fill the outline.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoShape.ChangedPen">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoShape.ChangedBrush">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoShape.#ctor">
            <summary>
            The constructor produces a shape that is drawn with a black pen and no brush.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoShape.ChangeValue(Northwoods.Go.GoChangedEventArgs,System.Boolean)">
            <summary>
            Performs changes for undo and redo.
            </summary>
            <seealso cref="M:Northwoods.Go.GoObject.ChangeValue(Northwoods.Go.GoChangedEventArgs,System.Boolean)"/>
        </member>
        <member name="M:Northwoods.Go.GoShape.ExpandPaintBounds(System.Drawing.RectangleF,Northwoods.Go.GoView)">
            <summary>
            The expanded paint bounds for a shape includes any Pen width and miter
            limit and any drop shadow.
            </summary>
            <param name="rect"></param>
            <param name="view"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.GoShape.GetPenWidth(System.Drawing.Pen,Northwoods.Go.GoView)">
            <summary>
            Get the effective width of a pen in a view.
            </summary>
            <param name="pen"></param>
            <param name="view"></param>
            <returns>
            Zero if <paramref name="pen"/> is null; the width of one pixel
            in the <paramref name="view"/> if the pen's <c>Width</c> is zero;
            or the pen's <c>Width</c> otherwise.
            </returns>
        </member>
        <member name="M:Northwoods.Go.GoShape.ExpandPointOnEdge(Northwoods.Go.PointF,System.Drawing.RectangleF,System.Single)">
            <summary>
            This is a convenience method for shifting a point on the edge of the
            given rectangle's bounds out by some distance.
            </summary>
            <param name="p"></param>
            <param name="rect"></param>
            <param name="shift"></param>
            <returns>
            if <paramref name="p"/> had been on the edge of the rectangle, the
            value will be shifted out by the <paramref name="shift"/> in either or
            both directions; otherwise the unmodified <paramref name="p"/>
            is returned
            </returns>
        </member>
        <member name="M:Northwoods.Go.GoShape.ContainsPoint(Northwoods.Go.PointF)">
            <summary>
            Consider the Pen width when determining if a point is in this shape.
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.GoShape.ContainedByRectangle(System.Drawing.RectangleF)">
            <summary>
            Consider the Pen width when determining if this shape is inside a rectangle.
            </summary>
            <param name="r"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.GoShape.GetNearestIntersectionPoint(Northwoods.Go.PointF,Northwoods.Go.PointF,Northwoods.Go.PointF@)">
            <summary>
            Consider the Pen width in determining the closest point of this object
            that intersects the given line.
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.GoShape.DrawLine(System.Drawing.Graphics,Northwoods.Go.GoView,System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draw a straight line.
            </summary>
            <param name="g"></param>
            <param name="view"></param>
            <param name="pen"></param>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="x2"></param>
            <param name="y2"></param>
        </member>
        <member name="M:Northwoods.Go.GoShape.DrawLines(System.Drawing.Graphics,Northwoods.Go.GoView,System.Drawing.Pen,Northwoods.Go.PointF[])">
            <summary>
            Draw a connected sequence of straight lines.
            </summary>
            <param name="g"></param>
            <param name="view"></param>
            <param name="pen"></param>
            <param name="points"></param>
        </member>
        <member name="M:Northwoods.Go.GoShape.DrawBezier(System.Drawing.Graphics,Northwoods.Go.GoView,System.Drawing.Pen,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draw a Bezier curve.
            </summary>
            <param name="g"></param>
            <param name="view"></param>
            <param name="pen"></param>
            <param name="x1"></param>
            <param name="y1"></param>
            <param name="x2"></param>
            <param name="y2"></param>
            <param name="x3"></param>
            <param name="y3"></param>
            <param name="x4"></param>
            <param name="y4"></param>
        </member>
        <member name="M:Northwoods.Go.GoShape.DrawRectangle(System.Drawing.Graphics,Northwoods.Go.GoView,System.Drawing.Pen,System.Drawing.Brush,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draw a possibly filled rectangle or square.
            </summary>
            <param name="g"></param>
            <param name="view"></param>
            <param name="pen"></param>
            <param name="brush"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:Northwoods.Go.GoShape.DrawEllipse(System.Drawing.Graphics,Northwoods.Go.GoView,System.Drawing.Pen,System.Drawing.Brush,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draw a possibly filled ellipse or circle.
            </summary>
            <param name="g"></param>
            <param name="view"></param>
            <param name="pen"></param>
            <param name="brush"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
        </member>
        <member name="M:Northwoods.Go.GoShape.DrawPie(System.Drawing.Graphics,Northwoods.Go.GoView,System.Drawing.Pen,System.Drawing.Brush,System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)">
            <summary>
            Draw a possibly filled pie-shaped section of an ellipse.
            </summary>
            <param name="g"></param>
            <param name="view"></param>
            <param name="pen"></param>
            <param name="brush"></param>
            <param name="x"></param>
            <param name="y"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="startangle"></param>
            <param name="sweepangle"></param>
        </member>
        <member name="M:Northwoods.Go.GoShape.DrawPolygon(System.Drawing.Graphics,Northwoods.Go.GoView,System.Drawing.Pen,System.Drawing.Brush,Northwoods.Go.PointF[])">
            <summary>
            Draw a possibly filled polygon.
            </summary>
            <param name="g"></param>
            <param name="view"></param>
            <param name="pen"></param>
            <param name="brush"></param>
            <param name="points"></param>
        </member>
        <member name="P:Northwoods.Go.GoShape.Pen">
            <summary>
            Gets or sets the pen used to draw the outline of this shape.
            </summary>
            <value>
            The <c>Pen</c> value may be null, in which case no outline is drawn.
            This value defaults to <c>Pens.Black</c>.
            </value>
            <remarks>
            You must not modify the pen after you have assigned it.
            It is common to use the predefined brushes that are members of the
            <c>Pens</c> class.
            Currently serialization is limited to standard pens.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoShape.Brush">
            <summary>
            Gets or sets the brush used to fill the outline of this shape.
            </summary>
            <value>
            The <c>Brush</c> value may be null, in which case no background is painted.
            This value defaults to null.
            </value>
            <remarks>
            You must not modify the brush after you have assigned it.
            It is common to use the predefined brushes that are members of the
            <c>Brushes</c> class.
            Currently serialization is limited to standard solid, hatch,
            and texture brushes.
            </remarks>
        </member>
        <member name="F:Northwoods.Go.GoCube.ChangedDepth">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoCube.ChangedPerspective">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoCube.ChangedReshapableDepth">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoCube.DepthHandleID">
            <summary>
            A special handle ID for a handle which controls the depth size.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoCube.#ctor">
            <summary>
            The constructor produces a cube with a standard black <see cref="P:Northwoods.Go.GoShape.Pen"/>
            outline, no <see cref="T:System.Drawing.Brush"/> fill.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoCube.CopyObject(Northwoods.Go.GoCopyDictionary)">
            <summary>
            Make sure the cloned cube does not share any internal data references with the
            original one.
            </summary>
            <param name="env"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.GoCube.Paint(System.Drawing.Graphics,Northwoods.Go.GoView)">
            <summary>
            Paint a possibly shadowed cube.
            </summary>
            <param name="g"></param>
            <param name="view"></param>
        </member>
        <member name="M:Northwoods.Go.GoCube.ContainsPoint(Northwoods.Go.PointF)">
            <summary>
            Considers the shape of the "outer" cube to determine
            if a given point is inside.
            </summary>
            <param name="p"></param>
            <returns></returns>
            <remarks>
            Currently this does not take the pen width into account.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoCube.DoResize(Northwoods.Go.GoView,System.Drawing.RectangleF,Northwoods.Go.PointF,System.Int32,Northwoods.Go.GoInputState,System.Drawing.SizeF,System.Drawing.SizeF)">
            <summary>
            Support either allowing the user to move the depth control handle.
            </summary>
            <param name="view"></param>
            <param name="origRect"></param>
            <param name="newPoint"></param>
            <param name="whichHandle"></param>
            <param name="evttype"></param>
            <param name="min"></param>
            <param name="max"></param>
        </member>
        <member name="M:Northwoods.Go.GoCube.AddSelectionHandles(Northwoods.Go.GoSelection,Northwoods.Go.GoObject)">
            <summary>
            If <see cref="M:Northwoods.Go.GoObject.CanReshape"/> and <see cref="P:Northwoods.Go.GoCube.ReshapableDepth"/>
            are true, this supports a depth control handle.
            </summary>
            <param name="sel"></param>
            <param name="selectedObj"></param>
        </member>
        <member name="M:Northwoods.Go.GoCube.GetNearestIntersectionPoint(Northwoods.Go.PointF,Northwoods.Go.PointF,Northwoods.Go.PointF@)">
            <summary>
            The closest point of the "outer" cube that intersects with a given line
            is the closest such point of each of its six line segments.
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.GoCube.ChangeValue(Northwoods.Go.GoChangedEventArgs,System.Boolean)">
            <summary>
            Handle this class's property changes for undo and redo
            </summary>
            <param name="e"></param>
            <param name="undo"></param>
        </member>
        <member name="P:Northwoods.Go.GoCube.Bounds">
            <summary>
            Whenever the size and/or position is changed, we need to recalculate the
            path of the cube.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoCube.Depth">
            <summary>
            Gets or sets the width and height of the depth dimension.
            </summary>
            <value>
            This defaults to 10x10.
            If given a negative value, it uses zero instead.
            </value>
        </member>
        <member name="P:Northwoods.Go.GoCube.Perspective">
            <summary>
            Gets or sets the perspective from which the cube is viewed.
            </summary>
            <value>
            This defaults to <see cref="!:Perspective.TopLeft"/>.
            </value>
        </member>
        <member name="P:Northwoods.Go.GoCube.ReshapableDepth">
            <summary>
            Gets or sets whether to add the depth control handle.
            </summary>
            <value>
            This defaults to true.
            </value>
        </member>
        <member name="T:Northwoods.Go.GoCylinder">
            <summary>
            A 2-D representation of a cylinder, with the radius 
            or perspective "pitch" controlled by an additional GoHandle.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoCylinder.ChangedMinorRadius">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoCylinder.ChangedOrientation">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoCylinder.ChangedPerspective">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoCylinder.ChangedResizableRadius">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoCylinder.RadiusHandleID">
            <summary>
            A special handle ID for a handle which controls the radius length.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoCylinder.#ctor">
            <summary>
            The constructor produces a cylinder with a standard black <see cref="P:Northwoods.Go.GoShape.Pen"/>
            outline, no <see cref="T:System.Drawing.Brush"/> fill, and a default radius dimensions.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoCylinder.CopyObject(Northwoods.Go.GoCopyDictionary)">
            <summary>
            Makes sure the cloned cylinder does not share any internal data references with the
            original one.
            </summary>
            <param name="env"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.GoCylinder.Paint(System.Drawing.Graphics,Northwoods.Go.GoView)">
            <summary>
            Paint a possibly shadowed cylinder.
            </summary>
            <param name="g"></param>
            <param name="view"></param>
        </member>
        <member name="M:Northwoods.Go.GoCylinder.ContainsPoint(Northwoods.Go.PointF)">
            <summary>
            Consider the actual shape of the cylinder to determine
            if a given point is inside.
            </summary>
            <param name="p"></param>
            <returns></returns>
            <remarks>
            Currently this does not take the pen width into account.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoCylinder.DoResize(Northwoods.Go.GoView,System.Drawing.RectangleF,Northwoods.Go.PointF,System.Int32,Northwoods.Go.GoInputState,System.Drawing.SizeF,System.Drawing.SizeF)">
            <summary>
            Support either allowing the user to move the radius control handle.
            </summary>
            <param name="view"></param>
            <param name="origRect"></param>
            <param name="newPoint"></param>
            <param name="whichHandle"></param>
            <param name="evttype"></param>
            <param name="min"></param>
            <param name="max"></param>
        </member>
        <member name="M:Northwoods.Go.GoCylinder.AddSelectionHandles(Northwoods.Go.GoSelection,Northwoods.Go.GoObject)">
            <summary>
            If <see cref="M:Northwoods.Go.GoObject.CanReshape"/> and <see cref="P:Northwoods.Go.GoCylinder.ResizableRadius"/>
            are true, this supports a radius control handle.
            </summary>
            <param name="sel"></param>
            <param name="selectedObj"></param>
        </member>
        <member name="M:Northwoods.Go.GoCylinder.GetNearestIntersectionPoint(Northwoods.Go.PointF,Northwoods.Go.PointF,Northwoods.Go.PointF@)">
            <summary>
            The closest point of a cylinder that intersects with a given line
            is the closest such point of each two line segments and two ellipses.
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.GoCylinder.ChangeValue(Northwoods.Go.GoChangedEventArgs,System.Boolean)">
            <summary>
            Handle this class's property changes for undo and redo
            </summary>
            <param name="e"></param>
            <param name="undo"></param>
        </member>
        <member name="P:Northwoods.Go.GoCylinder.Bounds">
            <summary>
            Whenever the size and/or position is changed, path of the cylinder
            needs to be recalculated.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoCylinder.MinorRadius">
            <summary>
            Gets or sets the length of minor radius of the cylinder's ellipse. 
            </summary>
            <value>
            This defaults to 10.
            If given a negative value, it uses zero instead.
            </value>
        </member>
        <member name="P:Northwoods.Go.GoCylinder.Orientation">
            <summary>
            Gets or sets how to draw the cylinder, whether the parallel lines
            of the cylinder are drawn horizontally or vertically.
            </summary>
            <value>
            This defaults to <c>Orientation.Vertical</c>.
            </value>
        </member>
        <member name="P:Northwoods.Go.GoCylinder.Perspective">
            <summary>
            Gets or sets how to draw the cylinder, whether the full ellipse 
            is drawn on the top or bottom for <c>Orientation.Vertical</c> or left or right for 
            <c>Orientation.Horizontal</c>,
            </summary>
            <value>
            This defaults to <c>GoPerspective.TopLeft</c>
            </value>
        </member>
        <member name="P:Northwoods.Go.GoCylinder.ResizableRadius">
            <summary>
            Gets or sets whether to add the radius control handle.
            </summary>
            <value>
            This defaults to true.
            </value>
        </member>
        <member name="T:Northwoods.Go.GoDiamond">
            <summary>
            An object in the shape of a diamond or rhombus whose corners are at
            the midpoints of the bounding rectangle's edges.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoDiamond.#ctor">
            <summary>
            The constructor produces a diamond with a standard black <see cref="P:Northwoods.Go.GoShape.Pen"/>
            outline and no <see cref="T:System.Drawing.Brush"/> fill.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoDiamond.CopyObject(Northwoods.Go.GoCopyDictionary)">
            <summary>
            </summary>
            <param name="env"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.GoDiamond.Paint(System.Drawing.Graphics,Northwoods.Go.GoView)">
            <summary>
            Paint a diamond shape, possibly with a shadow.
            </summary>
            <param name="g"></param>
            <param name="view"></param>
        </member>
        <member name="M:Northwoods.Go.GoDiamond.ContainsPoint(Northwoods.Go.PointF)">
            <summary>
            Consider the sides of the diamond when determining if a point is inside.
            </summary>
            <param name="p"></param>
            <returns></returns>
            <remarks>
            Currently this does not take the pen width into account.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoDiamond.GetNearestIntersectionPoint(Northwoods.Go.PointF,Northwoods.Go.PointF,Northwoods.Go.PointF@)">
            <summary>
            The closest point of a diamond that intersects with a given line
            is the closest such point of each of its four line segments.
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.GoDiamond.ChangeValue(Northwoods.Go.GoChangedEventArgs,System.Boolean)">
            <summary>
            Handle this class's property changes for undo and redo
            </summary>
            <param name="e"></param>
            <param name="undo"></param>
        </member>
        <member name="P:Northwoods.Go.GoDiamond.Bounds">
            <summary>
            </summary>
        </member>
        <member name="T:Northwoods.Go.GoEllipse">
            <summary>
            An object in the shape of an ellipse.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoEllipse.#ctor">
            <summary>
            The constructor produces an ellipse with a standard black <see cref="P:Northwoods.Go.GoShape.Pen"/>
            outline and no <see cref="T:System.Drawing.Brush"/> fill.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoEllipse.Paint(System.Drawing.Graphics,Northwoods.Go.GoView)">
            <summary>
            Draw a possibly shadowed ellipse.
            </summary>
            <param name="g"></param>
            <param name="view"></param>
        </member>
        <member name="M:Northwoods.Go.GoEllipse.ContainsPoint(Northwoods.Go.PointF)">
            <summary>
            A point is in this object only if it really is inside the ellipse.
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.GoEllipse.GetNearestIntersectionPoint(Northwoods.Go.PointF,Northwoods.Go.PointF,Northwoods.Go.PointF@)">
            <summary>
            A point on the ellipse that is coincident with a line drawn from
            the center of the ellipse to the given point.
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.GoEllipse.NearestIntersectionOnEllipse(System.Drawing.RectangleF,Northwoods.Go.PointF,Northwoods.Go.PointF,Northwoods.Go.PointF@)">
            <summary>
            Find the intersection point of the elliptical path defined by rectangle rect and an infinite
            line p1-p2 that is closest to point p1.
            </summary>
            <param name="rect"></param>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.GoEllipse.NearestIntersectionOnArc(System.Drawing.RectangleF,Northwoods.Go.PointF,Northwoods.Go.PointF,Northwoods.Go.PointF@,System.Single,System.Single)">
            <summary>
            Find the intersection point of the elliptical path defined by rectangle rect and an infinite
            line p1-p2 that is closest to point p1 within the area from startAngle through the sweepAngle.
            </summary>
            <param name="rect"></param>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="result"></param>
            <param name="startAngle"></param>
            <param name="sweepAngle"></param>
            <returns></returns>
        </member>
        <member name="T:Northwoods.Go.GoGroup">
            <summary>
            Groups are a way of treating a collection of <see cref="T:Northwoods.Go.GoObject"/> instances
            as a single object.
            </summary>
        </member>
        <member name="T:Northwoods.Go.IGoCollection">
            <summary>
            This interface specifies a collection of <see cref="T:Northwoods.Go.GoObject"/>.
            </summary>
            <remarks>
            Classes implementing IGoCollection need not maintain an indexing
            of its objects--in other words, they need not implement <c>IList</c>.
            But at any one time each collection implementing this interface should maintain
            an ordering of all of its items, so that the enumerator will iterate
            "forwards" over the list, and so that the <see cref="P:Northwoods.Go.IGoCollection.Backwards"/> enumerable's
            enumerator will iterate "backwards" over that list.
            This ordering should be guaranteed to remain stable as long as the collection
            is unchanged.  However, a call to <see cref="M:Northwoods.Go.IGoCollection.Add(Northwoods.Go.GoObject)"/> or <see cref="M:Northwoods.Go.IGoCollection.Remove(Northwoods.Go.GoObject)"/>
            may cause the ordering of the items to be altered.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.IGoCollection.Add(Northwoods.Go.GoObject)">
            <summary>
            Add an object to this collection.
            </summary>
            <param name="obj">
            A <see cref="T:Northwoods.Go.GoObject"/>.
            </param>
            <remarks>
            If the collection does not support duplicates, this method should
            do nothing if the <paramref name="obj"/> is already contained by
            the collection.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.IGoCollection.Remove(Northwoods.Go.GoObject)">
            <summary>
            Remove an object from this collection.
            </summary>
            <param name="obj">
            A <see cref="T:Northwoods.Go.GoObject"/>.
            </param>
            <remarks>
            If the collection does not support duplicates, this method should
            just make sure the <paramref name="obj"/> is no longer in the
            collection.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.IGoCollection.Contains(Northwoods.Go.GoObject)">
            <summary>
            This predicate should be true when a given object is in this collection.
            </summary>
            <param name="obj">
            A <see cref="T:Northwoods.Go.GoObject"/>.
            </param>
            <returns>
            True if the <paramref name="obj"/> is in the collection; false otherwise.
            </returns>
        </member>
        <member name="M:Northwoods.Go.IGoCollection.Clear">
            <summary>
            Remove all objects from this collection.
            </summary>
        </member>
        <member name="M:Northwoods.Go.IGoCollection.CopyArray">
            <summary>
            Returns a newly allocated array of all of the GoObjects in this collection.
            </summary>
            <remarks>
            This is typically implemented in the following manner:
            <code>
            GoObject[] a = new GoObject[this.Count];
            CopyTo(a, 0);
            return a;
            </code>
            </remarks>
        </member>
        <member name="M:Northwoods.Go.IGoCollection.CopyTo(Northwoods.Go.GoObject[],System.Int32)">
            <summary>
            Provide a type-specific overload of <c>ICollection.CopyTo</c>.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="P:Northwoods.Go.IGoCollection.IsEmpty">
            <summary>
            This predicate is true when there are no objects in this collection.
            </summary>
            <remarks>
            This is equivalent to <c>this.Count == 0</c>, but may be faster, and
            is usually easier to read by the programmer.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.IGoCollection.Backwards">
            <summary>
            Gets an enumerable whose enumerator will iterate over the GoObjects in reverse order.
            </summary>
            <remarks>
            The regular enumerator iterates over the GoObjects in this collection in the forwards order.
            </remarks>
        </member>
        <member name="F:Northwoods.Go.GoGroup.InsertedObject">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoGroup.RemovedObject">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoGroup.ChangedZOrder">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoGroup.ReplacedObject">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoGroup.#ctor">
            <summary>
            The constructor produces a group with no child objects.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoGroup.CopyObject(Northwoods.Go.GoCopyDictionary)">
            <summary>
            Produces a copy of this object within the given copy dictionary.
            </summary>
            <param name="env"></param>
            <returns>
            The copied group with copies of all of its children.
            </returns>
            <remarks>
            This calls <see cref="M:Northwoods.Go.GoGroup.CopyChildren(Northwoods.Go.GoGroup,Northwoods.Go.GoCopyDictionary)"/> to perform the copying.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoObject.CopyObject(Northwoods.Go.GoCopyDictionary)"/>
        </member>
        <member name="M:Northwoods.Go.GoGroup.CopyChildren(Northwoods.Go.GoGroup,Northwoods.Go.GoCopyDictionary)">
            <summary>
            Copy this group's children.
            </summary>
            <param name="newgroup"></param>
            <param name="env"></param>
            <remarks>
            This method is responsible for copying and adding this group's
            child objects to the <paramref name="newgroup"/>.
            By default, this simply calls
            <c>newgroup.Add(env.Copy(obj))</c> for each child <c>obj</c>.
            However, your group subclass may want to keep track of some or all
            of the children for its own purposes.  To that end you can override
            this method to do the copying manually, thereby correctly maintaining
            your subclass's internal pointers to children.
            You probably should not be calling <see cref="T:Northwoods.Go.GoObject"/>'s <see cref="M:Northwoods.Go.GoObject.CopyObject(Northwoods.Go.GoCopyDictionary)"/>,
            but <see cref="T:Northwoods.Go.GoCopyDictionary"/>'s <see cref="M:Northwoods.Go.GoCopyDictionary.Copy(Northwoods.Go.GoObject)"/>
            or indexed lookup instead.
            </remarks>
            <example>
            For example, a group holding an Icon, a Label, an InPort, and an OutPort
            might implement this method as follows:
            <code>
            base.CopyChildren(newgroup, env);
            MyNode newnode = (MyNode)newgroup;
            newnode.myIcon = (GoObject)env[myIcon];
            newnode.myLabel = (GoText)env[myLabel];
            newnode.myInPort = (GoPort)env[myInPort];
            newnode.myOutPort = (GoPort)env[myOutPort];
            </code>
            Note that this indexing use of <see cref="T:Northwoods.Go.GoCopyDictionary"/> can handle null
            references--it returns null.
            </example>
        </member>
        <member name="M:Northwoods.Go.GoGroup.Add(Northwoods.Go.GoObject)">
            <summary>
            Add an object to this group.
            </summary>
            <param name="obj"></param>
            <remarks>
            The <paramref name="obj"/> must not already belong to another group or to a layer.
            If the object already belongs to this group, nothing happens.
            Otherwise, afterwards, the <paramref name="obj"/>'s <see cref="P:Northwoods.Go.GoObject.Parent"/>
            will be this group and its <see cref="P:Northwoods.Go.GoObject.Layer"/> will be the same as this
            group's layer.
            When you add an object to a group, you will normally make that child object
            not <see cref="P:Northwoods.Go.GoObject.Selectable"/>.
            If the child is supposed to be selectable, you need to consider whether users
            can move or copy the child on its own, or whether this parent group should be
            moved or copied instead.  For the latter case you should set the
            <see cref="P:Northwoods.Go.GoObject.DragsNode"/> property to true for each such child, so
            that <see cref="P:Northwoods.Go.GoObject.DraggingObject"/> will return the child's parent node.
            If instead you want to allow selected children to be able to move on their own,
            you should make sure <see cref="M:Northwoods.Go.GoGroup.LayoutChildren(Northwoods.Go.GoObject)"/> does not control the positioning
            of these child objects.
            </remarks>
            <seealso cref="M:Northwoods.Go.IGoCollection.Add(Northwoods.Go.GoObject)"/>
        </member>
        <member name="M:Northwoods.Go.GoGroup.InsertBefore(Northwoods.Go.GoObject,Northwoods.Go.GoObject)">
            <summary>
            Add or move an object to be before an existing child.
            </summary>
            <param name="child"></param>
            <param name="newobj"></param>
            <remarks>
            The children of a group are ordered with respect to each other.
            This method makes the <paramref name="newobj"/> be in the group at the position
            before the <paramref name="child"/>, so that the <paramref name="newobj"/>
            will be painted immediately before the <paramref name="child"/>.
            If the <paramref name="newobj"/> already belonged to this group, only its
            position in the list is changed.
            The <paramref name="newobj"/> must not already be part of a different group or be
            a top-level object in some layer.
            The existing <paramref name="child"/> must be either null or a member of this
            group (but not be the same as <paramref name="newobj"/>).
            If the <paramref name="child"/> is null, the <paramref name="newobj"/>
            is added at the beginning of the list, behind all other objects in this group.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoGroup.InsertAfter(Northwoods.Go.GoObject,Northwoods.Go.GoObject)">
            <summary>
            Add or move an object to be after an existing child.
            </summary>
            <param name="child"></param>
            <param name="newobj"></param>
            <remarks>
            The children of a group are ordered with respect to each other.
            This method makes the <paramref name="newobj"/> be in the group at the position
            after the <paramref name="child"/>, so that the <paramref name="newobj"/>
            will be painted immediately after the <paramref name="child"/>.
            If the <paramref name="newobj"/> already belonged to this group, only its
            position in the list is changed.
            The <paramref name="newobj"/> must not already be part of a different group or be
            a top-level object in some layer.
            The existing <paramref name="child"/> must be either null or a member of this
            group (but not be the same as <paramref name="newobj"/>).
            If the <paramref name="child"/> is null, the <paramref name="newobj"/>
            is added at the end of the list, in front of all other objects in this group.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoGroup.Remove(Northwoods.Go.GoObject)">
            <summary>
            Remove an object from this group.
            </summary>
            <param name="obj"></param>
            <remarks>
            The <paramref name="obj"/> must not belong to a different group.
            This method does nothing if the <paramref name="obj"/> has already been
            removed from this group.
            Afterwards, the <paramref name="obj"/>'s <see cref="P:Northwoods.Go.GoObject.Parent"/> will
            be null and its <see cref="P:Northwoods.Go.GoObject.Layer"/> will also be null, because
            it will be removed from the layer if the group and it belonged to a layer.
            </remarks>
            <seealso cref="M:Northwoods.Go.IGoCollection.Remove(Northwoods.Go.GoObject)"/>
        </member>
        <member name="M:Northwoods.Go.GoGroup.Contains(Northwoods.Go.GoObject)">
            <summary>
            This predicate is true when an object belongs to this group.
            </summary>
            <param name="obj"></param>
            <returns></returns>
            <remarks>
            This predicate is false if the <paramref name="obj"/> is null, or
            if its <see cref="P:Northwoods.Go.GoObject.Parent"/> is not this group.
            </remarks>
            <seealso cref="M:Northwoods.Go.IGoCollection.Contains(Northwoods.Go.GoObject)"/>
        </member>
        <member name="M:Northwoods.Go.GoGroup.Clear">
            <summary>
            Remove all children from this group.
            </summary>
            <remarks>
            This repeatedly calls <see cref="M:Northwoods.Go.GoGroup.Remove(Northwoods.Go.GoObject)"/>.
            The default implementation tries to avoid duplicate removals,
            in case removing one object automatically removes another one.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoGroup.CopyArray">
            <summary>
            Returnss a newly allocated array of all of the immediate child objects in this group.
            </summary>
            <seealso cref="M:Northwoods.Go.IGoCollection.CopyArray"/>
        </member>
        <member name="M:Northwoods.Go.GoGroup.Add(System.Object)">
            <summary>
            Implement the <c>IList</c> method, which just calls <see cref="M:Northwoods.Go.GoGroup.Add(Northwoods.Go.GoObject)"/>.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.GoGroup.Contains(System.Object)">
            <summary>
            Implement the <c>IList</c> method, which just calls <see cref="M:Northwoods.Go.GoGroup.Contains(Northwoods.Go.GoObject)"/>.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.GoGroup.IndexOf(System.Object)">
            <summary>
            Implement the <c>IList</c> method.
            </summary>
            <param name="obj"></param>
            <returns>the non-negative position in the array, or -1 if not present</returns>
        </member>
        <member name="M:Northwoods.Go.GoGroup.IndexOf(Northwoods.Go.GoObject)">
            <summary>
            Provide a <see cref="T:Northwoods.Go.GoObject"/>-specific implementation of IndexOf.
            </summary>
            <param name="obj"></param>
            <returns>the non-negative position in the array, or -1 if not present</returns>
        </member>
        <member name="M:Northwoods.Go.GoGroup.Insert(System.Int32,System.Object)">
            <summary>
            Implement the <c>IList</c> method, which just calls <see cref="M:Northwoods.Go.GoGroup.Insert(System.Int32,Northwoods.Go.GoObject)"/>
            </summary>
            <param name="index"></param>
            <param name="obj"></param>
        </member>
        <member name="M:Northwoods.Go.GoGroup.Insert(System.Int32,Northwoods.Go.GoObject)">
            <summary>
            Provide a <see cref="T:Northwoods.Go.GoObject"/>-specific implementation of Insert,
            which just calls <see cref="M:Northwoods.Go.GoGroup.Add(Northwoods.Go.GoObject)"/> or <see cref="M:Northwoods.Go.GoGroup.InsertBefore(Northwoods.Go.GoObject,Northwoods.Go.GoObject)"/>.
            </summary>
            <param name="index"></param>
            <param name="obj"></param>
        </member>
        <member name="M:Northwoods.Go.GoGroup.Remove(System.Object)">
            <summary>
            Implement the <c>IList</c> method, which just calls <see cref="M:Northwoods.Go.GoGroup.Remove(Northwoods.Go.GoObject)"/>.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Northwoods.Go.GoGroup.RemoveAt(System.Int32)">
            <summary>
            Implement the <c>IList</c> method, which just calls <see cref="M:Northwoods.Go.GoGroup.Remove(Northwoods.Go.GoObject)"/>.
            </summary>
            <param name="index"></param>
        </member>
        <member name="M:Northwoods.Go.GoGroup.CopyTo(System.Array,System.Int32)">
            <summary>
            Copy references to this group's immediate children into the given array.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Northwoods.Go.GoGroup.CopyTo(Northwoods.Go.GoObject[],System.Int32)">
            <summary>
            Copy references to this group's immediate children into the given array.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Northwoods.Go.GoGroup.GetEnumerator">
            <summary>
            Get an enumerator for iterating over the group's children, starting with
            the first child, which is painted behind all other children in the group.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.GoGroup.Paint(System.Drawing.Graphics,Northwoods.Go.GoView)">
            <summary>
            Painting a group just paints all of its children.
            </summary>
            <param name="g"></param>
            <param name="view"></param>
            <remarks>
            This method paints first the first child in the group's ordered list.
            This calls <see cref="M:Northwoods.Go.GoObject.CanView"/> to decide if the child
            should be painted.
            When <see cref="P:Northwoods.Go.GoView.IsPrinting"/> is true, it calls
            <see cref="M:Northwoods.Go.GoObject.CanPrint"/> instead of <see cref="M:Northwoods.Go.GoObject.CanView"/>
            to decide about calling <see cref="M:Northwoods.Go.GoObject.Paint(System.Drawing.Graphics,Northwoods.Go.GoView)"/>.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoObject.Paint(System.Drawing.Graphics,Northwoods.Go.GoView)"/>
        </member>
        <member name="M:Northwoods.Go.GoGroup.ExpandPaintBounds(System.Drawing.RectangleF,Northwoods.Go.GoView)">
            <summary>
            The expanded paint bounds for a group is just the union of expanded
            paint bounds for all of its children.
            </summary>
            <param name="rect"></param>
            <param name="view"></param>
            <returns></returns>
            <seealso cref="M:Northwoods.Go.GoObject.ExpandPaintBounds(System.Drawing.RectangleF,Northwoods.Go.GoView)"/>
        </member>
        <member name="M:Northwoods.Go.GoGroup.ContainsPoint(Northwoods.Go.PointF)">
            <summary>
            A group contains a point if any of its visible children contain that point.
            </summary>
            <param name="p">
            A <c>PointF</c> in document coordinates.
            </param>
            <returns></returns>
            <seealso cref="M:Northwoods.Go.GoObject.ContainsPoint(Northwoods.Go.PointF)"/>
        </member>
        <member name="M:Northwoods.Go.GoGroup.GetNearestIntersectionPoint(Northwoods.Go.PointF,Northwoods.Go.PointF,Northwoods.Go.PointF@)">
            <summary>
            A group's closest intersection point with a line is the closest such
            point among all of the visible children.
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="result"></param>
            <returns></returns>
            <remarks>
            Currently, this means that a point on a child object that does not
            intersect the line from <paramref name="p1"/> to <paramref name="p2"/>
            may be closer than a point on some other child that actually does
            intersect the line.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoGroup.Pick(Northwoods.Go.PointF,System.Boolean)">
            <summary>
            Picking a group first tries to pick a child, starting with
            the last one which is most in front.
            </summary>
            <param name="p"></param>
            <param name="selectableOnly"></param>
            <returns></returns>
            <seealso cref="M:Northwoods.Go.GoObject.Pick(Northwoods.Go.PointF,System.Boolean)"/>
        </member>
        <member name="M:Northwoods.Go.GoGroup.ComputeBounds">
            <summary>
            The bounding rectangle of a group is just the union of the bounds of its children.
            </summary>
            <returns></returns>
            <seealso cref="M:Northwoods.Go.GoObject.ComputeBounds"/>
        </member>
        <member name="M:Northwoods.Go.GoGroup.OnBoundsChanged(System.Drawing.RectangleF)">
            <summary>
            Provides default behavior, assuming all children are already correctly
            placed and sized, and only need to be moved and/or scaled to fit the
            new bounds of this GoGroup.
            </summary>
            <param name="old"></param>
            <remarks>
            The default behavior, if the size did not change, is just to call
            <see cref="M:Northwoods.Go.GoGroup.MoveChildren(System.Drawing.RectangleF)"/>.
            If the size did change, we call <see cref="M:Northwoods.Go.GoGroup.RescaleChildren(System.Drawing.RectangleF)"/>
            to rescale and proportionally reposition all of the children, and
            then we call <see cref="M:Northwoods.Go.GoGroup.LayoutChildren(Northwoods.Go.GoObject)"/> to give the node a chance
            to do special positioning of any of the children.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoObject.OnBoundsChanged(System.Drawing.RectangleF)"/>
        </member>
        <member name="M:Northwoods.Go.GoGroup.OnChildBoundsChanged(Northwoods.Go.GoObject,System.Drawing.RectangleF)">
            <summary>
            Called after a child of this group has had its bounds changed.
            </summary>
            <param name="child">
            The child object whose <see cref="P:Northwoods.Go.GoObject.Bounds"/> were changed.
            </param>
            <param name="old">
            A <c>RectangleF</c> in document coordinates holding the child's previous bounds.
            </param>
            <remarks>
            By default this method just calls <see cref="M:Northwoods.Go.GoGroup.LayoutChildren(Northwoods.Go.GoObject)"/>,
            thus giving the group a chance to adjust to the changed bounds of
            one of its children by moving and/or resizing the other children.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoGroup.OnChildBoundsChanged(Northwoods.Go.GoObject,System.Drawing.RectangleF)"/>
        </member>
        <member name="M:Northwoods.Go.GoGroup.MoveChildren(System.Drawing.RectangleF)">
            <summary>
            This just moves all the children from the group's former location.
            </summary>
            <param name="old">
            The original bounds, in document coordinates.
            </param>
        </member>
        <member name="M:Northwoods.Go.GoGroup.RescaleChildren(System.Drawing.RectangleF)">
            <summary>
            This handles the general case of a resize by scaling and repositioning all the children.
            </summary>
            <param name="old">
            The original bounds, in document coordinates.
            </param>
            <remarks>
            Any children whose <see cref="P:Northwoods.Go.GoObject.AutoRescales"/> property is false is not
            resized and repositioned.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoGroup.LayoutChildren(Northwoods.Go.GoObject)">
            <summary>
            Reposition this group's children to achieve a particular appearance.
            </summary>
            <param name="childchanged"></param>
            <remarks>
            By default this method does nothing.
            However, this method is frequently overridden.
            For more objects that may have many children, overrides will often
            check the <see cref="P:Northwoods.Go.GoObject.Initializing"/> flag.  If true, this method
            usually does nothing; later when all the changes have been performed is
            that flag set to false and this method is called explicitly.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoGroup.ChangeValue(Northwoods.Go.GoChangedEventArgs,System.Boolean)">
            <summary>
            Performs changes for undo and redo.
            </summary>
            <seealso cref="M:Northwoods.Go.GoObject.ChangeValue(Northwoods.Go.GoChangedEventArgs,System.Boolean)"/>
        </member>
        <member name="P:Northwoods.Go.GoGroup.First">
            <summary>
            Gets the first child object of this group.
            </summary>
            <value>
            The value may be null if this group is empty.
            </value>
            <remarks>
            The first object will appear behind all other objects in this group.
            </remarks>
            <seealso cref="P:Northwoods.Go.GoGroup.Last"/>.
        </member>
        <member name="P:Northwoods.Go.GoGroup.Last">
            <summary>
            Gets the last child object of this group.
            </summary>
            <value>
            The value may be null if this group is empty.
            </value>
            <remarks>
            The last object will appear in front of all other objects in this group.
            </remarks>
            <seealso cref="P:Northwoods.Go.GoGroup.First"/>.
        </member>
        <member name="P:Northwoods.Go.GoGroup.IsEmpty">
            <summary>
            This predicate is true when there are no objects in this group.
            </summary>
            <seealso cref="P:Northwoods.Go.IGoCollection.IsEmpty"/>
        </member>
        <member name="P:Northwoods.Go.GoGroup.IsFixedSize">
            <summary>
            Implement the <c>IList</c> property.
            </summary>
            <value>
            This defaults to false.
            </value>
        </member>
        <member name="P:Northwoods.Go.GoGroup.IsReadOnly">
            <summary>
            Implement the <c>IList</c> property.
            </summary>
            <value>
            This defaults to false.
            </value>
        </member>
        <member name="P:Northwoods.Go.GoGroup.System#Collections#IList#Item(System.Int32)">
            <summary>
            Implement the <c>IList</c> indexed property, which just uses the
            <see cref="T:Northwoods.Go.GoObject"/> type-specific indexed property.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoGroup.Item(System.Int32)">
            <summary>
            This <c>IList</c> indexed property gets or sets the object at
            a position in the group's array of children.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoGroup.Count">
            <summary>
            Gets the number of child objects in this group.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoGroup.IsSynchronized">
            <summary>
            Gets whether this collection of child objects is thread-safe.
            </summary>
            <value>
            This defaults to false.
            </value>
        </member>
        <member name="P:Northwoods.Go.GoGroup.SyncRoot">
            <summary>
            Gets an object to be used for synchronizing access to this collection.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoGroup.Backwards">
            <summary>
            Gets an enumerable whose enumerator will iterate over the group's child GoObjects in reverse order,
            starting with the last child, which is painted in front of all other children in the group.
            </summary>
            <seealso cref="P:Northwoods.Go.IGoCollection.Backwards"/>
        </member>
        <member name="T:Northwoods.Go.GoGroupEnumerator">
            <summary>
            Iterate over the immediate child objects of this group, either forwards or backwards.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoGroupEnumerator.GetEnumerator">
            <summary>
            Gets an enumerator for iterating over the child GoObjects of this group.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoGroupEnumerator.MoveNext">
            <summary>
            Advance the enumerator to the next child GoObject.
            </summary>
            <returns>True if there is a next GoObject; false if it has finished iterating over the collection.</returns>
        </member>
        <member name="M:Northwoods.Go.GoGroupEnumerator.Reset">
            <summary>
            Reset the enumerator to its original position.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoGroupEnumerator.Current">
            <summary>
             Gets the current object in the group.
            </summary>
        </member>
        <member name="T:Northwoods.Go.GoHandleStyle">
            <summary>
            Specifies the shape of the handle.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoHandleStyle.Rectangle">
            <summary>
            An appearance style for <see cref="T:Northwoods.Go.GoHandle"/>
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoHandleStyle.Ellipse">
            <summary>
            An appearance style for <see cref="T:Northwoods.Go.GoHandle"/>
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoHandleStyle.Diamond">
            <summary>
            An appearance style for <see cref="T:Northwoods.Go.GoHandle"/>
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoHandleStyle.TriangleTopLeft">
            <summary>
            An appearance style for <see cref="T:Northwoods.Go.GoHandle"/>: a triangle with a point at the TopLeft.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoHandleStyle.TriangleTopRight">
            <summary>
            An appearance style for <see cref="T:Northwoods.Go.GoHandle"/>: a triangle with a point at the TopRight.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoHandleStyle.TriangleBottomRight">
            <summary>
            An appearance style for <see cref="T:Northwoods.Go.GoHandle"/>: a triangle with a point at the BottomRight.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoHandleStyle.TriangleBottomLeft">
            <summary>
            An appearance style for <see cref="T:Northwoods.Go.GoHandle"/>: a triangle with a point at the BottomLeft.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoHandleStyle.TriangleMiddleTop">
            <summary>
            An appearance style for <see cref="T:Northwoods.Go.GoHandle"/>: a triangle with a point at the MiddleTop.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoHandleStyle.TriangleMiddleRight">
            <summary>
            An appearance style for <see cref="T:Northwoods.Go.GoHandle"/>: a triangle with a point at the MiddleRight.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoHandleStyle.TriangleMiddleBottom">
            <summary>
            An appearance style for <see cref="T:Northwoods.Go.GoHandle"/>: a triangle with a point at the MiddleBottom.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoHandleStyle.TriangleMiddleLeft">
            <summary>
            An appearance style for <see cref="T:Northwoods.Go.GoHandle"/>: a triangle with a point at the MiddleLeft.
            </summary>
        </member>
        <member name="T:Northwoods.Go.GoHandle">
            <summary>
            This class is used to show that a document object is selected by
            decorating the object with handles that are added to a view layer.
            </summary>
            <remarks>
            Instances of this class are assumed only to be used in <see cref="T:Northwoods.Go.GoView"/>
            layers, not as part of a <see cref="T:Northwoods.Go.GoDocument"/>.  Thus they do not
            participate in undo/redo nor can they be selected.
            </remarks>
        </member>
        <member name="T:Northwoods.Go.IGoHandle">
            <summary>
            This interface specifies the properties used by <see cref="T:Northwoods.Go.GoSelection"/>
            for displaying selection handles, normally implemented by <see cref="T:Northwoods.Go.GoHandle"/>.
            </summary>
        </member>
        <member name="P:Northwoods.Go.IGoHandle.GoObject">
            <summary>
            Gets the object being used to implement the handle's visual representation.
            </summary>
        </member>
        <member name="P:Northwoods.Go.IGoHandle.HandleID">
            <summary>
            Gets or sets an identifier for this handle.
            </summary>
            <remarks>
            Since an object may get many handles when selected, this property
            provides a means of distinguishing them.
            </remarks>
            <seealso cref="T:Northwoods.Go.GoSelection"/>
        </member>
        <member name="P:Northwoods.Go.IGoHandle.SelectedObject">
            <summary>
            Gets or sets the selected object for this handle.
            </summary>
            <remarks>
            This value should be contained by a <see cref="T:Northwoods.Go.GoSelection"/>.
            </remarks>
            <seealso cref="P:Northwoods.Go.IGoHandle.HandledObject"/>
        </member>
        <member name="P:Northwoods.Go.IGoHandle.HandledObject">
            <summary>
            Gets the object that actually gets the handles.
            </summary>
            <remarks>
            This should be the same as <c>SelectedObject.SelectionObject</c>.
            </remarks>
            <seealso cref="P:Northwoods.Go.IGoHandle.SelectedObject"/>
            <seealso cref="!:GoObject.SelectionObject"/>
        </member>
        <member name="M:Northwoods.Go.GoHandle.#ctor">
            <summary>
            The constructor produces a rectangular handle whose <see cref="P:Northwoods.Go.GoHandle.HandleID"/> is
            <see cref="!:GoObject.NoHandle"/> and that has zero width and height.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoHandle.CopyObject(Northwoods.Go.GoCopyDictionary)">
            <summary>
            We never expect to copy handles.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoHandle.Paint(System.Drawing.Graphics,Northwoods.Go.GoView)">
            <summary>
            Draw this handle according to the handle's style.
            </summary>
            <param name="g"></param>
            <param name="view"></param>
            <remarks>
            Handles never have shadows, but their outlines and fills
            can be specified by the <see cref="P:Northwoods.Go.GoShape.Pen"/> and
            <see cref="P:Northwoods.Go.GoShape.Brush"/> properties.
            Hollow handles (those with a <see cref="!:GoObject.NoHandle"/>
            <see cref="P:Northwoods.Go.GoHandle.HandleID"/>), should have no <see cref="P:Northwoods.Go.GoShape.Brush"/>.
            </remarks>
            <seealso cref="!:GoObject.Paint"/>
        </member>
        <member name="M:Northwoods.Go.GoHandle.ContainsPoint(Northwoods.Go.PointF)">
            <summary>
            Determines if the given point is inside this handle's bounds.
            </summary>
            <param name="p">
            A <c>PointF</c> value in document coordinates.
            </param>
            <returns>
            True if the point is considered "on" the handle.
            </returns>
            <remarks>
            This assumes that handles are actually hollow when the
            <see cref="P:Northwoods.Go.GoHandle.HandleID"/> is <see cref="!:GoObject.NoHandle"/>--
            that is, a point well inside the handle's bounds is
            not considered "on" the handle if the handle's ID is
            <see cref="!:GoObject.NoHandle"/>.  This is useful for
            letting bounding handles be ignored by mouse over behavior.
            Note that this method does not take the <see cref="P:Northwoods.Go.GoHandle.Style"/>
            into account--it assumes the handle is rectangular.
            </remarks>
            <seealso cref="!:GoObject.ContainsPoint"/>
        </member>
        <member name="M:Northwoods.Go.GoHandle.AddSelectionHandles(Northwoods.Go.GoSelection,Northwoods.Go.GoObject)">
            <summary>
            Handles should never be selected, so they should not get their own selection handles.
            </summary>
            <param name="sel"></param>
            <param name="selectedObj"></param>
        </member>
        <member name="P:Northwoods.Go.GoHandle.GoObject">
            <summary>
            Gets the object being used to implement the handle's visual representation.
            </summary>
            <seealso cref="P:Northwoods.Go.IGoHandle.GoObject"/>
        </member>
        <member name="P:Northwoods.Go.GoHandle.HandleID">
            <summary>
            Gets or sets an identifier for this handle.
            </summary>
            <value>
            The default identifier is <see cref="!:GoObject.NoHandle"/>.
            </value>
            <remarks>
            Because handles are only used in views, setting this
            property is not tracked by the undo/redo mechanism.
            </remarks>
            <seealso cref="P:Northwoods.Go.IGoHandle.HandleID"/>
        </member>
        <member name="P:Northwoods.Go.GoHandle.SelectedObject">
            <summary>
            Gets or sets the selected object for this handle.
            </summary>
            <remarks>
            Because handles are only used in views, setting this
            property is not tracked by the undo/redo mechanism.
            </remarks>
            <seealso cref="P:Northwoods.Go.IGoHandle.SelectedObject"/>
            <seealso cref="T:Northwoods.Go.GoSelection"/>
        </member>
        <member name="P:Northwoods.Go.GoHandle.HandledObject">
            <summary>
            Gets the object that actually gets the handles.
            </summary>
            <seealso cref="P:Northwoods.Go.IGoHandle.HandledObject"/>
            <seealso cref="!:GoObject.AddSelectionHandles"/>
            <remarks>
            This is the <see cref="P:Northwoods.Go.GoHandle.SelectedObject"/>'s <see cref="!:GoObject.SelectionObject"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoHandle.Style">
            <summary>
            Gets or sets the appearance style for this handle.
            </summary>
            <value>
            The default style is <see cref="F:Northwoods.Go.GoHandleStyle.Rectangle"/>
            </value>
            <remarks>
            Normally, bounding handles are open rectangles that go
            around the handled object, and resize handles are small
            rectangles that are filled with a selection color.
            Because handles are only used in views, setting this
            property is not tracked by the undo/redo mechanism.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoHandle.SelectionObject">
            <summary>
            Handles should never be selected, so they have no SelectionObject.
            </summary>
        </member>
        <member name="T:Northwoods.Go.GoHexagonReshapeBehavior">
            <summary>
            Specifies the resize behavior of a GoHexagon.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoHexagonReshapeBehavior.FreeForm">
            <summary>
            A resize behavior for <see cref="T:Northwoods.Go.GoHexagon"/>
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoHexagonReshapeBehavior.CrosswiseSymmetry">
            <summary>
            A resize behavior for <see cref="T:Northwoods.Go.GoHexagon"/>
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoHexagonReshapeBehavior.LengthwiseSymmetry">
            <summary>
            A resize behavior for <see cref="T:Northwoods.Go.GoHexagon"/>
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoHexagonReshapeBehavior.CompleteSymmetry">
            <summary>
            A resize behavior for <see cref="T:Northwoods.Go.GoHexagon"/>
            </summary>
        </member>
        <member name="T:Northwoods.Go.GoHexagon">
            <summary>
            An object with six sides which has one pair of parallel sides.
            </summary>
            <remarks>
            If you need a six-sided shape without the constraints that this class
            imposes, use <see cref="T:Northwoods.Go.GoPolygon"/> instead.
            You may find that this class is useful for implementing pentagonal
            shapes where three adjacent sides form two right angles.
            </remarks>
        </member>
        <member name="F:Northwoods.Go.GoHexagon.ChangedDistanceLeft">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoHexagon.ChangedDistanceRight">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoHexagon.ChangedDistanceTop">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoHexagon.ChangedDistanceBottom">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoHexagon.ChangedOrientation">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoHexagon.ChangedReshapeBehavior">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoHexagon.ChangedReshapableCorner">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoHexagon.LeftTopSideHandleID">
            <summary>
            A special handle ID for a handle which controls the variable corner length.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoHexagon.RightBottomSideHandleID">
            <summary>
            A special handle ID for a handle which controls the location of the tips.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoHexagon.LeftTopPointHandleID">
            <summary>
            A special handle ID for a handle which controls the variable corner length.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoHexagon.RightBottomPointHandleID">
            <summary>
            A special handle ID for a handle which controls the location of the tips.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoHexagon.ChangedKeepsLengthwiseSymmetry">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoHexagon.ChangedKeepsCrosswiseSymmetry">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoHexagon.#ctor">
            <summary>
            The constructor produces a hexagon with a standard black <see cref="P:Northwoods.Go.GoShape.Pen"/>
            outline, no <see cref="T:System.Drawing.Brush"/> fill, <see cref="!:Orientation.Vertical"/>,
            and default distance dimensions.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoHexagon.CopyObject(Northwoods.Go.GoCopyDictionary)">
            <summary>
            Make sure the cloned hexagon does not share any internal data references with the
            original one.
            </summary>
            <param name="env"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.GoHexagon.Paint(System.Drawing.Graphics,Northwoods.Go.GoView)">
            <summary>
            Paint a possibly shadowed Hexagon.
            </summary>
            <param name="g"></param>
            <param name="view"></param>
        </member>
        <member name="M:Northwoods.Go.GoHexagon.ContainsPoint(Northwoods.Go.PointF)">
            <summary>
            Consider the actual shape of the hexagon to determine
            if a given point is inside.
            </summary>
            <param name="p"></param>
            <returns></returns>
            <remarks>
            Currently this does not take the pen width into account.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoHexagon.GetNearestIntersectionPoint(Northwoods.Go.PointF,Northwoods.Go.PointF,Northwoods.Go.PointF@)">
            <summary>
            The closest point of a hexagon that intersects with a given line
            is the closest such point of each of its six line segments.
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.GoHexagon.DoResize(Northwoods.Go.GoView,System.Drawing.RectangleF,Northwoods.Go.PointF,System.Int32,Northwoods.Go.GoInputState,System.Drawing.SizeF,System.Drawing.SizeF)">
            <summary>
            Support either allowing the user to move a corner control handle,
            or treating the hexagon as a whole object, maintaining either or
            both kinds of symmetry.
            </summary>
            <param name="view"></param>
            <param name="origRect"></param>
            <param name="newPoint"></param>
            <param name="whichHandle"></param>
            <param name="evttype"></param>
            <param name="min"></param>
            <param name="max"></param>
        </member>
        <member name="M:Northwoods.Go.GoHexagon.AddSelectionHandles(Northwoods.Go.GoSelection,Northwoods.Go.GoObject)">
            <summary>
            If <see cref="M:Northwoods.Go.GoObject.CanReshape"/> and <see cref="P:Northwoods.Go.GoHexagon.ReshapableCorner"/>
            are true, this supports corner control handles.
            </summary>
            <param name="sel"></param>
            <param name="selectedObj"></param>
        </member>
        <member name="M:Northwoods.Go.GoHexagon.DetermineReshapeBehavior(System.Boolean@,System.Boolean@)">
            <summary>
            
            </summary>
            <param name="cross"></param>
            <param name="length"></param>
        </member>
        <member name="M:Northwoods.Go.GoHexagon.ChangeValue(Northwoods.Go.GoChangedEventArgs,System.Boolean)">
            <summary>
            Handle this class's property changes for undo and redo
            </summary>
            <param name="e"></param>
            <param name="undo"></param>
        </member>
        <member name="P:Northwoods.Go.GoHexagon.Bounds">
            <summary>
            Whenever the size and/or position is changed, we need to recalculate the
            path which defines the hexagon.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoHexagon.DistanceLeft">
             <summary>
             The distance between the left/top point and the Hexagon's left border.
             </summary>
             <value>
             This defaults to 10.
             A negative number yields a concave figure. 
            </value>
        </member>
        <member name="P:Northwoods.Go.GoHexagon.DistanceRight">
            <summary>
            The distance between the right/bottom point and the Hexagon's right border.
            </summary>
            <value>
            This defaults to 10.
            A negative number yields a concave figure.
            </value>
        </member>
        <member name="P:Northwoods.Go.GoHexagon.DistanceTop">
            <summary>
            The distance between the left/top point and the Hexagon's top border.
            </summary>
            <value>
            This defaults to 10.
            A negative number yields a concave figure.
            </value>
        </member>
        <member name="P:Northwoods.Go.GoHexagon.DistanceBottom">
            <summary>
            The distance between the right/bottom point and the Hexagon's bottom border.
            </summary>
            <value>
            This defaults to 10.
            A negative number yields a concave figure.
            </value>
        </member>
        <member name="P:Northwoods.Go.GoHexagon.Orientation">
            <summary>
            Gets or sets how to draw the hexagon, based on whether its
            prominent pair of verticies point vertically or horizontally.
            </summary>
            <value>
            This defaults to <c>"Orientation.Horizontal"</c>.
            </value>
        </member>
        <member name="P:Northwoods.Go.GoHexagon.ReshapeBehavior">
            <summary>
            Determines the resize behavior when the user manipulates
            the resize handles.
            </summary>
            <value>
            This defaults to <c>GoHexagonResizeBehavior.FreeForm</c>.
            </value>
            <remarks>
            Note, however, that the actual resize behavior is constrained by the
            <see cref="P:Northwoods.Go.GoHexagon.KeepsLengthwiseSymmetry"/> and <see cref="P:Northwoods.Go.GoHexagon.KeepsCrosswiseSymmetry"/>
            properties.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoHexagon.KeepsLengthwiseSymmetry">
            Gets or sets whether to maintain the lengthwise distances at one half the crosswise bounds size member.
            (eg. Orientation == Orientation.Horizontal;
                 DistanceTop = Bounds.Height/2; DistanceBottom = Bounds.Height/2)
            <summary>
            Gets or sets whether to maintain symmetry in respect to the lengthwise axis.
            </summary>
            <value>
            This defaults to true.
            </value>
        </member>
        <member name="P:Northwoods.Go.GoHexagon.KeepsCrosswiseSymmetry">
            Gets or sets whether to maintain the crosswise distances equal to each other and
            the crosswise distances equal to each other.
            (eg. Orientation == Orientation.Horizontal;
                 DistanceTop = Bounds.Height/2; DistanceBottom = Bounds.Height/2)
            <summary>
            Gets or sets whether to maintain symmetry in respect to the crosswise axis.
            </summary>
            <value>
            This defaults to true.
            </value>
        </member>
        <member name="P:Northwoods.Go.GoHexagon.ReshapableCorner">
            <summary>
            Gets or sets whether to add the corner reshaping handles.
            </summary>
            <value>
            This defaults to true.
            </value>
        </member>
        <member name="T:Northwoods.Go.GoImage">
            <summary>
            An object that displays a image such as a bitmap or JPEG file.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoImage.ChangedImage">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoImage.ChangedResourceManager">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoImage.ChangedName">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoImage.ChangedAlignment">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoImage.ChangedAutoResizes">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoImage.ChangedImageList">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoImage.ChangedIndex">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoImage.#ctor">
            <summary>
            The constructor produces an image that is not reshapable by
            the user and that automatically recalculates its size when the
            <c>Image</c> is replaced.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoImage.LoadImage">
            <summary>
            This method is responsible for getting an Image.
            </summary>
            <returns>
            An <c>Image</c>.
            </returns>
            <remarks>
            The normal behavior is to try to use the <see cref="P:Northwoods.Go.GoImage.Index"/>
            value, if non-negative, to find an Image in the <see cref="P:Northwoods.Go.GoImage.ImageList"/>.
            If there is no ImageList, we try using the <see cref="P:Northwoods.Go.GoImage.DefaultImageList"/>.
            If the index value is negative, we use the <see cref="P:Northwoods.Go.GoImage.Name"/>
            to get an Image object from the <see cref="P:Northwoods.Go.GoImage.ResourceManager"/>.
            If there is no ResourceManager, we try using the
            <see cref="P:Northwoods.Go.GoImage.DefaultResourceManager"/>, and if that fails, we
            try treating the name as a filename.
            The resulting Image is normally cached by this object as the
            <see cref="P:Northwoods.Go.GoImage.Image"/> property.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoImage.SetSizeKeepingLocation(System.Drawing.SizeF)">
            <summary>
            This method can be called to change the size of this object without
            changing its location.
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:Northwoods.Go.GoImage.Paint(System.Drawing.Graphics,Northwoods.Go.GoView)">
            <summary>
            Draw this Image within the bounds of this object.
            </summary>
            <param name="g"></param>
            <param name="view"></param>
            <remarks>
            If the value of <see cref="P:Northwoods.Go.GoImage.Image"/> is null and the value
            of <see cref="P:Northwoods.Go.GoImage.Index"/> is non-negative, we try to draw an <c>Image</c>
            from the view's <see cref="P:Northwoods.Go.GoView.ImageList"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoImage.ExpandPaintBounds(System.Drawing.RectangleF,Northwoods.Go.GoView)">
            <summary>
            Consider any shadow when calculating the actual paint bounds.
            </summary>
            <param name="rect"></param>
            <param name="view"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.GoImage.ChangeValue(Northwoods.Go.GoChangedEventArgs,System.Boolean)">
            <summary>
            Performs changes for undo and redo.
            </summary>
            <seealso cref="M:Northwoods.Go.GoObject.ChangeValue(Northwoods.Go.GoChangedEventArgs,System.Boolean)"/>
        </member>
        <member name="P:Northwoods.Go.GoImage.Image">
            <summary>
            The Image displayed by this GoImage.
            </summary>
            <value>
            If set to null, the next get will call <see cref="M:Northwoods.Go.GoImage.LoadImage"/>.
            </value>
            <remarks>
            <para>
            <see cref="M:Northwoods.Go.GoImage.Paint(System.Drawing.Graphics,Northwoods.Go.GoView)"/> will draw the Image that is the value of this property.
            When an Image is not yet available, it calls <see cref="M:Northwoods.Go.GoImage.LoadImage"/>
            and remembers that returned Image as this property's value.
            The cached Image value is not serialized.
            </para>
            <para>
            When the <see cref="P:Northwoods.Go.GoImage.Index"/> is non-negative, the Image will be taken
            from an ImageList, which is supplied by <see cref="P:Northwoods.Go.GoImage.ImageList"/>.
            If that property is null, then this <c>Image</c> property will be
            null too.  But this object will be able to paint an image if the
            <see cref="P:Northwoods.Go.GoView.ImageList"/> is non-null and has an Image at that index.
            The value will also be null if the index is not less
            than the number of images in the <see cref="P:Northwoods.Go.GoImage.ImageList"/>.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoImage.ResourceManager">
            <summary>
            Gets or sets the ResourceManager used to look up and load images by Name.
            </summary>
            <value>
            When this value is changed, any cached Image is forgotten so that it can be
            reloaded from the new ResourceManager by <see cref="M:Northwoods.Go.GoImage.LoadImage"/>.
            </value>
            <remarks>
            The ResourceManager is not serialized; after deserialization, you will
            need to reset this property.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoImage.ImageList">
            <summary>
            Gets or sets the ImageList used to hold images from which one is chosen by index.
            </summary>
            <value>
            When this value is changed, any cached Image is forgotten so that it can be
            redrawn from the new ImageList by <see cref="M:Northwoods.Go.GoImage.Paint(System.Drawing.Graphics,Northwoods.Go.GoView)"/>.
            </value>
            <remarks>
            The ImageList is not serialized; after deserialization, you will need to
            reset this property.
            If you modify the ImageList's collection of Images to replace an Image that
            a GoImage has already loaded, you will need to reset this <see cref="P:Northwoods.Go.GoImage.Image"/>
            property by setting it to null.
            </remarks>
            <seealso cref="P:Northwoods.Go.GoImage.Index"/>
        </member>
        <member name="P:Northwoods.Go.GoImage.Index">
            <summary>
            Gets or sets the index of the image in an ImageList.
            </summary>
            <value>
            This zero-based value is an index into an ImageList.
            The default value is <c>-1</c>, indicating no image in any ImageList.
            </value>
            <remarks>
            If this value is non-negative, the image will come from the
            <see cref="P:Northwoods.Go.GoImage.ImageList"/> value, assuming it is within the bounds
            of the ImageList's collection of Images.
            If this value is non-negative but <see cref="P:Northwoods.Go.GoImage.ImageList"/>
            is null, this object will try to draw using the view's ImageList,
            <see cref="P:Northwoods.Go.GoView.ImageList"/>, if any.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoImage.Name">
            <summary>
            Gets or sets the resource name or filename for loading images.
            </summary>
            <value>
            A null value causes <see cref="M:Northwoods.Go.GoImage.LoadImage"/> to avoid looking for
            an image in a <c>ResourceManager</c> or as a file.
            </value>
            <remarks>
            When this value is changed, any cached Image is forgotten so that it can be
            reloaded from the ResourceManager, if any, or from the file system.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoImage.Location">
            <summary>
            The natural location depends on this object's Alignment.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoImage.Alignment">
            <summary>
            Gets or sets the alignment for the image, which governs its <see cref="P:Northwoods.Go.GoImage.Location"/>.
            </summary>
            <value>
            The default value is <see cref="F:Northwoods.Go.GoObject.TopLeft"/>.
            </value>
        </member>
        <member name="P:Northwoods.Go.GoImage.AutoResizes">
            <summary>
            Gets or sets whether the bounds are recalculated when the image changes.
            </summary>
            <value>
            The default value is true.
            </value>
        </member>
        <member name="P:Northwoods.Go.GoImage.DefaultImageList">
            <summary>
            Gets or sets the static/shared ImageList for newly constructed GoImage objects.
            </summary>
            <value>
            The initial value is null--no ImageList is used for any <see cref="M:Northwoods.Go.GoImage.LoadImage"/>
            calls unless the <see cref="P:Northwoods.Go.GoImage.ImageList"/> property is set for a given
            <c>GoImage</c> object.
            </value>
        </member>
        <member name="P:Northwoods.Go.GoImage.DefaultResourceManager">
            <summary>
            Gets or sets the static/shared ResourceManager for newly constructed GoImage objects.
            </summary>
            <value>
            The initial value is null--no ResourceManager is used for any <see cref="M:Northwoods.Go.GoImage.LoadImage"/>
            calls unless the <see cref="P:Northwoods.Go.GoImage.ResourceManager"/> property is set for a given
            <c>GoImage</c> object.
            </value>
        </member>
        <member name="T:Northwoods.Go.PointF">
            <summary>
            This structure holds single-floating point values for an (X,Y) position, normally in document coordinates.
            </summary>
            <remarks>
            This is just a partial implementation of the <c>System.Drawing.PointF</c> structure
            for source code compatibility when using GoDiagram Pocket as well as GoDiagram Win.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.PointF.#ctor(System.Single,System.Single)">
            <summary>
            Construct a PointF given X and Y values.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
        </member>
        <member name="M:Northwoods.Go.PointF.Equals(System.Object)">
            <summary>
            Two <c>PointF</c>'s are equal when their X and Y values are equal, respectively.
            </summary>
            <param name="o"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.PointF.GetHashCode">
            <summary>
            The hash code is just the XOR of the X and Y properties.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.PointF.op_Equality(Northwoods.Go.PointF,Northwoods.Go.PointF)">
            <summary>
            You can compare <c>PointF</c>'s for equality.
            </summary>
            <param name="p"></param>
            <param name="q"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.PointF.op_Inequality(Northwoods.Go.PointF,Northwoods.Go.PointF)">
            <summary>
            You can compare <c>PointF</c>'s for equality.
            </summary>
            <param name="p"></param>
            <param name="q"></param>
            <returns></returns>
        </member>
        <member name="P:Northwoods.Go.PointF.X">
            <summary>
            Get the X coordinate of a point.
            </summary>
        </member>
        <member name="P:Northwoods.Go.PointF.Y">
            <summary>
            Get the Y coordinate of a point.
            </summary>
        </member>
        <member name="T:Northwoods.Go.GoOctagon">
            <summary>
            An object with eight sides which is kept convex and symmetrical in relation
            to its X and Y axis
            </summary>
            <remarks>
            If you need an eight-sided shape without the constraints that this class
            imposes, use <see cref="T:Northwoods.Go.GoPolygon"/> instead.
            </remarks>
        </member>
        <member name="F:Northwoods.Go.GoOctagon.ChangedCorner">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoOctagon.ChangedReshapableCorner">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoOctagon.CornerWidthHandleID">
            <summary>
            A special handle ID for a handle which controls the corner's width.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoOctagon.CornerHeightHandleID">
            <summary>
            A special handle ID for a handle which controls the corner's height.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoOctagon.#ctor">
            <summary>
            The constructor produces an octagon with a standard black <see cref="P:Northwoods.Go.GoShape.Pen"/>
            outline, no <see cref="T:System.Drawing.Brush"/> fill, and a default corner dimensions.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoOctagon.CopyObject(Northwoods.Go.GoCopyDictionary)">
            <summary>
            Make sure the cloned octagon does not share any internal data references with the
            original one.
            </summary>
            <param name="env"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.GoOctagon.Paint(System.Drawing.Graphics,Northwoods.Go.GoView)">
            <summary>
            Paint a possibly shadowed octagon.
            </summary>
            <param name="g"></param>
            <param name="view"></param>
            <seealso cref="P:Northwoods.Go.GoOctagon.Corner"/>
        </member>
        <member name="M:Northwoods.Go.GoOctagon.ContainsPoint(Northwoods.Go.PointF)">
            <summary>
            Consider the actual shape of the octagon to determine
            if a given point is inside.
            </summary>
            <param name="p"></param>
            <returns></returns>
            <remarks>
            Currently this does not take the pen width into account.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoOctagon.DoResize(Northwoods.Go.GoView,System.Drawing.RectangleF,Northwoods.Go.PointF,System.Int32,Northwoods.Go.GoInputState,System.Drawing.SizeF,System.Drawing.SizeF)">
            <summary>
            Support either allowing the user to move the corner control handles,
            or treating the octagon as a whole object.
            </summary>
            <param name="view"></param>
            <param name="origRect"></param>
            <param name="newPoint"></param>
            <param name="whichHandle"></param>
            <param name="evttype"></param>
            <param name="min"></param>
            <param name="max"></param>
        </member>
        <member name="M:Northwoods.Go.GoOctagon.AddSelectionHandles(Northwoods.Go.GoSelection,Northwoods.Go.GoObject)">
            <summary>
            If <see cref="M:Northwoods.Go.GoObject.CanReshape"/> and <see cref="P:Northwoods.Go.GoOctagon.ReshapableCorner"/>
            are true, this supports corner control handles.
            </summary>
            <param name="sel"></param>
            <param name="selectedObj"></param>
        </member>
        <member name="M:Northwoods.Go.GoOctagon.GetNearestIntersectionPoint(Northwoods.Go.PointF,Northwoods.Go.PointF,Northwoods.Go.PointF@)">
            <summary>
            The closest point of a octagon that intersects with a given line
            is the closest such point of each of its eight line segments.
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.GoOctagon.ChangeValue(Northwoods.Go.GoChangedEventArgs,System.Boolean)">
            <summary>
            Handle this class's property changes for undo and redo
            </summary>
            <param name="e"></param>
            <param name="undo"></param>
        </member>
        <member name="P:Northwoods.Go.GoOctagon.Bounds">
            <summary>
            Whenever the size and/or position is changed, we need to recalculate the
            corners of the octagon.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoOctagon.Corner">
            <summary>
            Gets or sets the width and height of each corner.
            </summary>
            <value>
            This defaults to 10x10.
            If given a negative value, it is set to 0.
            </value>
        </member>
        <member name="P:Northwoods.Go.GoOctagon.ReshapableCorner">
            <summary>
            Gets or sets whether to add the corner reshaping handles.
            </summary>
            <value>
            This defaults to true.
            </value>
        </member>
        <member name="T:Northwoods.Go.GoParallelogram">
            <summary>
            An object in the shape of a parallelogram.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoParallelogram.ChangedSkew">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoParallelogram.ChangedReshapableSkew">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoParallelogram.SkewHandleID">
            <summary>
            A special handle ID for a handle which controls the skew length of a parallelogram.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoParallelogram.ChangedDirection">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoParallelogram.#ctor">
            <summary>
            The constructor produces a parallelogramwith a standard black <see cref="P:Northwoods.Go.GoShape.Pen"/>
            outline and no <see cref="T:System.Drawing.Brush"/> fill, whose "tiltedness" is specified by <see cref="P:Northwoods.Go.GoParallelogram.Skew"/>.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoParallelogram.CopyObject(Northwoods.Go.GoCopyDictionary)">
            <summary>
            Make sure any internal state is copied correctly.
            </summary>
            <param name="env"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.GoParallelogram.Paint(System.Drawing.Graphics,Northwoods.Go.GoView)">
            <summary>
            Paint a parallelogram shape, possibly with a shadow.
            </summary>
            <param name="g"></param>
            <param name="view"></param>
        </member>
        <member name="M:Northwoods.Go.GoParallelogram.ContainsPoint(Northwoods.Go.PointF)">
            <summary>
            Consider the sides of the parallelogram when determining if a point is inside.
            </summary>
            <param name="p"></param>
            <returns></returns>
            <remarks>
            Currently this does not take the pen width into account.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoParallelogram.DoResize(Northwoods.Go.GoView,System.Drawing.RectangleF,Northwoods.Go.PointF,System.Int32,Northwoods.Go.GoInputState,System.Drawing.SizeF,System.Drawing.SizeF)">
            <summary>
            Support either allowing the user to move the skew control handle,
            or treating the parallelogram as a whole object.
            </summary>
            <param name="view"></param>
            <param name="origRect"></param>
            <param name="newPoint"></param>
            <param name="whichHandle"></param>
            <param name="evttype"></param>
            <param name="min"></param>
            <param name="max"></param>
        </member>
        <member name="M:Northwoods.Go.GoParallelogram.AddSelectionHandles(Northwoods.Go.GoSelection,Northwoods.Go.GoObject)">
            <summary>
            If <see cref="M:Northwoods.Go.GoObject.CanReshape"/> and <see cref="P:Northwoods.Go.GoParallelogram.ReshapableSkew"/>
            are true, this supports a skew control handle.
            </summary>
            <param name="sel"></param>
            <param name="selectedObj"></param>
        </member>
        <member name="M:Northwoods.Go.GoParallelogram.GetNearestIntersectionPoint(Northwoods.Go.PointF,Northwoods.Go.PointF,Northwoods.Go.PointF@)">
            <summary>
            The closest point of a parallelogram that intersects with a given line
            is the closest such point of each of its four line segments.
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.GoParallelogram.ChangeValue(Northwoods.Go.GoChangedEventArgs,System.Boolean)">
            <summary>
            Handle this class's property changes for undo and redo
            </summary>
            <param name="e"></param>
            <param name="undo"></param>
        </member>
        <member name="P:Northwoods.Go.GoParallelogram.Bounds">
            <summary>
            Whenever the size and/or position is changed, we need to recalculate the
            corners of the parallelogram.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoParallelogram.Direction">
            <summary>
            Gets or sets the direction of the fixed diagonal.
            True is Top Right to Bottom Left; False is Bottom Right to Top Left.
            </summary>
            <value>
            This defaults to true.
            </value>
        </member>
        <member name="P:Northwoods.Go.GoParallelogram.Skew">
            <summary>
            Gets or sets the tiltedness of the parallelogram, in both directions.
            </summary>
            <value>
            By default the value is 10x0, so that the top-left corner is shifted to
            the right by 10 document units but kept at the same Y coordinate.
            Similar shifts occur along the Y axis according to the skew height.
            If given a negative value, it is set to 0.
            </value>
        </member>
        <member name="P:Northwoods.Go.GoParallelogram.ReshapableSkew">
            <summary>
            Gets or sets whether to add the skew reshaping handle.
            </summary>
            <value>
            This defaults to true.
            </value>
        </member>
        <member name="T:Northwoods.Go.GoPie">
            <summary>
            An object in the shape of a section or "slice" of an ellipse.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoPie.ChangedStartAngle">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoPie.ChangedSweepAngle">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoPie.ChangedResizableStartAngle">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoPie.ChangedResizableEndAngle">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoPie.StartAngleHandleID">
            <summary>
            A special handle ID for a handle which controls the start angle of the pie.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoPie.EndAngleHandleID">
            <summary>
            A special handle ID for a handle which controls the end angle of the pie.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoPie.#ctor">
            <summary>
            The constructor produces a pie section with a standard black <see cref="P:Northwoods.Go.GoShape.Pen"/>
            outline and no <see cref="T:System.Drawing.Brush"/> fill.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoPie.Paint(System.Drawing.Graphics,Northwoods.Go.GoView)">
            <summary>
            Draw a possibly shadowed pie section.
            </summary>
            <param name="g"></param>
            <param name="view"></param>
        </member>
        <member name="M:Northwoods.Go.GoPie.DoResize(Northwoods.Go.GoView,System.Drawing.RectangleF,Northwoods.Go.PointF,System.Int32,Northwoods.Go.GoInputState,System.Drawing.SizeF,System.Drawing.SizeF)">
            <summary>
            Support allowing the user to move the angle control handles.
            </summary>
            <param name="view"></param>
            <param name="origRect"></param>
            <param name="newPoint"></param>
            <param name="whichHandle"></param>
            <param name="evttype"></param>
            <param name="min"></param>
            <param name="max"></param>
        </member>
        <member name="M:Northwoods.Go.GoPie.AddSelectionHandles(Northwoods.Go.GoSelection,Northwoods.Go.GoObject)">
            <summary>
            If <see cref="M:Northwoods.Go.GoObject.CanReshape"/> is true, supports angle control handles if
            <see cref="P:Northwoods.Go.GoPie.ResizableStartAngle"/> and/or <see cref="P:Northwoods.Go.GoPie.ResizableEndAngle"/> are true.
            </summary>
            <param name="sel"></param>
            <param name="selectedObj"></param>
        </member>
        <member name="M:Northwoods.Go.GoPie.ContainsPoint(Northwoods.Go.PointF)">
            <summary>
            A point is in this object only if it really is inside the section of the ellipse.
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.GoPie.GetNearestIntersectionPoint(Northwoods.Go.PointF,Northwoods.Go.PointF,Northwoods.Go.PointF@)">
            <summary>
            Find the intersection points of a pie and the infinite line p1-p2
            that is closest to point p1.
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.GoPie.ChangeValue(Northwoods.Go.GoChangedEventArgs,System.Boolean)">
            <summary>
            Handle this class's property changes for undo and redo
            </summary>
            <param name="e"></param>
            <param name="undo"></param>
        </member>
        <member name="P:Northwoods.Go.GoPie.Bounds">
            <summary>
            Whenever the size and/or position is changed, the pie
            needs to be recalculated.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoPie.StartAngle">
            <summary>
            Gets or sets the initial angle of the section of the ellipse to be drawn.
            </summary>
            <value>
            This value is in degrees, measured clockwise from zero along the positive X axis.
            The value should range from zero to just below 360.  Values outside this range
            are adjusted to equivalent angles that fall in this range.
            </value>
        </member>
        <member name="P:Northwoods.Go.GoPie.SweepAngle">
            <summary>
            Gets or sets the angle of the width of the section of the ellipse to be drawn.
            </summary>
            <value>
            This value is in degrees, measured clockwise from the <see cref="P:Northwoods.Go.GoPie.StartAngle"/>.
            Absolute values equal to or greater than 360 degrees are adjusted to the equivalent
            angles less than 360 degrees.
            The default value is 60.
            </value>
        </member>
        <member name="P:Northwoods.Go.GoPie.ResizableStartAngle">
            <summary>
            Gets or sets whether to add the resizing handle controlling the start angle.
            </summary>
            <value>
            This defaults to true.
            </value>
        </member>
        <member name="P:Northwoods.Go.GoPie.ResizableEndAngle">
            <summary>
            Gets or sets whether to add the resizing handle controlling the end angle.
            </summary>
            <value>
            This defaults to true.
            </value>
        </member>
        <member name="T:Northwoods.Go.GoPolygonStyle">
            <summary>
            Specifies the kind of curve drawn between the points of the polygon.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoPolygonStyle.Line">
            <summary>
            A straight line is drawn between each two consecutive points in the <see cref="T:Northwoods.Go.GoPolygon"/>,
            and between the last and first points to close the curve.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoPolygonStyle.Bezier">
            <summary>
            A Bezier curve is drawn using four points: a start point, two control points, and an end point.
            Additional sets of three points specify additional Bezier curves, where the new start point
            is the old end point.
            </summary>
            <remarks>
            If the first point and the last point are not at exactly the same position, there is
            a straight line drawn between the two to complete the closed shape.
            </remarks>
        </member>
        <member name="T:Northwoods.Go.GoPolygon">
            <summary>
            A shape whose number, style, and location of sides can be specified.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoPolygon.ChangedAddPoint">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoPolygon.ChangedRemovePoint">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoPolygon.ChangedModifiedPoint">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoPolygon.ChangedAllPoints">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoPolygon.ChangedStyle">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoPolygon.#ctor">
            <summary>
            The constructor produces a polygon that users cannot resize in real time.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoPolygon.CopyObject(Northwoods.Go.GoCopyDictionary)">
            <summary>
            Make sure the cloned polygon does not share any data references with the
            original polygon.
            </summary>
            <param name="env"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.GoPolygon.AddPoint(Northwoods.Go.PointF)">
            <summary>
            Add another point to the end of this polygon's curve.
            </summary>
            <param name="p">A <c>PointF</c> in document coordinates</param>
            <returns>the zero-based index of the point that was added</returns>
            <seealso cref="M:Northwoods.Go.GoPolygon.InsertPoint(System.Int32,Northwoods.Go.PointF)"/>
            <seealso cref="M:Northwoods.Go.GoPolygon.RemovePoint(System.Int32)"/>
        </member>
        <member name="M:Northwoods.Go.GoPolygon.AddPoint(System.Single,System.Single)">
            <summary>
            This method is just a convenience overload of <see cref="M:Northwoods.Go.GoPolygon.AddPoint(Northwoods.Go.PointF)"/>.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns>the zero-based index of the point that was added</returns>
        </member>
        <member name="M:Northwoods.Go.GoPolygon.InsertPoint(System.Int32,Northwoods.Go.PointF)">
            <summary>
            Add a point at a particular index, thereby increasing the number of points by one.
            </summary>
            <param name="i">the zero-based index</param>
            <param name="p">A <c>PointF</c> in document coordinates</param>
            <remarks>
            This method throws an <c>ArgumentOutOfRangeException</c> if the index <paramref name="i"/>
            is less than zero.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoPolygon.AddPoint(Northwoods.Go.PointF)"/>
            <seealso cref="M:Northwoods.Go.GoPolygon.RemovePoint(System.Int32)"/>
        </member>
        <member name="M:Northwoods.Go.GoPolygon.RemovePoint(System.Int32)">
            <summary>
            Remove the point at a particular index, thereby reducing the number of points by one.
            </summary>
            <param name="i">the zero-based index</param>
            <remarks>
            This method does nothing if <paramref name="i"/> is out of bounds.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoPolygon.AddPoint(Northwoods.Go.PointF)"/>
            <seealso cref="M:Northwoods.Go.GoPolygon.InsertPoint(System.Int32,Northwoods.Go.PointF)"/>
            <seealso cref="P:Northwoods.Go.GoPolygon.PointsCount"/>
        </member>
        <member name="M:Northwoods.Go.GoPolygon.GetPoint(System.Int32)">
            <summary>
            Get the point at a particular index.
            </summary>
            <param name="i">the zero-based index</param>
            <returns>A <c>PointF</c> in document coordinates</returns>
            <remarks>
            This method throws an exception if <paramref name="i"/> is out of bounds.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoPolygon.SetPoint(System.Int32,Northwoods.Go.PointF)"/>
            <seealso cref="P:Northwoods.Go.GoPolygon.PointsCount"/>
        </member>
        <member name="M:Northwoods.Go.GoPolygon.SetPoint(System.Int32,Northwoods.Go.PointF)">
            <summary>
            Replace the point at a particular index;
            </summary>
            <param name="i">the zero-based index</param>
            <param name="p">A <c>PointF</c> in document coordinates</param>
            <remarks>
            This method throws an exception if <paramref name="i"/> is out of bounds.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoPolygon.GetPoint(System.Int32)"/>
            <seealso cref="P:Northwoods.Go.GoPolygon.PointsCount"/>
        </member>
        <member name="M:Northwoods.Go.GoPolygon.ClearPoints">
            <summary>
            Remove all of the points for this polygon.
            </summary>
            <remarks>
            Afterwards, this polygon is not likely to participate usefully in many
            operations, such as painting, until more points are added by calling
            <see cref="M:Northwoods.Go.GoPolygon.AddPoint(Northwoods.Go.PointF)"/> or <see cref="M:Northwoods.Go.GoPolygon.SetPoints(Northwoods.Go.PointF[])"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoPolygon.SetPoints(Northwoods.Go.PointF[])">
            <summary>
            Replace all of the points for this polygon.
            </summary>
            <param name="points">A <c>PointF</c> array whose points are in document coordinates</param>
            <remarks>
            Afterwards, <see cref="P:Northwoods.Go.GoPolygon.PointsCount"/> should equal the length of the
            <paramref name="points"/> array.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoPolygon.CopyPointsArray"/>
        </member>
        <member name="M:Northwoods.Go.GoPolygon.CopyPointsArray">
            <summary>
            Returns a copy of the array of points in this polygon.
            </summary>
            <value>
            An array of <c>PointF</c> values.
            </value>
        </member>
        <member name="M:Northwoods.Go.GoPolygon.Paint(System.Drawing.Graphics,Northwoods.Go.GoView)">
            <summary>
            A polygon is drawn as a closed sequence of straight line segments or
            Bezier curves using this shape's Pen and filled using this shape's
            Brush.
            </summary>
            <param name="g"></param>
            <param name="view"></param>
            <remarks>
            The kind of polygon curve is specified by <see cref="P:Northwoods.Go.GoPolygon.Style"/>.
            The parameters for the polygon's segments are determined by its points.
            If <see cref="P:Northwoods.Go.GoObject.Shadowed"/> is true, the polygon is drawn
            with the <see cref="M:Northwoods.Go.GoObject.GetShadowBrush(Northwoods.Go.GoView)"/> at a offset given by
            <see cref="M:Northwoods.Go.GoObject.GetShadowOffset(Northwoods.Go.GoView)"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoPolygon.OnBoundsChanged(System.Drawing.RectangleF)">
            <summary>
            Changing the bounds of a polygon may change all of its points.
            </summary>
            <param name="old">the earlier bounds, a <c>RectangleF</c> in document coordinates</param>
            <remarks>
            All of the points are modified to reflect the translation and
            scaling of the new bounding rectangle from the old one.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoPolygon.ComputeBounds">
            <summary>
            The bounding rectangle of a polygon is computed as the smallest
            rectangle that includes all of its points.
            </summary>
            <returns></returns>
            <remarks>
            If there are only zero or one points, the size will be zero.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoPolygon.ContainsPoint(Northwoods.Go.PointF)">
            <summary>
            A point is in a polygon only if it is inside its fill area,
            even if it has no Brush.
            </summary>
            <param name="p"></param>
            <returns></returns>
            <remarks>
            This currently does not take pen width into account.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoPolygon.GetNearestIntersectionPoint(Northwoods.Go.PointF,Northwoods.Go.PointF,Northwoods.Go.PointF@)">
            <summary>
            The closest intersection point of a polygon with a line is the
            closest such point for each of its segments.
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="result"></param>
            <returns></returns>
            <remarks>
            This currently does not always take into account any Pen width.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoPolygon.DoResize(Northwoods.Go.GoView,System.Drawing.RectangleF,Northwoods.Go.PointF,System.Int32,Northwoods.Go.GoInputState,System.Drawing.SizeF,System.Drawing.SizeF)">
            <summary>
            When the resize handles are at each point of the polygon, the user's
            dragging of a resize handle should just change that point in the curve.
            </summary>
            <param name="view"></param>
            <param name="origRect"></param>
            <param name="newPoint"></param>
            <param name="whichHandle"></param>
            <param name="evttype"></param>
            <param name="min"></param>
            <param name="max"></param>
            <remarks>
            When <see cref="P:Northwoods.Go.GoObject.ResizesRealtime"/> is true, this method always calls
            <see cref="M:Northwoods.Go.GoPolygon.SetPoint(System.Int32,Northwoods.Go.PointF)"/>.
            Otherwise it only calls <see cref="M:Northwoods.Go.GoPolygon.SetPoint(System.Int32,Northwoods.Go.PointF)"/> when the <paramref name="evttype"/>
            is <see cref="F:Northwoods.Go.GoInputState.Finish"/> or <see cref="F:Northwoods.Go.GoInputState.Cancel"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoPolygon.AddSelectionHandles(Northwoods.Go.GoSelection,Northwoods.Go.GoObject)">
            <summary>
            Display the appropriate selected appearance, normally, resize selection handles
            at each point of the polygon.
            </summary>
            <param name="sel"></param>
            <param name="selectedObj"></param>
            <remarks>
            If this polygon is resizable and reshapable, we add resize selection
            handles at each polygon point, with handle IDs equal to
            <see cref="F:Northwoods.Go.GoObject.LastHandle"/> plus the index of the point.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoPolygon.CopyOldValueForUndo(Northwoods.Go.GoChangedEventArgs)">
            <summary>
            Copies state to permit an undo.
            </summary>
            <seealso cref="M:Northwoods.Go.GoObject.ChangeValue(Northwoods.Go.GoChangedEventArgs,System.Boolean)"/>
        </member>
        <member name="M:Northwoods.Go.GoPolygon.CopyNewValueForRedo(Northwoods.Go.GoChangedEventArgs)">
            <summary>
            Copies state to permit a redo.
            </summary>
            <seealso cref="M:Northwoods.Go.GoObject.ChangeValue(Northwoods.Go.GoChangedEventArgs,System.Boolean)"/>
        </member>
        <member name="M:Northwoods.Go.GoPolygon.ChangeValue(Northwoods.Go.GoChangedEventArgs,System.Boolean)">
            <summary>
            Performs changes for undo and redo.
            </summary>
            <seealso cref="M:Northwoods.Go.GoObject.ChangeValue(Northwoods.Go.GoChangedEventArgs,System.Boolean)"/>
        </member>
        <member name="P:Northwoods.Go.GoPolygon.Style">
            <summary>
            Gets or sets the style of curve drawn using this polygon's points.
            </summary>
            <value>
            The default value is <see cref="F:Northwoods.Go.GoPolygonStyle.Line"/>, straight lines
            between the points.
            </value>
        </member>
        <member name="P:Northwoods.Go.GoPolygon.PointsCount">
            <summary>
            Gets the number of points in this polygon.
            </summary>
            <seealso cref="M:Northwoods.Go.GoPolygon.GetPoint(System.Int32)"/>.
            <seealso cref="M:Northwoods.Go.GoPolygon.SetPoint(System.Int32,Northwoods.Go.PointF)"/>.
            <seealso cref="M:Northwoods.Go.GoPolygon.AddPoint(Northwoods.Go.PointF)"/>.
            <seealso cref="M:Northwoods.Go.GoPolygon.InsertPoint(System.Int32,Northwoods.Go.PointF)"/>.
            <seealso cref="M:Northwoods.Go.GoPolygon.RemovePoint(System.Int32)"/>.
        </member>
        <member name="T:Northwoods.Go.GoRectangle">
            <summary>
            An object in the shape of a rectangle or square, whose corners are at
            the corners of the bounding rectangle.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoRectangle.#ctor">
            <summary>
            The constructor produces a rectangle with a standard black <see cref="P:Northwoods.Go.GoShape.Pen"/>
            outline and no <see cref="T:System.Drawing.Brush"/> fill.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoRectangle.Paint(System.Drawing.Graphics,Northwoods.Go.GoView)">
            <summary>
            Paint a possibly shadowed rectangle.
            </summary>
            <param name="g"></param>
            <param name="view"></param>
        </member>
        <member name="T:Northwoods.Go.GoRoundedRectangle">
            <summary>
            An object in the shape of a rectangle or square, whose corners are quarter
            ellipses at the corners of the bounding rectangle.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoRoundedRectangle.ChangedCorner">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoRoundedRectangle.#ctor">
            <summary>
            The constructor produces a rectangle with a standard black <see cref="P:Northwoods.Go.GoShape.Pen"/>
            outline and no <see cref="T:System.Drawing.Brush"/> fill, whose corners are rounded.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoRoundedRectangle.CopyObject(Northwoods.Go.GoCopyDictionary)">
            <summary>
            Make sure the cloned rectangle does not share any internal data references with the
            original one.
            </summary>
            <param name="env"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.GoRoundedRectangle.Paint(System.Drawing.Graphics,Northwoods.Go.GoView)">
            <summary>
            Paint a possibly shadowed rectangle with rounded corners.
            </summary>
            <param name="g"></param>
            <param name="view"></param>
            <seealso cref="P:Northwoods.Go.GoRoundedRectangle.Corner"/>
        </member>
        <member name="M:Northwoods.Go.GoRoundedRectangle.ChangeValue(Northwoods.Go.GoChangedEventArgs,System.Boolean)">
            <summary>
            Handle this class's property changes for undo and redo
            </summary>
            <param name="e"></param>
            <param name="undo"></param>
        </member>
        <member name="P:Northwoods.Go.GoRoundedRectangle.Corner">
            <summary>
            Gets or sets the maximum radial width and height of each corner.
            </summary>
            <value>
            The default value is 10x10.  Both the width and the height must be
            non-negative; only when both are positive will there be arcs at each corner.
            </value>
        </member>
        <member name="P:Northwoods.Go.GoRoundedRectangle.Bounds">
            <summary>
            </summary>
        </member>
        <member name="T:Northwoods.Go.GoStrokeStyle">
            <summary>
            Specifies the kind of curve drawn between the points of the stroke.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoStrokeStyle.Line">
            <summary>
            A straight line is drawn between each two consecutive points in the <see cref="T:Northwoods.Go.GoStroke"/>.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoStrokeStyle.RoundedLine">
            <summary>
            Rounded line is like <see cref="F:Northwoods.Go.GoStrokeStyle.Line"/> but with curves at each point where the lines intersect.
            Currently this is only implemented for adjacent segments that intersect at right angles.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoStrokeStyle.Bezier">
            <summary>
            A Bezier curve is drawn using four points: a start point, two control points, and an end point.
            Additional sets of three points specify additional Bezier curves, where the new start point
            is the old end point.
            </summary>
        </member>
        <member name="T:Northwoods.Go.GoStrokeArrowheadStyle">
            <summary>
            Specifies the general shape of an arrowhead.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoStrokeArrowheadStyle.Polygon">
            <summary>
            The arrow head is drawn as a polygon.
            </summary>
            <remarks>
            The number of sides for the polygon is determined by <see cref="M:Northwoods.Go.GoStroke.GetArrowheadPointsCount(System.Boolean)"/>.
            </remarks>
        </member>
        <member name="F:Northwoods.Go.GoStrokeArrowheadStyle.Circle">
            <summary>
            The arrowhead is drawn as a circle.
            </summary>
            <remarks>
            The circle's diameter is specified by the stroke's arrow shaft length.
            </remarks>
        </member>
        <member name="F:Northwoods.Go.GoStrokeArrowheadStyle.Cross">
            <summary>
            The arrowhead has a line crossing the shaft.
            </summary>
            <remarks>
            The arrow length determines the distance of the line from the end point.
            The arrow width determines the length of the line.
            The arrow shaft length should normally be zero.
            </remarks>
        </member>
        <member name="T:Northwoods.Go.GoStroke">
            <summary>
            An unfilled shape composed of lines or curves whose number and location can be specified.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoStroke.ChangedAddPoint">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoStroke.ChangedRemovePoint">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoStroke.ChangedModifiedPoint">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoStroke.ChangedAllPoints">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoStroke.ChangedStyle">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoStroke.ChangedCurviness">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoStroke.ChangedHighlightPen">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoStroke.ChangedHighlight">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoStroke.ChangedHighlightWhenSelected">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoStroke.ChangedToArrowHead">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoStroke.ChangedToArrowLength">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoStroke.ChangedToArrowShaftLength">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoStroke.ChangedToArrowWidth">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoStroke.ChangedToArrowFilled">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoStroke.ChangedToArrowStyle">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoStroke.ChangedFromArrowHead">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoStroke.ChangedFromArrowLength">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoStroke.ChangedFromArrowShaftLength">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoStroke.ChangedFromArrowWidth">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoStroke.ChangedFromArrowFilled">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoStroke.ChangedFromArrowStyle">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoStroke.ChangedPenWidth">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.  [Only supported in GoDiagram Pocket]
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoStroke.ChangedHighlightPenWidth">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.  [Only supported in GoDiagram Pocket]
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoStroke.#ctor">
            <summary>
            The constructor produces a shape whose arrowheads are filled with black and
            that the user can resize in realtime.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoStroke.CopyObject(Northwoods.Go.GoCopyDictionary)">
            <summary>
            Make sure the cloned stroke does not share any data references with the
            original stroke.
            </summary>
            <param name="env"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.GoStroke.AddPoint(Northwoods.Go.PointF)">
            <summary>
            Add another point to the end of this stroke.
            </summary>
            <param name="p">A <c>PointF</c> in document coordinates</param>
            <returns>the zero-based index of the point that was added</returns>
            <seealso cref="M:Northwoods.Go.GoStroke.InsertPoint(System.Int32,Northwoods.Go.PointF)"/>
            <seealso cref="M:Northwoods.Go.GoStroke.RemovePoint(System.Int32)"/>
        </member>
        <member name="M:Northwoods.Go.GoStroke.AddPoint(System.Single,System.Single)">
            <summary>
            This method is just a convenience overload of <see cref="M:Northwoods.Go.GoStroke.AddPoint(Northwoods.Go.PointF)"/>.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns>the zero-based index of the point that was added</returns>
        </member>
        <member name="M:Northwoods.Go.GoStroke.InsertPoint(System.Int32,Northwoods.Go.PointF)">
            <summary>
            Add a point at a particular index, thereby increasing the number of points by one.
            </summary>
            <param name="i">the zero-based index</param>
            <param name="p">A <c>PointF</c> in document coordinates</param>
            <remarks>
            This method throws an <c>ArgumentOutOfRangeException</c> if the index <paramref name="i"/>
            is less than zero.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoStroke.AddPoint(Northwoods.Go.PointF)"/>
            <seealso cref="M:Northwoods.Go.GoStroke.RemovePoint(System.Int32)"/>
        </member>
        <member name="M:Northwoods.Go.GoStroke.RemovePoint(System.Int32)">
            <summary>
            Remove the point at a particular index, thereby reducing the number of points by one.
            </summary>
            <param name="i">the zero-based index</param>
            <remarks>
            This method does nothing if <paramref name="i"/> is out of bounds.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoStroke.AddPoint(Northwoods.Go.PointF)"/>
            <seealso cref="M:Northwoods.Go.GoStroke.InsertPoint(System.Int32,Northwoods.Go.PointF)"/>
            <seealso cref="P:Northwoods.Go.GoStroke.PointsCount"/>
        </member>
        <member name="M:Northwoods.Go.GoStroke.GetPoint(System.Int32)">
            <summary>
            Get the point at a particular index.
            </summary>
            <param name="i">the zero-based index</param>
            <returns>A <c>PointF</c> in document coordinates</returns>
            <remarks>
            This method throws an exception if <paramref name="i"/> is out of bounds.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoStroke.SetPoint(System.Int32,Northwoods.Go.PointF)"/>
            <seealso cref="P:Northwoods.Go.GoStroke.PointsCount"/>
        </member>
        <member name="M:Northwoods.Go.GoStroke.SetPoint(System.Int32,Northwoods.Go.PointF)">
            <summary>
            Replace the point at a particular index;
            </summary>
            <param name="i"></param>
            <param name="p">A <c>PointF</c> in document coordinates</param>
            <remarks>
            This method throws an exception if <paramref name="i"/> is out of bounds.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoStroke.GetPoint(System.Int32)"/>
            <seealso cref="P:Northwoods.Go.GoStroke.PointsCount"/>
        </member>
        <member name="M:Northwoods.Go.GoStroke.ClearPoints">
            <summary>
            Remove all of the points for this stroke.
            </summary>
            <remarks>
            Afterwards, this stroke is not likely to participate usefully in many
            operations, such as painting, until more points are added by calling
            <see cref="M:Northwoods.Go.GoStroke.AddPoint(Northwoods.Go.PointF)"/> or <see cref="M:Northwoods.Go.GoStroke.SetPoints(Northwoods.Go.PointF[])"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoStroke.SetPoints(Northwoods.Go.PointF[])">
            <summary>
            Replace all of the points for this stroke.
            </summary>
            <param name="points">A <c>PointF</c> array whose points are in document coordinates</param>
            <remarks>
            Afterwards, <see cref="P:Northwoods.Go.GoStroke.PointsCount"/> should equal the length of the
            <paramref name="points"/> array.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoStroke.CopyPointsArray"/>
        </member>
        <member name="M:Northwoods.Go.GoStroke.CopyPointsArray">
            <summary>
            Returns a copy of the array of points in this stroke.
            </summary>
            <value>
            A newly-allocated array of <c>PointF</c> values in document coordinates.
            </value>
        </member>
        <member name="M:Northwoods.Go.GoStroke.DoResize(Northwoods.Go.GoView,System.Drawing.RectangleF,Northwoods.Go.PointF,System.Int32,Northwoods.Go.GoInputState,System.Drawing.SizeF,System.Drawing.SizeF)">
            <summary>
            When the resize handles are at each point of the stroke, the user's
            dragging of a resize handle should just change that point in the stroke.
            </summary>
            <param name="view"></param>
            <param name="origRect"></param>
            <param name="newPoint"></param>
            <param name="whichHandle"></param>
            <param name="evttype"></param>
            <param name="min"></param>
            <param name="max"></param>
            <remarks>
            When <see cref="P:Northwoods.Go.GoObject.ResizesRealtime"/> is true, this method always calls
            <see cref="M:Northwoods.Go.GoStroke.SetPoint(System.Int32,Northwoods.Go.PointF)"/>.
            Otherwise it only calls <see cref="M:Northwoods.Go.GoStroke.SetPoint(System.Int32,Northwoods.Go.PointF)"/> when the <paramref name="evttype"/>
            is <see cref="F:Northwoods.Go.GoInputState.Finish"/> or <see cref="F:Northwoods.Go.GoInputState.Cancel"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoStroke.AddSelectionHandles(Northwoods.Go.GoSelection,Northwoods.Go.GoObject)">
            <summary>
            Display the appropriate selected appearance, normally resize selection handles
            at each point of the stroke.
            </summary>
            <param name="sel"></param>
            <param name="selectedObj"></param>
            <remarks>
            If <see cref="P:Northwoods.Go.GoStroke.HighlightWhenSelected"/> is true, we just set <see cref="P:Northwoods.Go.GoStroke.Highlight"/>
            to true.
            Otherwise, if this stroke is resizable and reshapable, we add resize selection
            handles at each stroke point, with handle IDs equal to <see cref="F:Northwoods.Go.GoObject.LastHandle"/>
            plus the index of the point.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoStroke.RemoveSelectionHandles(Northwoods.Go.GoSelection)">
            <summary>
            Besides removing all selection handles, we also turn off any highlighting
            if <see cref="P:Northwoods.Go.GoStroke.HighlightWhenSelected"/> is true.
            </summary>
            <param name="sel"></param>
        </member>
        <member name="M:Northwoods.Go.GoStroke.OnBoundsChanged(System.Drawing.RectangleF)">
            <summary>
            Changing the bounds of a stroke may change all of the stroke's points.
            </summary>
            <param name="old">the earlier bounds, a <c>RectangleF</c> in document coordinates</param>
            <remarks>
            All of the points are modified to reflect the translation and
            scaling of the new bounding rectangle from the old one.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoStroke.ComputeBounds">
            <summary>
            The bounding rectangle of a stroke is computed as the smallest
            rectangle that includes all of the stroke's points.
            </summary>
            <returns></returns>
            <remarks>
            If there are only zero or one points, the size will be zero.
            The computed bounds for Bezier strokes are not necessarily the closest fitting,
            and do not include any arrowheads.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoStroke.ExpandPaintBounds(System.Drawing.RectangleF,Northwoods.Go.GoView)">
            <summary>
            Consider Pen width, miter limit, drop shadow and highlight in computing the paint bounds.
            </summary>
            <param name="rect"></param>
            <param name="view"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.GoStroke.ContainsPoint(Northwoods.Go.PointF)">
            <summary>
            A point is in a stroke only if it is near one of its segments.
            </summary>
            <param name="p"></param>
            <returns></returns>
            <remarks>
            This just calls <see cref="M:Northwoods.Go.GoStroke.GetSegmentNearPoint(Northwoods.Go.PointF)"/> to see if the
            point <paramref name="p"/> is near a segment.
            This is sensitive to the <see cref="P:Northwoods.Go.GoStroke.PickMargin"/> value.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoStroke.GetSegmentNearPoint(Northwoods.Go.PointF)">
            <summary>
            Return the index of the first point of a segment of this stroke
            that is close to a given point.
            </summary>
            <param name="pnt">A <c>PointF</c> in document coordinates</param>
            <returns>
            The zero-based index of the first point of a segment,
            or <c>-1</c> if no segment is near <paramref name="pnt"/>.
            </returns>
            <remarks>
            This is sensitive to the <see cref="P:Northwoods.Go.GoStroke.PickMargin"/> value.
            For Bezier style strokes, the index of the first of each set of
            points is returned, e.g. 0, 3, 7, ....
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoStroke.GetNearestIntersectionPoint(Northwoods.Go.PointF,Northwoods.Go.PointF,Northwoods.Go.PointF@)">
            <summary>
            The closest intersection point of a stroke with a line is the
            closest such point for each of its segments.
            </summary>
            <param name="p1">
            the point we are looking to be closest to, on the line formed with <paramref name="p2"/>
            </param>
            <param name="p2">
            forms a line with <paramref name="p1"/>
            </param>
            <param name="result">
            the point of this object that is closest to <paramref name="p1"/> and that is on
            the infinite line from <paramref name="p1"/> to <paramref name="p2"/>
            </param>
            <returns>
            true if the infinite line does intersect with this object; false otherwise
            </returns>
            <remarks>
            This currently does not take into account any Pen width.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoStroke.NearestPointOnLine(Northwoods.Go.PointF,Northwoods.Go.PointF,Northwoods.Go.PointF,Northwoods.Go.PointF@)">
            <summary>
            Return a point on a straight line segment that is closest to a given point.
            </summary>
            <param name="a">One end of the line.</param>
            <param name="b">The other end of the line.</param>
            <param name="p">The point to be closest to.</param>
            <param name="result">
            A <c>PointF</c> that is on the finite length straight line segment from
            <paramref name="a"/> to <paramref name="b"/>
            </param>
            <returns>
            true if the point <paramref name="p"/> is on a perpendicular line to the line segment;
            false if the point <paramref name="p"/> is beyond either end of the line segment.
            When this returns false, the <paramref name="result"/> will be either
            <paramref name="a"/> or <paramref name="b"/>.
            </returns>
        </member>
        <member name="M:Northwoods.Go.GoStroke.NearestIntersectionOnLine(Northwoods.Go.PointF,Northwoods.Go.PointF,Northwoods.Go.PointF,Northwoods.Go.PointF,Northwoods.Go.PointF@)">
            <summary>
            Find the intersection point of the finite line segment A-B and the infinite line P-Q
            that is closest to point P.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <param name="p"></param>
            <param name="q"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.GoStroke.GetAngle(System.Single,System.Single)">
            <summary>
            Return the angle of the line going from the origin to a point.
            </summary>
            <param name="x"></param>
            <param name="y"></param>
            <returns>
            an angle in degrees, with <c>0</c> along the positive X axis, and
            with <c>90.0</c> along the positive Y axis.
            </returns>
        </member>
        <member name="M:Northwoods.Go.GoStroke.GetArrowheadPointsCount(System.Boolean)">
            <summary>
            Gets the number of points to be used in the polygon representing an arrowhead.
            </summary>
            <param name="atEnd">true for the "To" end, false for the "From" end</param>
            <returns>
            By default this returns 4.  The value must be at least 4.
            </returns>
        </member>
        <member name="M:Northwoods.Go.GoStroke.CalculateArrowhead(Northwoods.Go.PointF,Northwoods.Go.PointF,System.Boolean,Northwoods.Go.PointF[])">
            <summary>
            Modify an array of points to hold the four points of a polygon outlining an arrowhead
            </summary>
            <param name="anchor">The arrowhead anchor position, giving the spot the arrow is coming from</param>
            <param name="endPoint">The arrowhead end point</param>
            <param name="atEnd">true if for the "To" end, false if for the "From" end</param>
            <param name="poly">An array of <c>PointF</c> of at least length four to hold the results</param>
            <remarks>
            By default the four points are as follows:
            <list type="bullet">
            <item> [0] the inner point on the shaft, arrow shaft length from the end point </item>
            <item> [1] and [3] the barbs of the arrowhead, arrow width apart </item>
            <item> [2] the tip of the arrowhead, at the end point </item>
            </list>
            If necessary, the length of the arrowhead is actually scaled down to
            fit in the distance between the <paramref name="anchor"/> and the
            <paramref name="endPoint"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoStroke.DrawArrowhead(System.Drawing.Graphics,Northwoods.Go.GoView,System.Drawing.Pen,System.Drawing.Brush,System.Boolean,System.Single,System.Single,Northwoods.Go.PointF[])">
            <summary>
            This method is called by <see cref="M:Northwoods.Go.GoStroke.Paint(System.Drawing.Graphics,Northwoods.Go.GoView)"/> to actually draw an arrowhead.
            </summary>
            <param name="g"></param>
            <param name="view"></param>
            <param name="pen"></param>
            <param name="brush"></param>
            <param name="atEnd">true if for the "To" end, false if for the "From" end</param>
            <param name="offsetw">the offset is normally used for drawing a shadow</param>
            <param name="offseth">the offset is normally used for drawing a shadow</param>
            <param name="poly">The result of a call to <see cref="M:Northwoods.Go.GoStroke.CalculateArrowhead(Northwoods.Go.PointF,Northwoods.Go.PointF,System.Boolean,Northwoods.Go.PointF[])"/></param>
            <remarks>
            By default this will be called with a thin, solid pen derived from
            <see cref="P:Northwoods.Go.GoShape.Pen"/> and this stroke's <see cref="P:Northwoods.Go.GoShape.Brush"/>.
            When the arrowhead style is <see cref="F:Northwoods.Go.GoStrokeArrowheadStyle.Circle"/>, the
            polygon's [0] and [2] points are used to position the circle.
            When the arrowhead style is one of the "crossed" styles, the
            polygon's [1] and [3] points are used as the points for the crossing line.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoStroke.Paint(System.Drawing.Graphics,Northwoods.Go.GoView)">
            <summary>
            A stroke is drawn as a sequence of straight line segments or
            Bezier curves, with optional arrows at the ends.
            </summary>
            <param name="g"></param>
            <param name="view"></param>
            <remarks>
            The kind of stroke is specified by <see cref="P:Northwoods.Go.GoStroke.Style"/>, and the
            parameters of the stroke's segments are specified by the stroke's
            points.
            Each segment uses the points it needs until there are not enough
            more for an additional segment.
            If <see cref="P:Northwoods.Go.GoObject.Shadowed"/> is true, the stroke is drawn
            with the <see cref="M:Northwoods.Go.GoObject.GetShadowPen(Northwoods.Go.GoView,System.Single)"/> at a offset given by
            <see cref="M:Northwoods.Go.GoObject.GetShadowOffset(Northwoods.Go.GoView)"/>.
            If <see cref="P:Northwoods.Go.GoStroke.HighlightPen"/> is non-null, that pen is used to
            drawn the stroke first.
            Finally <see cref="P:Northwoods.Go.GoShape.Pen"/> is used to draw the stroke.
            If <see cref="P:Northwoods.Go.GoStroke.FromArrow"/> or <see cref="P:Northwoods.Go.GoStroke.ToArrow"/> are true,
            the corresponding arrowheads are drawn according to the values
            of the ArrowAnchorPoint, ArrowLength, ArrowShaftLength,
            ArrowWidth, and ArrowFilled.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoStroke.CopyOldValueForUndo(Northwoods.Go.GoChangedEventArgs)">
            <summary>
            Copies state to permit an undo.
            </summary>
            <seealso cref="M:Northwoods.Go.GoObject.ChangeValue(Northwoods.Go.GoChangedEventArgs,System.Boolean)"/>
        </member>
        <member name="M:Northwoods.Go.GoStroke.CopyNewValueForRedo(Northwoods.Go.GoChangedEventArgs)">
            <summary>
            Copies state to permit a redo.
            </summary>
            <seealso cref="M:Northwoods.Go.GoObject.ChangeValue(Northwoods.Go.GoChangedEventArgs,System.Boolean)"/>
        </member>
        <member name="M:Northwoods.Go.GoStroke.ChangeValue(Northwoods.Go.GoChangedEventArgs,System.Boolean)">
            <summary>
            Performs changes for undo and redo.
            </summary>
            <seealso cref="M:Northwoods.Go.GoObject.ChangeValue(Northwoods.Go.GoChangedEventArgs,System.Boolean)"/>
        </member>
        <member name="P:Northwoods.Go.GoStroke.Style">
            <summary>
            Gets or sets the kind of curve drawn using this stroke's points.
            </summary>
            <value>
            The initial value is <see cref="F:Northwoods.Go.GoStrokeStyle.Line"/>
            </value>
        </member>
        <member name="P:Northwoods.Go.GoStroke.PointsCount">
            <summary>
            Gets the number of points in this stroke.
            </summary>
            <seealso cref="M:Northwoods.Go.GoStroke.GetPoint(System.Int32)"/>.
            <seealso cref="M:Northwoods.Go.GoStroke.SetPoint(System.Int32,Northwoods.Go.PointF)"/>.
            <seealso cref="M:Northwoods.Go.GoStroke.AddPoint(Northwoods.Go.PointF)"/>.
            <seealso cref="M:Northwoods.Go.GoStroke.InsertPoint(System.Int32,Northwoods.Go.PointF)"/>.
            <seealso cref="M:Northwoods.Go.GoStroke.RemovePoint(System.Int32)"/>.
        </member>
        <member name="P:Northwoods.Go.GoStroke.FirstPickIndex">
            <summary>
            Gets the index of the first point that should get a selection handle.
            </summary>
            <remarks>
            This normally returns <c>0</c>.
            </remarks>
            <seealso cref="P:Northwoods.Go.GoStroke.LastPickIndex"/>
            <seealso cref="M:Northwoods.Go.GoStroke.AddSelectionHandles(Northwoods.Go.GoSelection,Northwoods.Go.GoObject)"/>
        </member>
        <member name="P:Northwoods.Go.GoStroke.LastPickIndex">
            <summary>
            Gets the index of the last point that should get a selection handle.
            </summary>
            <remarks>
            This normally returns <c>PointsCount-1</c>.
            </remarks>
            <seealso cref="P:Northwoods.Go.GoStroke.FirstPickIndex"/>
            <seealso cref="M:Northwoods.Go.GoStroke.AddSelectionHandles(Northwoods.Go.GoSelection,Northwoods.Go.GoObject)"/>
        </member>
        <member name="P:Northwoods.Go.GoStroke.PickMargin">
            <summary>
            Gets the approximate width of the region on either side of the stroke that
            is still considered "inside" the stroke when picking.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoStroke.ToArrow">
            <summary>
            Gets or sets whether an arrow is drawn at the end of this stroke.
            </summary>
            <value>
            The default value is false.
            </value>
            <remarks>
            The arrow will be located near the last point of the stroke.
            By default this will be an arrowhead drawn pointing out
            with a thin pen and filled with the stroke's <see cref="T:System.Drawing.Brush"/>,
            which defaults to <c>Brushes.Black</c>.
            </remarks>
            <seealso cref="P:Northwoods.Go.GoStroke.ToArrowStyle"/>
            <seealso cref="P:Northwoods.Go.GoStroke.ToArrowEndPoint"/>
            <seealso cref="P:Northwoods.Go.GoStroke.ToArrowAnchorPoint"/>
            <seealso cref="P:Northwoods.Go.GoStroke.ToArrowLength"/>
            <seealso cref="P:Northwoods.Go.GoStroke.ToArrowShaftLength"/>
            <seealso cref="P:Northwoods.Go.GoStroke.ToArrowWidth"/>
            <seealso cref="P:Northwoods.Go.GoStroke.ToArrowFilled"/>
            <seealso cref="P:Northwoods.Go.GoStroke.FromArrow"/>
        </member>
        <member name="P:Northwoods.Go.GoStroke.ToArrowStyle">
            <summary>
            Gets or sets the general shape of an arrowhead at the end of this stroke.
            </summary>
            <value>
            The default value is <see cref="F:Northwoods.Go.GoStrokeArrowheadStyle.Polygon"/>.
            </value>
            <seealso cref="P:Northwoods.Go.GoStroke.FromArrowStyle"/>
        </member>
        <member name="P:Northwoods.Go.GoStroke.ToArrowEndPoint">
            <summary>
            Gets the point at the tip of the arrowhead at the end of this stroke.
            </summary>
            <value>
            The default value is the last point of this stroke.
            </value>
            <seealso cref="P:Northwoods.Go.GoStroke.ToArrow"/>
            <seealso cref="P:Northwoods.Go.GoStroke.ToArrowStyle"/>
            <seealso cref="P:Northwoods.Go.GoStroke.ToArrowAnchorPoint"/>
            <seealso cref="P:Northwoods.Go.GoStroke.ToArrowLength"/>
            <seealso cref="P:Northwoods.Go.GoStroke.ToArrowShaftLength"/>
            <seealso cref="P:Northwoods.Go.GoStroke.ToArrowWidth"/>
            <seealso cref="P:Northwoods.Go.GoStroke.ToArrowFilled"/>
        </member>
        <member name="P:Northwoods.Go.GoStroke.ToArrowAnchorPoint">
            <summary>
            Gets a point which specifies the direction the arrow is coming from.
            </summary>
            <value>
            The default value is the next-to-last point of this stroke.
            </value>
            <seealso cref="P:Northwoods.Go.GoStroke.ToArrow"/>
            <seealso cref="P:Northwoods.Go.GoStroke.ToArrowStyle"/>
            <seealso cref="P:Northwoods.Go.GoStroke.ToArrowEndPoint"/>
            <seealso cref="P:Northwoods.Go.GoStroke.ToArrowLength"/>
            <seealso cref="P:Northwoods.Go.GoStroke.ToArrowShaftLength"/>
            <seealso cref="P:Northwoods.Go.GoStroke.ToArrowWidth"/>
            <seealso cref="P:Northwoods.Go.GoStroke.ToArrowFilled"/>
        </member>
        <member name="P:Northwoods.Go.GoStroke.ToArrowLength">
            <summary>
            Gets or sets the length of the arrowhead at the end of this stroke.
            </summary>
            <value>
            The default value is <c>10</c>.
            A negative value will produce an arrowhead that points inward instead of outward.
            </value>
            <remarks>
            The length is the distance measured along the shaft of the two "barbs" of
            the arrowhead from the end point.
            </remarks>
            <seealso cref="P:Northwoods.Go.GoStroke.ToArrow"/>
            <seealso cref="P:Northwoods.Go.GoStroke.ToArrowStyle"/>
            <seealso cref="P:Northwoods.Go.GoStroke.ToArrowEndPoint"/>
            <seealso cref="P:Northwoods.Go.GoStroke.ToArrowAnchorPoint"/>
            <seealso cref="P:Northwoods.Go.GoStroke.ToArrowShaftLength"/>
            <seealso cref="P:Northwoods.Go.GoStroke.ToArrowWidth"/>
            <seealso cref="P:Northwoods.Go.GoStroke.ToArrowFilled"/>
        </member>
        <member name="P:Northwoods.Go.GoStroke.ToArrowShaftLength">
            <summary>
            Gets or sets the length of the shaft of the arrowhead at the end of this stroke.
            </summary>
            <value>
            The default value is <c>8</c>.
            A negative value, along with a negative value for the arrow length, will produce an
            arrowhead that points inward instead of outward.
            </value>
            <remarks>
            The shaft length is the length of the arrowhead on the shaft.
            You can make the arrowhead diamond shaped by having the shaft length twice the
            arrow length.
            A shaft length of zero will result in an arrowhead with no interior to fill with
            the <see cref="T:System.Drawing.Brush"/>.
            </remarks>
            <seealso cref="P:Northwoods.Go.GoStroke.ToArrow"/>
            <seealso cref="P:Northwoods.Go.GoStroke.ToArrowStyle"/>
            <seealso cref="P:Northwoods.Go.GoStroke.ToArrowEndPoint"/>
            <seealso cref="P:Northwoods.Go.GoStroke.ToArrowAnchorPoint"/>
            <seealso cref="P:Northwoods.Go.GoStroke.ToArrowLength"/>
            <seealso cref="P:Northwoods.Go.GoStroke.ToArrowWidth"/>
            <seealso cref="P:Northwoods.Go.GoStroke.ToArrowFilled"/>
        </member>
        <member name="P:Northwoods.Go.GoStroke.ToArrowWidth">
            <summary>
            Gets or sets the maximum width of the arrowhead at the end of this stroke.
            </summary>
            <value>
            The value is measured in document coordinates and must be non-negative.
            The default value is <c>8</c>.
            </value>
            <remarks>
            Smaller values make the arrowhead sharper.
            </remarks>
            <seealso cref="P:Northwoods.Go.GoStroke.ToArrow"/>
            <seealso cref="P:Northwoods.Go.GoStroke.ToArrowStyle"/>
            <seealso cref="P:Northwoods.Go.GoStroke.ToArrowEndPoint"/>
            <seealso cref="P:Northwoods.Go.GoStroke.ToArrowAnchorPoint"/>
            <seealso cref="P:Northwoods.Go.GoStroke.ToArrowLength"/>
            <seealso cref="P:Northwoods.Go.GoStroke.ToArrowShaftLength"/>
            <seealso cref="P:Northwoods.Go.GoStroke.ToArrowFilled"/>
        </member>
        <member name="P:Northwoods.Go.GoStroke.ToArrowFilled">
            <summary>
            Gets or sets whether the arrowhead at the end of this stroke is filled with
            the brush.
            </summary>
            <value>
            The default value is true.
            </value>
            <seealso cref="P:Northwoods.Go.GoStroke.ToArrow"/>
            <seealso cref="P:Northwoods.Go.GoStroke.ToArrowStyle"/>
            <seealso cref="P:Northwoods.Go.GoStroke.ToArrowEndPoint"/>
            <seealso cref="P:Northwoods.Go.GoStroke.ToArrowAnchorPoint"/>
            <seealso cref="P:Northwoods.Go.GoStroke.ToArrowLength"/>
            <seealso cref="P:Northwoods.Go.GoStroke.ToArrowShaftLength"/>
            <seealso cref="P:Northwoods.Go.GoStroke.ToArrowWidth"/>
        </member>
        <member name="P:Northwoods.Go.GoStroke.FromArrow">
            <summary>
            Gets or sets whether an arrow is drawn at the start of this stroke.
            </summary>
            <value>
            The default value is false.
            </value>
            <remarks>
            The arrow will be located near the first point of the stroke.
            By default this will be an arrowhead drawn pointing out
            with a thin pen and filled with the stroke's <see cref="T:System.Drawing.Brush"/>,
            which defaults to <c>Brushes.Black</c>.
            </remarks>
            <seealso cref="P:Northwoods.Go.GoStroke.FromArrowStyle"/>
            <seealso cref="P:Northwoods.Go.GoStroke.FromArrowEndPoint"/>
            <seealso cref="P:Northwoods.Go.GoStroke.FromArrowAnchorPoint"/>
            <seealso cref="P:Northwoods.Go.GoStroke.FromArrowLength"/>
            <seealso cref="P:Northwoods.Go.GoStroke.FromArrowShaftLength"/>
        </member>
        <member name="P:Northwoods.Go.GoStroke.FromArrowStyle">
            <summary>
            Gets or sets the general shape of an arrowhead at the start of this stroke.
            </summary>
            <value>
            The default value is <see cref="F:Northwoods.Go.GoStrokeArrowheadStyle.Polygon"/>.
            </value>
            <seealso cref="P:Northwoods.Go.GoStroke.ToArrowStyle"/>
        </member>
        <member name="P:Northwoods.Go.GoStroke.FromArrowEndPoint">
            <summary>
            Gets the point at the tip of the arrowhead at the start of this stroke.
            </summary>
            <value>
            The default value is the last point of this stroke.
            </value>
            <seealso cref="P:Northwoods.Go.GoStroke.FromArrow"/>
            <seealso cref="P:Northwoods.Go.GoStroke.FromArrowStyle"/>
            <seealso cref="P:Northwoods.Go.GoStroke.FromArrowAnchorPoint"/>
            <seealso cref="P:Northwoods.Go.GoStroke.FromArrowLength"/>
            <seealso cref="P:Northwoods.Go.GoStroke.FromArrowShaftLength"/>
            <seealso cref="P:Northwoods.Go.GoStroke.FromArrowWidth"/>
            <seealso cref="P:Northwoods.Go.GoStroke.FromArrowFilled"/>
        </member>
        <member name="P:Northwoods.Go.GoStroke.FromArrowAnchorPoint">
            <summary>
            Gets a point which specifies the direction the arrow is coming from.
            </summary>
            <value>
            The default value is the second point of this stroke.
            </value>
            <seealso cref="P:Northwoods.Go.GoStroke.FromArrow"/>
            <seealso cref="P:Northwoods.Go.GoStroke.FromArrowStyle"/>
            <seealso cref="P:Northwoods.Go.GoStroke.FromArrowEndPoint"/>
            <seealso cref="P:Northwoods.Go.GoStroke.FromArrowLength"/>
            <seealso cref="P:Northwoods.Go.GoStroke.FromArrowShaftLength"/>
            <seealso cref="P:Northwoods.Go.GoStroke.FromArrowWidth"/>
            <seealso cref="P:Northwoods.Go.GoStroke.FromArrowFilled"/>
        </member>
        <member name="P:Northwoods.Go.GoStroke.FromArrowLength">
            <summary>
            Gets or sets the length of the arrowhead at the start of this stroke.
            </summary>
            <value>
            The default value is <c>10</c>.
            A negative value will produce an arrowhead that points inward instead of outward.
            </value>
            <remarks>
            The length is the distance measured along the shaft of the two "barbs" of
            the arrowhead from the end point.
            </remarks>
            <seealso cref="P:Northwoods.Go.GoStroke.FromArrow"/>
            <seealso cref="P:Northwoods.Go.GoStroke.FromArrowStyle"/>
            <seealso cref="P:Northwoods.Go.GoStroke.FromArrowEndPoint"/>
            <seealso cref="P:Northwoods.Go.GoStroke.FromArrowAnchorPoint"/>
            <seealso cref="P:Northwoods.Go.GoStroke.FromArrowShaftLength"/>
            <seealso cref="P:Northwoods.Go.GoStroke.FromArrowWidth"/>
            <seealso cref="P:Northwoods.Go.GoStroke.FromArrowFilled"/>
        </member>
        <member name="P:Northwoods.Go.GoStroke.FromArrowShaftLength">
            <summary>
            Gets or sets the length of the shaft of the arrowhead at the start of this stroke.
            </summary>
            <value>
            The default value is <c>8</c>.
            A negative value, along with a negative value for the arrow length, will produce an
            arrowhead that points inward instead of outward.
            </value>
            <remarks>
            The shaft length is the length of the arrowhead on the shaft.
            You can make the arrowhead diamond shaped by having the shaft length twice the
            arrow length.
            A shaft length of zero will result in an arrowhead with no interior to fill with
            the <see cref="T:System.Drawing.Brush"/>.
            </remarks>
            <seealso cref="P:Northwoods.Go.GoStroke.FromArrow"/>
            <seealso cref="P:Northwoods.Go.GoStroke.FromArrowStyle"/>
            <seealso cref="P:Northwoods.Go.GoStroke.FromArrowEndPoint"/>
            <seealso cref="P:Northwoods.Go.GoStroke.FromArrowAnchorPoint"/>
            <seealso cref="P:Northwoods.Go.GoStroke.FromArrowLength"/>
            <seealso cref="P:Northwoods.Go.GoStroke.FromArrowWidth"/>
            <seealso cref="P:Northwoods.Go.GoStroke.FromArrowFilled"/>
        </member>
        <member name="P:Northwoods.Go.GoStroke.FromArrowWidth">
            <summary>
            Gets or sets the maximum width of the arrowhead at the start of this stroke.
            </summary>
            <value>
            The value is measured in document coordinates and must be non-negative.
            The default value is <c>8</c>.
            </value>
            <remarks>
            Smaller values make the arrowhead sharper.
            </remarks>
            <seealso cref="P:Northwoods.Go.GoStroke.FromArrow"/>
            <seealso cref="P:Northwoods.Go.GoStroke.FromArrowStyle"/>
            <seealso cref="P:Northwoods.Go.GoStroke.FromArrowEndPoint"/>
            <seealso cref="P:Northwoods.Go.GoStroke.FromArrowAnchorPoint"/>
            <seealso cref="P:Northwoods.Go.GoStroke.FromArrowLength"/>
            <seealso cref="P:Northwoods.Go.GoStroke.FromArrowShaftLength"/>
            <seealso cref="P:Northwoods.Go.GoStroke.FromArrowFilled"/>
        </member>
        <member name="P:Northwoods.Go.GoStroke.FromArrowFilled">
            <summary>
            Gets or sets whether the arrowhead at the start of this stroke is filled with
            the brush.
            </summary>
            <value>
            The default value is true.
            </value>
            <seealso cref="P:Northwoods.Go.GoStroke.FromArrow"/>
            <seealso cref="P:Northwoods.Go.GoStroke.FromArrowStyle"/>
            <seealso cref="P:Northwoods.Go.GoStroke.FromArrowEndPoint"/>
            <seealso cref="P:Northwoods.Go.GoStroke.FromArrowAnchorPoint"/>
            <seealso cref="P:Northwoods.Go.GoStroke.FromArrowLength"/>
            <seealso cref="P:Northwoods.Go.GoStroke.FromArrowShaftLength"/>
            <seealso cref="P:Northwoods.Go.GoStroke.FromArrowWidth"/>
        </member>
        <member name="P:Northwoods.Go.GoStroke.PenWidth">
            <summary>
            Gets or sets the width of the line of the stroke.  [Only in GoDiagram Pocket]
            </summary>
            <value>
            The value must be non-negative.
            The default value is 0, meaning a one-pixel wide line at any scale.
            Values other than zero cause slower drawing.
            </value>
            <remarks>
            <para>
            <b>This is only supported in GoDiagram Pocket.</b>
            </para>
            In regular Windows Forms, you can specify the pen width when you create a pen:
            <code>stroke.Pen = new Pen(Color.Red, 2)</code>.
            But in the .NET Compact Framework, that <c>Pen</c> constructor does not exist,
            so you will need to use this additional property.
            </remarks>
            <seealso cref="P:Northwoods.Go.GoStroke.HighlightPenWidth"/>
        </member>
        <member name="P:Northwoods.Go.GoStroke.HighlightPenWidth">
            <summary>
            Gets or sets the width of the line drawn as the highlight for the stroke.  [Only in GoDiagram Pocket]
            </summary>
            <value>
            The value must be non-negative.
            The default value is 0, meaning a one-pixel wide line at any scale.
            Values other than zero cause slower drawing.
            </value>
            <remarks>
            <para>
            <b>This is only supported in GoDiagram Pocket.</b>
            </para>
            </remarks>
            <seealso cref="P:Northwoods.Go.GoStroke.PenWidth"/>
        </member>
        <member name="P:Northwoods.Go.GoStroke.Curviness">
            <summary>
            Gets how rounded the corners are for adjacent line segments when the
            stroke style is <see cref="F:Northwoods.Go.GoStrokeStyle.RoundedLine"/>.
            </summary>
            <value>
            This describes the maximum radius of rounded corners, in document coordinates.
            This also is used to determine the offset distance for the control points of
            a <see cref="F:Northwoods.Go.GoStrokeStyle.Bezier"/> style link when connecting two ports
            whose spots are both <see cref="F:Northwoods.Go.GoObject.NoSpot"/>.
            This defaults to 10.
            </value>
        </member>
        <member name="P:Northwoods.Go.GoStroke.Highlight">
            <summary>
            Gets or sets whether this stroke displays a highlight along its path.
            </summary>
            <value>
            This defaults to false.
            </value>
            <seealso cref="P:Northwoods.Go.GoStroke.HighlightPen"/>
            <seealso cref="P:Northwoods.Go.GoStroke.HighlightWhenSelected"/>
        </member>
        <member name="P:Northwoods.Go.GoStroke.HighlightPen">
            <summary>
            Gets or sets the pen used to draw a highlight for this stroke.
            </summary>
            <value>
            This property defaults to null.
            </value>
            <remarks>
            You must not modify the pen after you have assigned it.
            Setting <see cref="P:Northwoods.Go.GoStroke.Highlight"/> to true will not result in a visible
            markup until you specify a <c>Pen</c> for this property.
            </remarks>
            <seealso cref="P:Northwoods.Go.GoStroke.HighlightWhenSelected"/>
        </member>
        <member name="P:Northwoods.Go.GoStroke.HighlightWhenSelected">
            <summary>
            Gets or sets whether the highlight is shown when this stroke becomes selected.
            </summary>
            <value>
            This defaults to false.
            </value>
            <remarks>
            When this property is true and this stroke is selected, we set the
            <see cref="P:Northwoods.Go.GoStroke.Highlight"/> property to true.  Assuming there is a value for
            <see cref="P:Northwoods.Go.GoStroke.HighlightPen"/>, the stroke will appear highlit.  When the stroke
            is no longer selected, the <see cref="P:Northwoods.Go.GoStroke.Highlight"/> property is set to false.
            Under these circumstances the change to the <see cref="P:Northwoods.Go.GoStroke.Highlight"/> property
            is not recorded by the undo manager (if any).
            This feature should only be used when there is only one view on the document, or
            if it is OK for all views on the document to display the highlight when the
            stroke is selected in just one of the views.
            </remarks>
        </member>
        <member name="T:Northwoods.Go.GoTextEditorStyle">
            <summary>
            Supported ways of editing text.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoTextEditorStyle.TextBox">
            <summary>
            Use a TextBox Control.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoTextEditorStyle.NumericUpDown">
            <summary>
            Use a NumericUpDown Control for editing integers.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoTextEditorStyle.ComboBox">
            <summary>
            Use a ComboBox Control, to present predefined choices.
            </summary>
        </member>
        <member name="T:Northwoods.Go.GoText">
            <summary>
            An object that displays a text string.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoText.ChangedText">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoText.ChangedFamilyName">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoText.ChangedFontSize">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoText.ChangedAlignment">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoText.ChangedTextColor">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoText.ChangedBackgroundColor">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoText.ChangedTransparentBackground">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoText.ChangedBold">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoText.ChangedItalic">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoText.ChangedUnderline">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoText.ChangedStrikeThrough">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoText.ChangedMultiline">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoText.ChangedBackgroundOpaqueWhenSelected">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoText.ChangedClipping">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoText.ChangedAutoResizes">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoText.ChangedWrapping">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoText.ChangedWrappingWidth">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoText.ChangedGdiCharSet">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoText.ChangedEditorStyle">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoText.ChangedMinimum">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoText.ChangedMaximum">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoText.ChangedDropDownList">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoText.ChangedChoices">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoText.ChangedRightToLeft">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoText.ChangedRightToLeftFromView">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoText.ChangedBordered">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoText.ChangedStringTrimming">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.  [Not supported in GoDiagram Pocket]
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoText.#ctor">
            <summary>
            The constructor produces an object that is not resizable by the user
            and does not automatically rescale the font size when the size is changed.
            However, it does automatically change the size to fit the text when the
            text is changed.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoText.CopyObject(Northwoods.Go.GoCopyDictionary)">
            <summary>
            This makes a copy of this text object.
            </summary>
            <param name="env"></param>
            <returns>The copied object.</returns>
            <remarks>
            The list of <see cref="P:Northwoods.Go.GoText.Choices"/>, if any, is not copied--it is shared
            with the original text object.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoText.PaintGreek(System.Drawing.Graphics,Northwoods.Go.GoView)">
            <summary>
            This method is responsible for alternative painting when the
            scale is small.
            </summary>
            <param name="g"></param>
            <param name="view"></param>
            <returns>
            True if this method handled the Paint request; false if it did
            not and the regular painting should take place.
            </returns>
            <remarks>
            This paints nothing if the <paramref name="view"/>'s
            <see cref="P:Northwoods.Go.GoView.DocScale"/> is less than the
            <see cref="P:Northwoods.Go.GoView.PaintNothingScale"/>.
            It just draws a line if the scale is less than the
            <see cref="P:Northwoods.Go.GoView.PaintGreekScale"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoText.Paint(System.Drawing.Graphics,Northwoods.Go.GoView)">
            <summary>
            Draw a text string according to the attributes specified by this object's properties.
            </summary>
            <param name="g"></param>
            <param name="view"></param>
            <remarks>
            If <see cref="P:Northwoods.Go.GoText.TransparentBackground"/> is false, we fill the bounds with the
            <see cref="P:Northwoods.Go.GoText.BackgroundColor"/>, and we paint a rectangular drop shadow if
            <see cref="P:Northwoods.Go.GoObject.Shadowed"/>.
            If <see cref="P:Northwoods.Go.GoText.TransparentBackground"/> is true, we draw the text (offset) using the shadow
            pen if <see cref="P:Northwoods.Go.GoObject.Shadowed"/> is true.  Then we draw the text using the
            <see cref="P:Northwoods.Go.GoText.TextColor"/>.
            The value of <see cref="P:Northwoods.Go.GoText.Alignment"/> and either <see cref="P:Northwoods.Go.GoText.RightToLeft"/> or
            <c>GoView.RightToLeft</c> determine the actual alignment of the text.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoText.SetSizeKeepingLocation(System.Drawing.SizeF)">
            <summary>
            This method can be called to change the size of this object without
            changing its location.
            </summary>
            <param name="s"></param>
        </member>
        <member name="M:Northwoods.Go.GoText.ExpandPaintBounds(System.Drawing.RectangleF,Northwoods.Go.GoView)">
            <summary>
            Consider any shadow when calculating the paint bounds.
            </summary>
            <param name="rect"></param>
            <param name="view"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.GoText.AddSelectionHandles(Northwoods.Go.GoSelection,Northwoods.Go.GoObject)">
            <summary>
            Implement a custom selection indicator if BackgroundOpaqueWhenSelected is true.
            </summary>
            <param name="sel"></param>
            <param name="selectedObj"></param>
            <remarks>
            When <see cref="P:Northwoods.Go.GoText.BackgroundOpaqueWhenSelected"/> is true, selecting this object
            will cause the background to be shown; unselecting will make the
            background transparent again.
            This produces the effect of highlighting the text when selected,
            if the text normally has a transparent background and the
            <see cref="P:Northwoods.Go.GoText.BackgroundColor"/> is a suitable highlight color.
            Changes to the <see cref="P:Northwoods.Go.GoText.TransparentBackground"/> property are not recorded
            by the <see cref="T:Northwoods.Go.GoUndoManager"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoText.RemoveSelectionHandles(Northwoods.Go.GoSelection)">
            <summary>
            Implement a custom selection indicator if BackgroundOpaqueWhenSelected is true.
            </summary>
            <param name="sel"></param>
            <seealso cref="M:Northwoods.Go.GoText.AddSelectionHandles(Northwoods.Go.GoSelection,Northwoods.Go.GoObject)"/>
        </member>
        <member name="M:Northwoods.Go.GoText.OnBoundsChanged(System.Drawing.RectangleF)">
            <summary>
            Handle any change in size.
            </summary>
            <param name="old"></param>
            <remarks>
            If <see cref="P:Northwoods.Go.GoObject.AutoRescales"/> is true, we rescale the font size
            so that the text fits in this object's bounds.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoText.OnLayerChanged(Northwoods.Go.GoLayer,Northwoods.Go.GoLayer,Northwoods.Go.GoObject)">
            <summary>
            Handle any change in layers.
            </summary>
            <param name="oldlayer"></param>
            <param name="newlayer"></param>
            <param name="mainObj"></param>
            <remarks>
            When adding this object to a layer, if <see cref="P:Northwoods.Go.GoText.AutoResizes"/> is
            true, reset the size of this text object to accomodate the string.
            If the layer changes, make sure we are no longer editing the text.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoText.OnSingleClick(Northwoods.Go.GoInputEventArgs,Northwoods.Go.GoView)">
            <summary>
            Start editing this text object on a single click if this object is editable.
            </summary>
            <param name="evt"></param>
            <param name="view"></param>
            <returns>
            True if it started editing; false if it could not.
            </returns>
            <remarks>
            To be able to call <see cref="M:Northwoods.Go.GoObject.DoBeginEdit(Northwoods.Go.GoView)"/>, both <see cref="M:Northwoods.Go.GoObject.CanEdit"/>
            and the <paramref name="view"/>'s <see cref="M:Northwoods.Go.GoView.CanEditObjects"/>
            property must both be true.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoText.DoBeginEdit(Northwoods.Go.GoView)">
            <summary>
            Bring up a TextBox to allow the user to edit the text string in-place.
            </summary>
            <param name="view"></param>
            <remarks>
            This calls <see cref="M:Northwoods.Go.GoView.StartTransaction"/>.
            If you override this method, you can perform some customization of
            the resulting <c>Control</c> for the given <see cref="T:Northwoods.Go.GoView"/> by
            first calling the base method and then looking at the <c>Control</c>,
            as follows:
            <code>
            public override void DoBeginEdit(GoView view) {
              base.DoBeginEdit(view);
              // get the Control for the Editor created in base method for this GoText
              System.Windows.Forms.Control ctrl = this.Editor.GetControl(view);
              if (ctrl != null) {
                ... simple Control customization ...
              }
            }
            </code>
            However, most <c>Control</c>s require more sophisticated behavior,
            which is best implemented by inheriting from that particular <c>Control</c>
            class, implementing <see cref="T:Northwoods.Go.IGoControlObject"/>, and handling the
            desired events.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoText.CreateEditor(Northwoods.Go.GoView)">
            <summary>
            This creates a GoControl that creates a TextBox, a ComboBox, or a NumericUpDown.
            </summary>
            <param name="view"></param>
            <returns></returns>
            <remarks>
            This is responsible for creating a <see cref="T:Northwoods.Go.GoControl"/> with
            the appropriate <see cref="P:Northwoods.Go.GoControl.ControlType"/> and bounds.
            Your subclass of <c>Control</c>, which should implement the
            <see cref="T:Northwoods.Go.IGoControlObject"/> interface, should be responsible
            for initializing itself correctly for this <c>GoText</c> object.
            That initialization is normally done when <see cref="P:Northwoods.Go.IGoControlObject.GoControl"/>
            is set.
            It will of course want to examine this <see cref="T:Northwoods.Go.GoText"/> object being edited;
            you can get that with the following expression:
            <code>
              this.GoControl.EditedObject as GoText
            </code>
            When your <c>Control</c> is finished editing, it may want to save its results
            by modifying this <see cref="T:Northwoods.Go.GoText"/> object.  In particular, if you want to
            change the <see cref="P:Northwoods.Go.GoText.Text"/> property, it is best to call:
            <code>
              GoText gotext = this.GoControl.EditedObject as GoText;
              if (gotext != null) {
                gotext.DoEdit(this.GoView, gotext.Text, newtextvalue);
              }
            </code>
            Your <see cref="T:Northwoods.Go.IGoControlObject"/> <c>Control</c> should terminate by calling:
            <code>
              this.GoControl.DoEndEdit(this.GoView)
            </code>
            in its event handlers that cause it to finish.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoText.DoEndEdit(Northwoods.Go.GoView)">
            <summary>
            Stop editing this text object.
            </summary>
            <param name="view"></param>
            <remarks>
            Remove the <see cref="T:Northwoods.Go.GoControl"/> from the view.
            This calls <see cref="M:Northwoods.Go.GoView.RaiseObjectEdited(Northwoods.Go.GoObject)"/>
            and <see cref="M:Northwoods.Go.GoView.FinishTransaction(System.String)"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoText.DoEdit(Northwoods.Go.GoView,System.String,System.String)">
            <summary>
            Called when a user tries to commit a text edit.
            </summary>
            <param name="view"></param>
            <param name="oldtext"></param>
            <param name="newtext"></param>
            <remarks>
            This is normally called from the control that is setting a new string for
            this text object as a result of the user having finished editing the text.
            By default it just sets this object's <see cref="P:Northwoods.Go.GoText.Text"/> property
            to the result of a call to <see cref="M:Northwoods.Go.GoText.ComputeEdit(System.String,System.String)"/>:
            <c>Text = ComputeEdit(oldtext, newtext)</c>.
            You can override this method to prevent the text value from being set,
            or you can override <see cref="M:Northwoods.Go.GoText.ComputeEdit(System.String,System.String)"/> to constrain the new
            text value.
            Call <see cref="M:Northwoods.Go.GoText.DoBeginEdit(Northwoods.Go.GoView)"/> to programmatically have the user start
            editing this text object; call <see cref="M:Northwoods.Go.GoText.DoEndEdit(Northwoods.Go.GoView)"/> to stop any
            editing that the user might be doing.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoText.ComputeEdit(System.String,System.String)">
            <summary>
            Calculate a new string value for this object as a result of an edit.
            </summary>
            <param name="oldtext"></param>
            <param name="newtext"></param>
            <returns>Normally, this just returns <paramref name="newtext"/>.</returns>
            <remarks>
            This is normally called from <see cref="M:Northwoods.Go.GoText.DoEdit(Northwoods.Go.GoView,System.String,System.String)"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoText.ChangeValue(Northwoods.Go.GoChangedEventArgs,System.Boolean)">
            <summary>
            Performs changes for undo and redo.
            </summary>
            <seealso cref="M:Northwoods.Go.GoObject.ChangeValue(Northwoods.Go.GoChangedEventArgs,System.Boolean)"/>
        </member>
        <member name="P:Northwoods.Go.GoText.Text">
            <summary>
            Gets or sets the string that this text object displays.
            </summary>
            <value>
            This defaults to the empty string.
            Setting this property to a null/nothing value will result
            in using an empty string instead.
            </value>
        </member>
        <member name="P:Northwoods.Go.GoText.FamilyName">
            <summary>
            Gets or sets the font family face name.
            </summary>
            <value>
            Initially this is the value of <see cref="P:Northwoods.Go.GoText.DefaultFontFamilyName"/>.
            Setting this value to null will result in the use of that default.
            </value>
            <seealso cref="P:Northwoods.Go.GoText.FontSize"/>
        </member>
        <member name="P:Northwoods.Go.GoText.FontSize">
            <summary>
            Gets or sets the font size.
            </summary>
            <value>
            This value is in units of text points.
            Initially this is the value of <see cref="P:Northwoods.Go.GoText.DefaultFontSize"/>.
            </value>
            <seealso cref="P:Northwoods.Go.GoText.FamilyName"/>
        </member>
        <member name="P:Northwoods.Go.GoText.Alignment">
            <summary>
            Gets or sets how the text is aligned.
            </summary>
            <value>
            This defaults to <see cref="F:Northwoods.Go.GoObject.TopLeft"/>; you can use any of the predefined
            <see cref="T:Northwoods.Go.GoObject"/> spot values.
            </value>
            <remarks>
            This property governs how each line of text is positioned in the bounding rectangle.
            In addition this property specifies the <see cref="P:Northwoods.Go.GoText.Location"/> for this object.
            The value of this property is not changed by the value of <see cref="P:Northwoods.Go.GoText.RightToLeft"/>
            or <c>Control.RightToLeft</c> for any <see cref="T:Northwoods.Go.GoView"/>.
            However, the <c>GoView.RightToLeft</c> or <see cref="P:Northwoods.Go.GoText.RightToLeft"/> property
            does affect where the text is drawn for that view.  When <c>GoView.RightToLeft</c>
            property value is <c>RightToLeft.Yes</c>, or when <see cref="P:Northwoods.Go.GoText.RightToLeftFromView"/>
            is false and <see cref="P:Northwoods.Go.GoText.RightToLeft"/> is true,
            then text whose <see cref="P:Northwoods.Go.GoText.Alignment"/> is on the left (such as
            <see cref="F:Northwoods.Go.GoObject.TopLeft"/>) will actually be drawn right-aligned.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoText.TextColor">
            <summary>
            Gets or sets the color of the text.
            </summary>
            <value>
            This defaults to <c>Color.Black</c>.
            </value>
            <seealso cref="P:Northwoods.Go.GoText.BackgroundColor"/>
        </member>
        <member name="P:Northwoods.Go.GoText.BackgroundColor">
            <summary>
            Gets or sets the background color for this text object.
            </summary>
            <value>
            This defaults to <c>Color.White</c>.
            </value>
            <remarks>
            The background is not painted if <see cref="P:Northwoods.Go.GoText.TransparentBackground"/> is true.
            </remarks>
            <seealso cref="P:Northwoods.Go.GoText.TextColor"/>
            <seealso cref="P:Northwoods.Go.GoText.BackgroundOpaqueWhenSelected"/>
        </member>
        <member name="P:Northwoods.Go.GoText.TransparentBackground">
            <summary>
            Gets or sets whether the background color is painted.
            </summary>
            <value>
            This defaults to true--the background color is not painted, and only
            the characters are displayed.
            </value>
            <seealso cref="P:Northwoods.Go.GoText.BackgroundColor"/>
            <seealso cref="P:Northwoods.Go.GoText.BackgroundOpaqueWhenSelected"/>
        </member>
        <member name="P:Northwoods.Go.GoText.Bold">
            <summary>
            Gets or sets whether the font style is bold.
            </summary>
            <value>
            This defaults to false.
            </value>
            <seealso cref="P:Northwoods.Go.GoText.Italic"/>
        </member>
        <member name="P:Northwoods.Go.GoText.Italic">
            <summary>
            Gets or sets whether the font style is italic.
            </summary>
            <value>
            This defaults to false.
            </value>
            <seealso cref="P:Northwoods.Go.GoText.Bold"/>
        </member>
        <member name="P:Northwoods.Go.GoText.Underline">
            <summary>
            Gets or sets whether the font style includes underline.
            </summary>
            <value>
            This defaults to false.
            </value>
            <seealso cref="P:Northwoods.Go.GoText.StrikeThrough"/>
        </member>
        <member name="P:Northwoods.Go.GoText.StrikeThrough">
            <summary>
            Gets or sets whether the font style includes strike-through.
            </summary>
            <value>
            This defaults to false.
            </value>
            <seealso cref="P:Northwoods.Go.GoText.Underline"/>
        </member>
        <member name="P:Northwoods.Go.GoText.Bordered">
            <summary>
            Gets or sets whether a simple border is drawn around the text.
            </summary>
            <value>the default value is false, indicating no border</value>
            <remarks>
            The line drawn around the text is drawn using a solid Pen whose color
            is <see cref="P:Northwoods.Go.GoText.TextColor"/>.  If you need more complex borders, wider
            margins around the text, or other visual effects, you will need to
            override <see cref="M:Northwoods.Go.GoText.Paint(System.Drawing.Graphics,Northwoods.Go.GoView)"/> yourself.
            Note that the <see cref="P:Northwoods.Go.GoObject.Bounds"/> of this object are not changed by
            setting this property.
            However, this property does affect the result of <see cref="M:Northwoods.Go.GoText.ExpandPaintBounds(System.Drawing.RectangleF,Northwoods.Go.GoView)"/>,
            just as the <see cref="P:Northwoods.Go.GoObject.Shadowed"/> property also affects that method.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoText.GdiCharSet">
            <summary>
            Gets or sets the GDI character set used for the text.
            </summary>
            <value>
            The default value is 1, the default character set.
            </value>
        </member>
        <member name="P:Northwoods.Go.GoText.RightToLeft">
            <summary>
            Gets or sets whether this text should be drawn from right to left,
            when the <see cref="P:Northwoods.Go.GoText.RightToLeftFromView"/> property is false.
            </summary>
            <value>
            The default value is false.
            </value>
            <remarks>
            This property is ignored when <see cref="P:Northwoods.Go.GoText.RightToLeftFromView"/> is true.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoText.RightToLeftFromView">
            <summary>
            Gets or sets whether the view's <c>RightToLeft</c> property governs
            how the string is drawn, or whether this text object's <see cref="P:Northwoods.Go.GoText.RightToLeft"/>
            property takes precedence.
            </summary>
            <value>
            This defaults to true, which means the <see cref="T:Northwoods.Go.GoView"/>'s <c>RightToLeft</c>
            property will affect the appearance of the text.
            </value>
        </member>
        <member name="P:Northwoods.Go.GoText.Multiline">
            <summary>
            Gets or sets whether the text is displayed in multiple lines,
            according to any NewLine character sequences in
            the text string.
            </summary>
            <value>
            This defaults to false.
            </value>
            <remarks>
            If this is false, any text after the first NewLine sequence is ignored.
            </remarks>
            <seealso cref="P:Northwoods.Go.GoText.Alignment"/>
            <seealso cref="P:Northwoods.Go.GoText.Wrapping"/>
        </member>
        <member name="P:Northwoods.Go.GoText.BackgroundOpaqueWhenSelected">
            <summary>
            Gets or sets whether the text background is displayed when selected.
            </summary>
            <value>
            This defaults to false.
            </value>
            <remarks>
            When this property is true and this text object is selected, we set the
            <see cref="P:Northwoods.Go.GoText.TransparentBackground"/> property to false.  Assuming there is a suitable
            <see cref="P:Northwoods.Go.GoText.BackgroundColor"/>, the text will appear highlit.  When the text
            object is no longer selected, the <see cref="P:Northwoods.Go.GoText.TransparentBackground"/> property is set to true.
            Under these circumstances the change to the <see cref="P:Northwoods.Go.GoText.TransparentBackground"/> property
            is not recorded by the undo manager (if any).
            Note that setting this property to true will prevent the normal selection handles
            from appearing, so that when <see cref="P:Northwoods.Go.GoObject.Resizable"/> is true there won't be any
            resize handles for the user to manipulate.
            This feature should only be used when there is only one view on the document, or
            if it is OK for all views on the document to display the text highlight when the
            text object is selected in just one of the views.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoText.AddSelectionHandles(Northwoods.Go.GoSelection,Northwoods.Go.GoObject)"/>
        </member>
        <member name="P:Northwoods.Go.GoText.Clipping">
            <summary>
            Gets or sets whether the text drawing is clipped by this object's bounds.
            </summary>
            <value>
            This defaults to false.
            </value>
            <remarks>
            <remarks>
            <para>
            This is not supported in GoDiagram Pocket.
            </para>
            </remarks>
            Turning this property on does slow down painting.
            You may also wish to set the <see cref="!:StringTrimming"/> property,
            for additional control over how the text is truncated or elided.
            </remarks>
            <seealso cref="!:StringTrimming"/>
            <seealso cref="P:Northwoods.Go.GoText.AutoResizes"/>
            <seealso cref="P:Northwoods.Go.GoObject.AutoRescales"/>
        </member>
        <member name="P:Northwoods.Go.GoText.AutoResizes">
            <summary>
            Gets or sets whether the bounds are recalculated when the text changes.
            </summary>
            <value>
            This defaults to true.
            </value>
            <remarks>
            If both this property and <see cref="P:Northwoods.Go.GoObject.AutoRescales"/> are false, and you change
            either the <see cref="P:Northwoods.Go.GoText.Text"/> string or the <see cref="P:Northwoods.Go.GoObject.Bounds"/>,
            you must be careful not to make either the text too big or the bounds too small.
            It is then wise to turn on the <see cref="P:Northwoods.Go.GoText.Clipping"/> property.
            </remarks>
            <seealso cref="P:Northwoods.Go.GoText.Text"/>
            <seealso cref="P:Northwoods.Go.GoText.Clipping"/>
        </member>
        <member name="P:Northwoods.Go.GoText.Wrapping">
            <summary>
            Gets or sets whether the text is wrapped when the text reaches the wrapping width.
            </summary>
            <value>
            This defaults to false.
            </value>
            <seealso cref="P:Northwoods.Go.GoText.WrappingWidth"/>
            <seealso cref="P:Northwoods.Go.GoText.Multiline"/>
        </member>
        <member name="P:Northwoods.Go.GoText.WrappingWidth">
            <summary>
            Gets or sets the width at which text is wrapped.
            </summary>
            <value>
            This distance is in document coordinates.
            This defaults to <c>150</c>.
            The new value must be positive and at least as wide as any single character.
            </value>
            <remarks>
            Text is wrapped to the next line when the <see cref="P:Northwoods.Go.GoText.Wrapping"/> property is true and
            the text gets wider than this value.
            If <see cref="P:Northwoods.Go.GoText.Multiline"/> is true, a NewLine character sequence (Carriage Return/
            LineFeed) forces a line break.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoText.EditorStyle">
            <summary>
            The kind of editor Control used when the user edits the text string in-place.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoText.Minimum">
            <summary>
            When the <see cref="P:Northwoods.Go.GoText.EditorStyle"/> is <see cref="F:Northwoods.Go.GoTextEditorStyle.NumericUpDown"/>,
            this specifies the minimum value.
            </summary>
            <value>
            This defaults to zero.
            </value>
        </member>
        <member name="P:Northwoods.Go.GoText.Maximum">
            <summary>
            When the <see cref="P:Northwoods.Go.GoText.EditorStyle"/> is <see cref="F:Northwoods.Go.GoTextEditorStyle.NumericUpDown"/>,
            this specifies the maximum value.
            </summary>
            <value>
            This defaults to 100.
            </value>
        </member>
        <member name="P:Northwoods.Go.GoText.DropDownList">
            <summary>
            When the <see cref="P:Northwoods.Go.GoText.EditorStyle"/> is <see cref="F:Northwoods.Go.GoTextEditorStyle.ComboBox"/>,
            this controls whether the user must choose from the list of <see cref="P:Northwoods.Go.GoText.Choices"/>,
            or whether the user can type in an arbitrary string.
            </summary>
            <value>
            This defaults to false.
            </value>
        </member>
        <member name="P:Northwoods.Go.GoText.Choices">
            <summary>
            When the <see cref="P:Northwoods.Go.GoText.EditorStyle"/> is <see cref="F:Northwoods.Go.GoTextEditorStyle.ComboBox"/>,
            this holds the list of choices that are presented in the drop down list.
            </summary>
            <value>
            This defaults to an empty list.  The value may be shared by more than
            one <c>GoText</c> object.
            </value>
            <remarks>
            Modifying the items in the list is not controlled.  Any such changes are not
            recorded by the undo manager.  Only replacing the list is recorded for undo/redo,
            and even then, it is only the reference to an <c>ArrayList</c> that is remembered
            and restored.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoText.Font">
            <summary>
            Gets the <c>Font</c> currently being used by this text object.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoText.LineCount">
            <summary>
            Compute how many lines of text are displayed.
            </summary>
            <value>the number of physical lines of text that are drawn, including
            line breaks caused by newlines and by wrapping, if any</value>
        </member>
        <member name="P:Northwoods.Go.GoText.Location">
            <summary>
            A text object's natural location is determined by its Alignment.
            </summary>
            <remarks>
            The value of this property is not changed by the value of <see cref="P:Northwoods.Go.GoText.RightToLeft"/>
            or <c>Control.RightToLeft</c> for any <see cref="T:Northwoods.Go.GoView"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoText.Editor">
            <summary>
            Gets the GoControl used to represent a text editor.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoText.DefaultFontFamilyName">
            <summary>
            Gets or sets the font family face name used when constructing a <see cref="T:Northwoods.Go.GoText"/> object.
            </summary>
            <value>
            This defaults to "Microsoft Sans Serif".  The value must not be null.
            </value>
            <seealso cref="P:Northwoods.Go.GoText.DefaultFontSize"/>
        </member>
        <member name="P:Northwoods.Go.GoText.DefaultFontSize">
            <summary>
            Gets or sets the font size used when constructing a <see cref="T:Northwoods.Go.GoText"/> object.
            </summary>
            <value>
            This defaults to <c>10</c>.
            </value>
            <seealso cref="P:Northwoods.Go.GoText.DefaultFontFamilyName"/>
        </member>
        <member name="T:Northwoods.Go.IGoControlObject">
            <summary>
            This interface specifies the properties that a <c>Control</c> may have
            to be best used by a <see cref="P:Northwoods.Go.IGoControlObject.GoControl"/> as a graphical object.
            </summary>
        </member>
        <member name="P:Northwoods.Go.IGoControlObject.GoControl">
            <summary>
            Gets or sets the <see cref="P:Northwoods.Go.IGoControlObject.GoControl"/> that is managing this <c>Control</c>.
            </summary>
            <remarks>
            This backpointer is set right after <see cref="!:GoControl.CreateControl"/>
            creates this <c>Control</c>.
            Access to the <see cref="P:Northwoods.Go.IGoControlObject.GoControl"/> is important at several times:
            for initializing the control using state available in the GoControl,
            for saving any modified state to the GoControl, and for ending the edit.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.IGoControlObject.GoView">
            <summary>
            Gets or sets the <see cref="P:Northwoods.Go.IGoControlObject.GoView"/> that contains this <c>Control</c>.
            </summary>
            <remarks>
            This backpointer is set right after <see cref="!:GoControl.CreateControl"/>
            creates this <c>Control</c>.
            You can probably also find the <see cref="P:Northwoods.Go.IGoControlObject.GoView"/> by looking at this
            <c>Control</c>'s <c>Parent</c> property.
            </remarks>
        </member>
        <member name="T:Northwoods.Go.GoTrapezoid">
            <summary>
            A four-sided figure in which two of the sides run parrallel
            and the others do not.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoTrapezoid.ChangedPointA">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoTrapezoid.ChangedPointB">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoTrapezoid.ChangedPointC">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoTrapezoid.ChangedPointD">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoTrapezoid.ChangedMultiplePoints">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoTrapezoid.ChangedOrientation">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoTrapezoid.PointAHandleID">
            <summary>
            A special handle ID for a handle at Point A.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoTrapezoid.PointBHandleID">
            <summary>
            A special handle ID for a handle at Point B.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoTrapezoid.PointCHandleID">
            <summary>
            A special handle ID for a handle at Point C.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoTrapezoid.PointDHandleID">
            <summary>
            A special handle ID for a handle at Point D.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoTrapezoid.#ctor">
            <summary>
            The constructor produces a trapazoid with a standard black <see cref="P:Northwoods.Go.GoShape.Pen"/>
            outline, no <see cref="T:System.Drawing.Brush"/> fill.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoTrapezoid.CopyObject(Northwoods.Go.GoCopyDictionary)">
            <summary>
            Make sure the cloned trapezoid does not share any internal data references with the
            original one.
            </summary>
            <param name="env"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.GoTrapezoid.ComputeBounds">
            <summary>
            Calculate the minimum rectangle that includes all four points.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.GoTrapezoid.OnBoundsChanged(System.Drawing.RectangleF)">
            <summary>
            When the bounds change, update the points appropriately.
            </summary>
            <param name="old"></param>
        </member>
        <member name="M:Northwoods.Go.GoTrapezoid.SetPoints(Northwoods.Go.PointF[])">
            <summary>
            Reset all of the trapezoid's points.
            </summary>
            <param name="points">an array of <c>PointF</c> of length 4</param>
            <remarks>
            The first element of the array corresponds to point <see cref="P:Northwoods.Go.GoTrapezoid.A"/>,
            the second to point <see cref="P:Northwoods.Go.GoTrapezoid.B"/>, the third to <see cref="P:Northwoods.Go.GoTrapezoid.C"/>,
            and the fourth to <see cref="P:Northwoods.Go.GoTrapezoid.D"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoTrapezoid.ContainsPoint(Northwoods.Go.PointF)">
            <summary>
            Consider the actual shape of the trapezoid to determine
            if a given point is inside.
            </summary>
            <param name="p"></param>
            <returns></returns>
            <remarks>
            Currently this does not take the pen width into account.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoTrapezoid.GetNearestIntersectionPoint(Northwoods.Go.PointF,Northwoods.Go.PointF,Northwoods.Go.PointF@)">
            <summary>
            The closest point of a trapezoid that intersects with a given line
            is the closest such point of each of its four line segments.
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.GoTrapezoid.Paint(System.Drawing.Graphics,Northwoods.Go.GoView)">
            <summary>
            Paint a possibly shadowed trapezoid.
            </summary>
            <param name="g"></param>
            <param name="view"></param>
        </member>
        <member name="M:Northwoods.Go.GoTrapezoid.DoResize(Northwoods.Go.GoView,System.Drawing.RectangleF,Northwoods.Go.PointF,System.Int32,Northwoods.Go.GoInputState,System.Drawing.SizeF,System.Drawing.SizeF)">
            <summary>
            If reshapeable, ensures that the set pair of sides maintains
            their perpecidularity when the figure is altered
            </summary>
            <param name="view"></param>
            <param name="origRect"></param>
            <param name="newPoint"></param>
            <param name="whichHandle"></param>
            <param name="evttype"></param>
            <param name="min"></param>
            <param name="max"></param>
            <remarks>
            When <see cref="P:Northwoods.Go.GoObject.ResizesRealtime"/> is true, this method always sets
            the corresponding point property to <paramref name="newPoint"/>.
            Otherwise it only sets it when the <paramref name="evttype"/>
            is <see cref="F:Northwoods.Go.GoInputState.Finish"/> or <see cref="F:Northwoods.Go.GoInputState.Cancel"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoTrapezoid.ComputeResize(System.Drawing.RectangleF,Northwoods.Go.PointF,System.Int32,System.Drawing.SizeF,System.Drawing.SizeF,System.Boolean)">
            <summary>
            Calculate a new bounding rectangle for this object.
            </summary>
            <param name="origRect"></param>
            <param name="newPoint"></param>
            <param name="handle"></param>
            <param name="min"></param>
            <param name="max"></param>
            <param name="reshape"></param>
            <returns>
            A new <c>RectangleF</c> bounding rectangle, in document coordinates.
            </returns>
            <remarks>
            This is normally called from <see cref="M:Northwoods.Go.GoTrapezoid.DoResize(Northwoods.Go.GoView,System.Drawing.RectangleF,Northwoods.Go.PointF,System.Int32,Northwoods.Go.GoInputState,System.Drawing.SizeF,System.Drawing.SizeF)"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoTrapezoid.AddSelectionHandles(Northwoods.Go.GoSelection,Northwoods.Go.GoObject)">
            <summary>
            If Resizable and Reshapable, support individual triangle vertex
            resize handles.
            </summary>
            <param name="sel"></param>
            <param name="selectedObj"></param>
        </member>
        <member name="M:Northwoods.Go.GoTrapezoid.CopyOldValueForUndo(Northwoods.Go.GoChangedEventArgs)">
            <summary>
            Copies state to permit an undo.
            </summary>
            <seealso cref="M:Northwoods.Go.GoObject.ChangeValue(Northwoods.Go.GoChangedEventArgs,System.Boolean)"/>
        </member>
        <member name="M:Northwoods.Go.GoTrapezoid.CopyNewValueForRedo(Northwoods.Go.GoChangedEventArgs)">
            <summary>
            Copies state to permit a redo.
            </summary>
            <seealso cref="M:Northwoods.Go.GoObject.ChangeValue(Northwoods.Go.GoChangedEventArgs,System.Boolean)"/>
        </member>
        <member name="M:Northwoods.Go.GoTrapezoid.ChangeValue(Northwoods.Go.GoChangedEventArgs,System.Boolean)">
            <summary>
            Performs changes for undo and redo.
            </summary>
            <seealso cref="M:Northwoods.Go.GoObject.ChangeValue(Northwoods.Go.GoChangedEventArgs,System.Boolean)"/>
        </member>
        <member name="P:Northwoods.Go.GoTrapezoid.Orientation">
            <summary>
            Gets or sets how to draw the trapezoid, based on whether its
            parallel pair of sides run vertically or horizontally.
            </summary>
            <value>
            This defaults to <c>Orientation.Horizontal</c>.
            </value>
        </member>
        <member name="P:Northwoods.Go.GoTrapezoid.A">
            <summary>
            Gets or sets the first of the four trapezoid's points.
            </summary>
            <value>
            The <c>PointF</c> value is in document coordinates.
            The initial value is (0, 0).
            </value>
            <seealso cref="P:Northwoods.Go.GoTrapezoid.B"/>
            <seealso cref="P:Northwoods.Go.GoTrapezoid.C"/>
            <seealso cref="P:Northwoods.Go.GoTrapezoid.D"/>
        </member>
        <member name="P:Northwoods.Go.GoTrapezoid.B">
            <summary>
            Gets or sets the second of the four trapezoid's points.
            </summary>
            <value>
            The <c>PointF</c> value is in document coordinates.
            The initial value is (8, 0).
            </value>
            <seealso cref="P:Northwoods.Go.GoTrapezoid.A"/>
            <seealso cref="P:Northwoods.Go.GoTrapezoid.C"/>
            <seealso cref="P:Northwoods.Go.GoTrapezoid.D"/>
        </member>
        <member name="P:Northwoods.Go.GoTrapezoid.C">
            <summary>
            Gets or sets the third of the four trapezoid's points.
            </summary>
            <value>
            The <c>PointF</c> value is in document coordinates.
            The initial value is (10, 10).
            </value>
            <seealso cref="P:Northwoods.Go.GoTrapezoid.A"/>
            <seealso cref="P:Northwoods.Go.GoTrapezoid.B"/>
            <seealso cref="P:Northwoods.Go.GoTrapezoid.D"/>
        </member>
        <member name="P:Northwoods.Go.GoTrapezoid.D">
            <summary>
            Gets or sets the fourth of the four trapezoid's points;
            </summary>
            <value>
            The <c>PointF</c> value is in document coordinates.
            The initial value is (0, 10).
            </value>
            <seealso cref="P:Northwoods.Go.GoTrapezoid.A"/>
            <seealso cref="P:Northwoods.Go.GoTrapezoid.B"/>
            <seealso cref="P:Northwoods.Go.GoTrapezoid.C"/>
        </member>
        <member name="T:Northwoods.Go.GoTriangle">
            <summary>
            A shape with three straight sides.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoTriangle.ChangedPointA">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoTriangle.ChangedPointB">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoTriangle.ChangedPointC">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoTriangle.ChangedAllPoints">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoTriangle.#ctor">
            <summary>
            The constructor produces a triangle that the user cannot resize in realtime.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoTriangle.CopyObject(Northwoods.Go.GoCopyDictionary)">
            <summary>
            </summary>
            <param name="env"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.GoTriangle.ComputeBounds">
            <summary>
            Calculate the minimum rectangle that includes all three points.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.GoTriangle.OnBoundsChanged(System.Drawing.RectangleF)">
            <summary>
            When the bounds change, update the points appropriately.
            </summary>
            <param name="old"></param>
        </member>
        <member name="M:Northwoods.Go.GoTriangle.Paint(System.Drawing.Graphics,Northwoods.Go.GoView)">
            <summary>
            Paint a triangle, possibly shadowed.
            </summary>
            <param name="g"></param>
            <param name="view"></param>
        </member>
        <member name="M:Northwoods.Go.GoTriangle.ContainsPoint(Northwoods.Go.PointF)">
            <summary>
            Consider the actual shape of the triangle to determine
            if a given point is inside.
            </summary>
            <param name="p"></param>
            <returns></returns>
            <remarks>
            Currently this does not take the pen width into account.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoTriangle.GetNearestIntersectionPoint(Northwoods.Go.PointF,Northwoods.Go.PointF,Northwoods.Go.PointF@)">
            <summary>
            The closest point of a triangle that intersects with a given line
            is the closest such point of each of its three line segments.
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.GoTriangle.DoResize(Northwoods.Go.GoView,System.Drawing.RectangleF,Northwoods.Go.PointF,System.Int32,Northwoods.Go.GoInputState,System.Drawing.SizeF,System.Drawing.SizeF)">
            <summary>
            Support either allowing the user to move the triangle vertices around
            individually, or treating the triangle as a whole object.
            </summary>
            <param name="view"></param>
            <param name="origRect"></param>
            <param name="newPoint"></param>
            <param name="whichHandle"></param>
            <param name="evttype"></param>
            <param name="min"></param>
            <param name="max"></param>
            <remarks>
            When <see cref="P:Northwoods.Go.GoObject.ResizesRealtime"/> is true, this method always sets
            the corresponding point property to <paramref name="newPoint"/>.
            Otherwise it only sets it when the <paramref name="evttype"/>
            is <see cref="F:Northwoods.Go.GoInputState.Finish"/> or <see cref="F:Northwoods.Go.GoInputState.Cancel"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoTriangle.AddSelectionHandles(Northwoods.Go.GoSelection,Northwoods.Go.GoObject)">
            <summary>
            If Resizable and Reshapable, support individual triangle vertex
            resize handles.
            </summary>
            <param name="sel"></param>
            <param name="selectedObj"></param>
        </member>
        <member name="M:Northwoods.Go.GoTriangle.CopyOldValueForUndo(Northwoods.Go.GoChangedEventArgs)">
            <summary>
            Copies state to permit an undo.
            </summary>
            <seealso cref="M:Northwoods.Go.GoObject.ChangeValue(Northwoods.Go.GoChangedEventArgs,System.Boolean)"/>
        </member>
        <member name="M:Northwoods.Go.GoTriangle.CopyNewValueForRedo(Northwoods.Go.GoChangedEventArgs)">
            <summary>
            Copies state to permit a redo.
            </summary>
            <seealso cref="M:Northwoods.Go.GoObject.ChangeValue(Northwoods.Go.GoChangedEventArgs,System.Boolean)"/>
        </member>
        <member name="M:Northwoods.Go.GoTriangle.ChangeValue(Northwoods.Go.GoChangedEventArgs,System.Boolean)">
            <summary>
            Performs changes for undo and redo.
            </summary>
            <seealso cref="M:Northwoods.Go.GoObject.ChangeValue(Northwoods.Go.GoChangedEventArgs,System.Boolean)"/>
        </member>
        <member name="P:Northwoods.Go.GoTriangle.A">
            <summary>
            Gets or sets this triangle's first point.
            </summary>
            <value>
            The <c>PointF</c> value is in document coordinates.
            The initial value is (0, 0).
            </value>
            <remarks>
            <see cref="P:Northwoods.Go.GoTriangle.B"/>.
            <see cref="P:Northwoods.Go.GoTriangle.C"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoTriangle.B">
            <summary>
            Gets or sets this triangle's second point.
            </summary>
            <value>
            The <c>PointF</c> value is in document coordinates.
            The initial value is (10, 0).
            </value>
            <remarks>
            <see cref="P:Northwoods.Go.GoTriangle.A"/>.
            <see cref="P:Northwoods.Go.GoTriangle.C"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoTriangle.C">
            <summary>
            Gets or sets this triangle's third point.
            </summary>
            <value>
            The <c>PointF</c> value is in document coordinates.
            The initial value is (5, 10).
            </value>
            <remarks>
            <see cref="P:Northwoods.Go.GoTriangle.A"/>.
            <see cref="P:Northwoods.Go.GoTriangle.B"/>.
            </remarks>
        </member>
        <member name="T:Northwoods.Go.GoBalloon">
            <summary>
            A GoBalloon is a kind of comment that is associated with another object.
            </summary>
        </member>
        <member name="T:Northwoods.Go.GoComment">
            <summary>
            A simple group displaying text with a shadowed background.
            </summary>
        </member>
        <member name="T:Northwoods.Go.IGoLabeledNode">
            <summary>
            Provide access to a textual label for an object.
            </summary>
            <remarks>
            <see cref="T:Northwoods.Go.GoNode"/> implements this interface, as does <see cref="T:Northwoods.Go.GoComment"/>.
            Typically you will want to implement or override this method to provide
            efficient access to a particular <see cref="T:Northwoods.Go.GoText"/> object in your group.
            The text string is used by <see cref="M:Northwoods.Go.GoDocument.FindNode(System.String,System.Boolean,System.Boolean)"/> and
            <see cref="M:Northwoods.Go.GoView.SelectNextNode(System.Char)"/> to search for nodes meeting certain criteria.
            Note that this interface is independent of <see cref="T:Northwoods.Go.IGoNode"/>--in other words,
            not all <see cref="T:Northwoods.Go.GoObject"/> classes that implement <c>IGoLabeledNode</c>
            will implement <see cref="T:Northwoods.Go.IGoNode"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.IGoLabeledNode.Text">
            <summary>
            Gets the <see cref="P:Northwoods.Go.IGoLabeledNode.Label"/>'s text string.
            </summary>
            <remarks>
            This property is normally implemented to return <c>Label.Text</c>.
            This may return null if there is no <see cref="P:Northwoods.Go.IGoLabeledNode.Label"/>.
            You may wish to implement this differently if there is no label but
            there is a string naturally associated with the object, or if the
            desired string might be different than the label's text string.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.IGoLabeledNode.Label">
            <summary>
            Gets a <see cref="T:Northwoods.Go.GoText"/> representing an object's label.
            </summary>
            <remarks>
            This property is typically used by <see cref="P:Northwoods.Go.IGoLabeledNode.Text"/>.
            Normally the <c>F2</c> key will invoke <see cref="M:Northwoods.Go.GoView.EditEdit"/>
            to start the user's in-place editing of this text label.
            </remarks>
        </member>
        <member name="T:Northwoods.Go.IGoIdentifiablePart">
            <summary>
            This interface provides a unique identifier for a part of a document.
            </summary>
        </member>
        <member name="P:Northwoods.Go.IGoIdentifiablePart.PartID">
            <summary>
            Gets or sets the unique ID of this part in its document.
            </summary>
            <value>
            This value is invalid unless this <see cref="T:Northwoods.Go.GoObject"/> is part of a
            <see cref="T:Northwoods.Go.GoDocument"/> whose <see cref="P:Northwoods.Go.GoDocument.MaintainsPartID"/> property is true.
            </value>
        </member>
        <member name="F:Northwoods.Go.GoComment.ChangedTopLeftMargin">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoComment.ChangedBottomRightMargin">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoComment.ChangedPartID">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoComment.#ctor">
            <summary>
            Create a GoComment displaying an empty string.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoComment.CreateBackground">
            <summary>
            Create and initialize the background for the comment, which is normally a
            <see cref="T:Northwoods.Go.GoRectangle"/> with a light yellow <see cref="P:Northwoods.Go.GoShape.Brush"/>
            and a drop-shadow effect.
            </summary>
            <returns></returns>
            <example>
            If you override this method, you may want the definition to do
            some of the things that the standard definition does:
            <code>
             protected virtual GoObject CreateBackground() {
               GoRectangle r = new GoRectangle();
               r.Shadowed = true;
               r.Selectable = false;
               r.Pen = GoShape.Pens_LightGray;
               r.Brush = GoShape.Brushes_LemonChiffon;
               return r;
             }
            </code>
            </example>
        </member>
        <member name="M:Northwoods.Go.GoComment.CreateLabel">
            <summary>
            Create and initialize the <see cref="T:Northwoods.Go.GoText"/> label for displaying the
            comment, which normally supports multiple lines and is editable.
            </summary>
            <returns></returns>
            <example>
            If you override this method, you may want the definition to do
            some of the things that the standard definition does:
            <code>
             protected virtual GoText CreateLabel() {
               GoText l = new GoText();
               l.Selectable = false;
               l.Multiline = true;
               l.Editable = true;
               this.Editable = true;
               return l;
             }
            </code>
            </example>
        </member>
        <member name="M:Northwoods.Go.GoComment.CopyChildren(Northwoods.Go.GoGroup,Northwoods.Go.GoCopyDictionary)">
            <summary>
            Make copies of the background and the text object.
            </summary>
            <param name="newgroup"></param>
            <param name="env"></param>
        </member>
        <member name="M:Northwoods.Go.GoComment.Remove(Northwoods.Go.GoObject)">
            <summary>
            If any part is removed from this group,
            be sure to remove any references in local fields.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Northwoods.Go.GoComment.LayoutChildren(Northwoods.Go.GoObject)">
            <summary>
            This method uses the <see cref="P:Northwoods.Go.GoComment.TopLeftMargin"/> and <see cref="P:Northwoods.Go.GoComment.BottomRightMargin"/>
            properties to decide how much bigger the background should be than the text label.
            </summary>
            <param name="childchanged"></param>
        </member>
        <member name="M:Northwoods.Go.GoComment.DoBeginEdit(Northwoods.Go.GoView)">
            <summary>
            Start editing the label.
            </summary>
            <param name="view"></param>
        </member>
        <member name="M:Northwoods.Go.GoComment.ChangeValue(Northwoods.Go.GoChangedEventArgs,System.Boolean)">
            <summary>
            Handle this class's property changes for undo and redo
            </summary>
            <param name="e"></param>
            <param name="undo"></param>
        </member>
        <member name="P:Northwoods.Go.GoComment.Shadowed">
            <summary>
            Giving this node a shadow really means giving the background a shadow.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoComment.TopLeftMargin">
            <summary>
            Gets or sets the space between the top and left sides of the text label
            with the top and left sides of the background.
            </summary>
            <remarks>
            If you change the background to be a different shape by overriding
            <see cref="M:Northwoods.Go.GoComment.CreateBackground"/>, you will probably want to set this margin
            and <see cref="P:Northwoods.Go.GoComment.BottomRightMargin"/> appropriately so that the text fits.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoComment.BottomRightMargin">
            <summary>
            Gets or sets the space between the bottom and right sides of the text label
            with the bottom and right sides of the background.
            </summary>
            <remarks>
            If you change the background to be a different shape by overriding
            <see cref="M:Northwoods.Go.GoComment.CreateBackground"/>, you will probably want to set this margin
            and <see cref="P:Northwoods.Go.GoComment.TopLeftMargin"/> appropriately so that the text fits.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoComment.Label">
            <summary>
            Gets the label for this group, implementing <see cref="T:Northwoods.Go.IGoLabeledNode"/>.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoComment.Text">
            <summary>
            Gets or sets the text string for this node, implementing <see cref="T:Northwoods.Go.IGoLabeledNode"/>.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoComment.Background">
            <summary>
            Gets the background object for this comment.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoComment.PartID">
            <summary>
            Gets or sets the unique ID of this part within its document.
            </summary>
            <value>
            The value is invalid unless this object is part of a <see cref="T:Northwoods.Go.GoDocument"/>
            whose <see cref="P:Northwoods.Go.GoDocument.MaintainsPartID"/> property is true.
            Setting this property should be done only by <see cref="T:Northwoods.Go.GoDocument"/>
            when this object is added to the document.
            </value>
        </member>
        <member name="F:Northwoods.Go.GoBalloon.ChangedAnchor">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoBalloon.ChangedCorner">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoBalloon.ChangedBaseWidth">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoBalloon.#ctor">
            <summary>
            Create a balloon comment that initially has no text and no anchor
            object to point to.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoBalloon.CopyObject(Northwoods.Go.GoCopyDictionary)">
            <summary>
            The <see cref="P:Northwoods.Go.GoBalloon.Anchor"/> object may or may not be copied;
            let <see cref="M:Northwoods.Go.GoBalloon.CopyObjectDelayed(Northwoods.Go.GoCopyDictionary,Northwoods.Go.GoObject)"/> handle it.
            </summary>
            <param name="env"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.GoBalloon.CopyObjectDelayed(Northwoods.Go.GoCopyDictionary,Northwoods.Go.GoObject)">
            <summary>
            Make sure the <see cref="P:Northwoods.Go.GoBalloon.Anchor"/> is the copied object, and update the
            background polygon's shape appropriately.
            </summary>
            <param name="env"></param>
            <param name="newobj"></param>
        </member>
        <member name="M:Northwoods.Go.GoBalloon.CreateBackground">
            <summary>
            Change the background from a rectangle to a polygon that stretches out towards
            the <see cref="P:Northwoods.Go.GoBalloon.Anchor"/> object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.GoBalloon.LayoutChildren(Northwoods.Go.GoObject)">
            <summary>
            Make sure the background polygon is moved along with the text label
            and shaped so that it points at the anchor.
            </summary>
            <param name="childchanged"></param>
        </member>
        <member name="M:Northwoods.Go.GoBalloon.MoveChildren(System.Drawing.RectangleF)">
            <summary>
            Moving a balloon should change the size and shape, because the
            anchor might not be moving along.
            </summary>
            <param name="old"></param>
        </member>
        <member name="M:Northwoods.Go.GoBalloon.OnObservedChanged(Northwoods.Go.GoObject,System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)">
            <summary>
            If the <see cref="P:Northwoods.Go.GoBalloon.Anchor"/> moves or resizes, we need to update the
            background polygon's shape.
            </summary>
            <param name="observed"></param>
            <param name="subhint"></param>
            <param name="oldI"></param>
            <param name="oldVal"></param>
            <param name="oldRect"></param>
            <param name="newI"></param>
            <param name="newVal"></param>
            <param name="newRect"></param>
        </member>
        <member name="M:Northwoods.Go.GoBalloon.OnLayerChanged(Northwoods.Go.GoLayer,Northwoods.Go.GoLayer,Northwoods.Go.GoObject)">
            <summary>
            If the <see cref="P:Northwoods.Go.GoBalloon.Anchor"/> is removed from the document,
            set the balloon's <see cref="P:Northwoods.Go.GoBalloon.Anchor"/> property to null.
            </summary>
            <param name="oldlayer"></param>
            <param name="newlayer"></param>
            <param name="mainObj"></param>
        </member>
        <member name="M:Northwoods.Go.GoBalloon.ChangeValue(Northwoods.Go.GoChangedEventArgs,System.Boolean)">
            <summary>
            Perform the usual undo and redo changes.
            </summary>
            <param name="e"></param>
            <param name="undo"></param>
        </member>
        <member name="P:Northwoods.Go.GoBalloon.SelectionObject">
            <summary>
            The label gets the selection handle.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoBalloon.Corner">
            <summary>
            Gets or sets the maximum radial width and height of each corner.
            </summary>
            <value>
            The default value is 4x4.
            </value>
        </member>
        <member name="P:Northwoods.Go.GoBalloon.Anchor">
            <summary>
            This is the object that the balloon always seems to be pointing to.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoBalloon.BaseWidth">
            <summary>
            Gets or sets the width of the base of the triangular region of the balloon,
            near the text label.
            </summary>
            <value>
            This value defaults to 30.  The value must be greater than zero.
            </value>
        </member>
        <member name="T:Northwoods.Go.GoBasicNode">
            <summary>
            A simple elliptical or rectangular node with a single port and an optional text label.
            </summary>
            <remarks>
            The position of the label relative to the ellipse or rectangle shape is determined
            by the <see cref="P:Northwoods.Go.GoBasicNode.LabelSpot"/> property.
            When the spot is <see cref="F:Northwoods.Go.GoObject.Middle"/>, the shape is automatically
            resized to fit the label's text, and the port is hidden and resized to be the
            same size as the shape itself.
            Setting the <see cref="P:Northwoods.Go.GoNode.Location"/>, <see cref="P:Northwoods.Go.GoNode.Resizable"/>,
            <see cref="P:Northwoods.Go.GoNode.Reshapable"/> and <see cref="P:Northwoods.Go.GoNode.Shadowed"/> properties
            actually set the same properties on the
            <see cref="P:Northwoods.Go.GoBasicNode.SelectionObject"/>, which is the <see cref="P:Northwoods.Go.GoBasicNode.Shape"/>.
            </remarks>
        </member>
        <member name="T:Northwoods.Go.GoNode">
            <summary>
            This class provides the standard implementation of <see cref="T:Northwoods.Go.IGoNode"/>
            as a <see cref="P:Northwoods.Go.GoNode.GoObject"/>.
            </summary>
        </member>
        <member name="T:Northwoods.Go.IGoNode">
            <summary>
            This interface represents an abstract object that is connected to other
            nodes using links.
            </summary>
            <remarks>
            Every <c>IGoNode</c> also implements <see cref="P:Northwoods.Go.IGoGraphPart.GoObject"/>,
            <see cref="P:Northwoods.Go.IGoGraphPart.UserFlags"/>, and <see cref="P:Northwoods.Go.IGoGraphPart.UserObject"/>.
            </remarks>
            <seealso cref="T:Northwoods.Go.IGoPort"/>
            <seealso cref="T:Northwoods.Go.IGoLink"/>
            <seealso cref="T:Northwoods.Go.IGoLabeledNode"/>
        </member>
        <member name="T:Northwoods.Go.IGoGraphPart">
            <summary>
            This interface represents an abstract part of a graph, and is the supertype for
            <see cref="T:Northwoods.Go.IGoNode"/>, <see cref="T:Northwoods.Go.IGoPort"/>, and <see cref="T:Northwoods.Go.IGoLink"/>.
            </summary>
        </member>
        <member name="P:Northwoods.Go.IGoGraphPart.GoObject">
            <summary>
            Gets a <see cref="P:Northwoods.Go.IGoGraphPart.GoObject"/> associated with this node, port, or link.
            </summary>
            <remarks>
            This property is how an abstract network created with <see cref="T:Northwoods.Go.IGoNode"/>,
            <see cref="T:Northwoods.Go.IGoPort"/>, and <see cref="T:Northwoods.Go.IGoLink"/> can be tied to concrete
            subclasses of <see cref="P:Northwoods.Go.IGoGraphPart.GoObject"/> that can be added to a
            <see cref="T:Northwoods.Go.GoDocument"/> and displayed in a <see cref="T:Northwoods.Go.GoView"/>.
            <see cref="T:Northwoods.Go.GoNode"/>, <see cref="T:Northwoods.Go.GoPort"/>, and <see cref="T:Northwoods.Go.GoLink"/> are all
            subclasses of <see cref="P:Northwoods.Go.IGoGraphPart.GoObject"/>, so those implementations of this
            property just return themselves and don't allow the property to be set.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.IGoGraphPart.UserFlags">
            <summary>
            Gets or sets an integer value associated with this port.
            </summary>
            <remarks>
            You can use this property for many different purposes, such as associating
            some application specific data with the node, port, or link.
            </remarks>
            <seealso cref="P:Northwoods.Go.IGoGraphPart.UserObject"/>
        </member>
        <member name="P:Northwoods.Go.IGoGraphPart.UserObject">
            <summary>
            Gets or sets an object associated with this port.
            </summary>
            <remarks>
            You can use this property for many different purposes, such as associating
            some application specific data with the node, port, or link.
            </remarks>
            <seealso cref="P:Northwoods.Go.IGoGraphPart.UserFlags"/>
        </member>
        <member name="P:Northwoods.Go.IGoNode.Sources">
            <summary>
            Gets an enumerator over all of the nodes that have links coming into this node.
            </summary>
            <remarks>
            The enumerator iterates over the set of all nodes that have ports that have any
            destination links coming into any port of this node.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.IGoNode.Destinations">
            <summary>
            Gets an enumerator over all of the nodes that have links going out of this node.
            </summary>
            <remarks>
            The enumerator iterates over the set of all nodes that have ports that have any
            source links going out of any port of this node.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.IGoNode.Nodes">
            <summary>
            Gets an enumerator over all of the nodes that have links going out of or coming into this node.
            </summary>
            <remarks>
            The enumerator iterates over the all nodes that have ports that have any
            links connected to any port of this node.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.IGoNode.SourceLinks">
            <summary>
            Gets an enumerator over all of the links coming into this node.
            </summary>
            <remarks>
            The enumerator iterates over the set of all links that come into
            any port of this node.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.IGoNode.DestinationLinks">
            <summary>
            Gets an enumerator over all of the links going out of this node.
            </summary>
            <remarks>
            The enumerator iterates over the set of all links that go out of
            any port of this node.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.IGoNode.Links">
            <summary>
            Gets an enumerator over all of the links connected at this node.
            </summary>
            <remarks>
            The enumerator iterates over the set of all links that are connected
            at any port of this node.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.IGoNode.Ports">
            <summary>
            Gets an enumerator over all of the ports that are part of this node.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoNode.ChangedNodeUserFlags">
            <summary>
            This is a <see cref="!:GoObject.Changed"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoNode.ChangedNodeUserObject">
            <summary>
            This is a <see cref="!:GoObject.Changed"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoNode.ChangedToolTipText">
            <summary>
            This is a <see cref="!:GoObject.Changed"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoNode.ChangedPropertiesDelegatedToSelectionObject">
            <summary>
            This is a <see cref="!:GoObject.Changed"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoNode.ChangedPartID">
            <summary>
            This is a <see cref="!:GoObject.Changed"/> subhint.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoNode.#ctor">
            <summary>
            The constructor produces an empty node--no child objects (and thus no ports
            nor connected links) at no particular location.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoNode.CopyObject(Northwoods.Go.GoCopyDictionary)">
            <summary>
            Make sure cached information is not copied.
            </summary>
            <param name="env"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.GoNode.DoBeginEdit(Northwoods.Go.GoView)">
            <summary>
            Start editing the label.
            </summary>
            <param name="view"></param>
        </member>
        <member name="M:Northwoods.Go.GoNode.GetToolTip(Northwoods.Go.GoView)">
            <summary>
            Return a string to be displayed in a tooltip, or null for none.
            </summary>
            <param name="view"></param>
            <returns>
            Return this node's <see cref="P:Northwoods.Go.GoNode.ToolTipText"/>.
            </returns>
        </member>
        <member name="M:Northwoods.Go.GoNode.ChangeValue(Northwoods.Go.GoChangedEventArgs,System.Boolean)">
            <summary>
            Performs changes for undo and redo.
            </summary>
            <seealso cref="!:GoObject.ChangeValue"/>
        </member>
        <member name="P:Northwoods.Go.GoNode.GoObject">
            <summary>
            Returns itself as a <see cref="P:Northwoods.Go.GoNode.GoObject"/>.
            </summary>
            <remarks>
            This property cannot be set.
            </remarks>
            <seealso cref="P:Northwoods.Go.IGoGraphPart.GoObject"/>
        </member>
        <member name="P:Northwoods.Go.GoNode.UserFlags">
            <summary>
            Gets or sets an integer value associated with this node.
            </summary>
            <value>
            The initial value is zero.
            </value>
            <seealso cref="P:Northwoods.Go.IGoGraphPart.UserFlags"/>
        </member>
        <member name="P:Northwoods.Go.GoNode.UserObject">
            <summary>
            Gets or sets an object associated with this node.
            </summary>
            <value>
            The initial value is null.
            </value>
            <seealso cref="P:Northwoods.Go.IGoGraphPart.UserObject"/>
        </member>
        <member name="P:Northwoods.Go.GoNode.Sources">
            <summary>
            Gets an enumerator over all of the nodes that have links coming into this node.
            </summary>
            <remarks>
            The enumerator iterates over the set of all nodes that have ports that have any
            destination links coming into any port of this node.
            </remarks>
            <seealso cref="P:Northwoods.Go.IGoNode.Sources"/>
        </member>
        <member name="P:Northwoods.Go.GoNode.Destinations">
            <summary>
            Gets an enumerator over all of the nodes that have links going out of this node.
            </summary>
            <remarks>
            The enumerator iterates over the set of all nodes that have ports that have any
            source links going out of any port of this node.
            </remarks>
            <seealso cref="P:Northwoods.Go.IGoNode.Destinations"/>
            <seealso cref="P:Northwoods.Go.IGoNode.Nodes"/>
        </member>
        <member name="P:Northwoods.Go.GoNode.Nodes">
            <summary>
            Gets an enumerator over all of the nodes that are connected to this node.
            </summary>
            <remarks>
            The enumerator iterates over the set of all nodes that have ports that are
            connected in either direction to any port of this node.
            </remarks>
            <seealso cref="P:Northwoods.Go.IGoNode.Sources"/>
            <seealso cref="P:Northwoods.Go.IGoNode.Destinations"/>
        </member>
        <member name="P:Northwoods.Go.GoNode.SourceLinks">
            <summary>
            Gets an enumerator over all of the links coming into this node.
            </summary>
            <remarks>
            The enumerator iterates over the set of all links that come into
            any port of this node.
            </remarks>
            <seealso cref="P:Northwoods.Go.IGoNode.SourceLinks"/>
        </member>
        <member name="P:Northwoods.Go.GoNode.DestinationLinks">
            <summary>
            Gets an enumerator over all of the links going out of this node.
            </summary>
            <remarks>
            The enumerator iterates over the set of all links that go out of
            any port of this node.
            </remarks>
            <seealso cref="P:Northwoods.Go.IGoNode.DestinationLinks"/>
        </member>
        <member name="P:Northwoods.Go.GoNode.Links">
            <summary>
            Gets an enumerator over all of the links connected to this node.
            </summary>
            <remarks>
            The enumerator iterates over the set of all links that come into
            or go out of any port of this node.
            </remarks>
            <seealso cref="P:Northwoods.Go.IGoNode.SourceLinks"/>
            <seealso cref="P:Northwoods.Go.IGoNode.DestinationLinks"/>
        </member>
        <member name="P:Northwoods.Go.GoNode.Ports">
            <summary>
            Gets an enumerator over all of the ports that are part of this node.
            </summary>
            <seealso cref="P:Northwoods.Go.IGoNode.Ports"/>
        </member>
        <member name="P:Northwoods.Go.GoNode.Text">
            <summary>
            Get the principal text string associated with a node.
            </summary>
            <value>
            By default this will just get and set the <see cref="P:Northwoods.Go.GoNode.Label"/>'s
            <see cref="P:Northwoods.Go.GoText.Text"/> property.
            If no such label exists, get returns an empty string and set
            does nothing.
            </value>
            <remarks>
            This property can be used by code that needs to get some string
            that may identify this node, albeit not necessarily uniquely and
            not necessarily visibly.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoNode.Label">
            <summary>
            Get the main GoText object associated with a node.
            </summary>
            <value>
            By default this searches for and returns the first child that is a <see cref="T:Northwoods.Go.GoText"/>.
            </value>
            <remarks>
            By default setting this property does nothing.
            However, some derived classes may implement setting this property.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoNode.ToolTipText">
            <summary>
            Gets or sets a string to be displayed in a tooltip.
            </summary>
            <value>
            The initial value is null, which means don't display a tooltip.
            </value>
            <remarks>
            Returning an empty string will display an empty tooltip.
            </remarks>
            <seealso cref="P:Northwoods.Go.IGoGraphPart.UserFlags"/>
        </member>
        <member name="P:Northwoods.Go.GoNode.Location">
            <summary>
            Assume the natural location of a node is the center of the <see cref="!:GoObject.SelectionObject"/>,
            if it is different from the whole group itself.
            </summary>
            <remarks>
            If there is no separate <see cref="!:GoObject.SelectionObject"/>, then
            the <c>Location</c> is the same as the <see cref="!:GoObject.Position"/>.
            Setting the location would naturally be implemented as
            <code>this.SelectionObject.Center = value</code>
            but for efficiency, it instead is implemented by setting this node's
            <see cref="!:GoObject.Position"/> so that the <see cref="!:GoObject.SelectionObject"/>'s
            <c>Center</c> is at the new location.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoNode.Shadowed">
            <summary>
            Giving this node a shadow really means giving the <see cref="!:GoObject.SelectionObject"/> a shadow.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoNode.Resizable">
            <summary>
            Whether this node is resizable is really determined by whether the <see cref="!:GoObject.SelectionObject"/> is resizable.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoNode.Reshapable">
            <summary>
            Whether this node is reshapable is really determined by whether the <see cref="!:GoObject.SelectionObject"/> is reshapable.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoNode.ResizesRealtime">
            <summary>
            Whether the user can resize this node continuously is really determined by the <see cref="!:GoObject.SelectionObject"/>.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoNode.PartID">
            <summary>
            Gets or sets the unique ID of this part within its document.
            </summary>
            <value>
            The value is invalid unless this object is part of a <see cref="T:Northwoods.Go.GoDocument"/>
            whose <see cref="P:Northwoods.Go.GoDocument.MaintainsPartID"/> property is true.
            Setting this property should be done only by <see cref="T:Northwoods.Go.GoDocument"/>
            when this object is added to the document.
            </value>
        </member>
        <member name="F:Northwoods.Go.GoBasicNode.ChangedLabelSpot">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoBasicNode.ChangedShape">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoBasicNode.ChangedLabel">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoBasicNode.ChangedPort">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoBasicNode.ChangedMiddleLabelMargin">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoBasicNode.ChangedAutoResizes">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoBasicNode.#ctor">
            <summary>
            Create a GoBasicNode with just a port and a shape centered behind the port.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoBasicNode.CreatePort">
            <summary>
            Create and initialize a <see cref="T:Northwoods.Go.GoPort"/>.
            </summary>
            <returns>
            a <see cref="T:Northwoods.Go.GoPort"/> that is a shape with no particular
            link spot for links either coming into or going out of the port
            </returns>
            <example>
            If you override this method, you may want the definition to do
            some of the things that the standard definition does:
            <code>
              protected virtual GoPort CreatePort() {
                GoPort p = new GoPort();
                p.Style = GoPortStyle.Ellipse;  // black circle/ellipse
                // use custom link spots for both links coming in and going out
                p.FromSpot = GoObject.NoSpot;
                p.ToSpot = GoObject.NoSpot;
                p.Size = new SizeF(7, 7);
                return p;
              }
            </code>
            </example>
        </member>
        <member name="M:Northwoods.Go.GoBasicNode.CreateShape(Northwoods.Go.GoPort)">
            <summary>
            Create and initialize a <see cref="T:Northwoods.Go.GoShape"/>.
            </summary>
            <param name="p">the <see cref="T:Northwoods.Go.GoPort"/> created for this node by <see cref="M:Northwoods.Go.GoBasicNode.CreatePort"/></param>
            <returns>
            By default this returns a <see cref="T:Northwoods.Go.GoEllipse"/> that is somewhat larger than the port <paramref name="p"/>.
            </returns>
            <remarks>
            By default the ellipse uses a white brush--set the <see cref="P:Northwoods.Go.GoBasicNode.Pen"/>
            and <see cref="P:Northwoods.Go.GoBasicNode.Brush"/> properties to change the appearance.
            The shape is not itself selectable, resizable, or reshapable.
            </remarks>
            <example>
            If you override this method, you may want the definition to do
            some of the things that the standard definition does:
            <code>
             protected virtual GoShape CreateShape(GoPort p) {
               // create the bigger circle/ellipse around and behind the port
               GoShape e = new GoEllipse();
               SizeF psize = p.Size;
               e.Size = new SizeF(psize.Width + 2*7, psize.Height + 2*7);
               e.Selectable = false;
               e.Resizable = false;
               e.Reshapable = false;
               e.Brush = GoShape.Brushes_White;
               return e;
             }
            </code>
            </example>
        </member>
        <member name="M:Northwoods.Go.GoBasicNode.CreateLabel(System.String)">
            <summary>
            Create and initialize a <see cref="T:Northwoods.Go.GoText"/> as the label.
            </summary>
            <param name="name"></param>
            <returns>
            a non-selectable, non-editable, non-rescaling <see cref="T:Northwoods.Go.GoText"/>
            displaying <paramref name="name"/>
            </returns>
            <example>
            If you override this method, you may want the definition to do
            some of the things that the standard definition does:
            <code>
             protected virtual GoText CreateLabel(String name) {
               // create a label with a transparent background that is centered
               GoText l = new GoText();
               l.Text = name;
               l.Selectable = false;
               return l;
             }
            </code>
            </example>
        </member>
        <member name="M:Northwoods.Go.GoBasicNode.CopyChildren(Northwoods.Go.GoGroup,Northwoods.Go.GoCopyDictionary)">
            <summary>
            Make copies of the shape, label and port.
            </summary>
            <param name="newgroup"></param>
            <param name="env"></param>
        </member>
        <member name="M:Northwoods.Go.GoBasicNode.Remove(Northwoods.Go.GoObject)">
            <summary>
            If any part is removed from this group,
            be sure to remove any references in local fields.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Northwoods.Go.GoBasicNode.LayoutChildren(Northwoods.Go.GoObject)">
            <summary>
            The port is centered in the shape; the label is positioned according
            to <see cref="P:Northwoods.Go.GoBasicNode.LabelSpot"/> relative to the shape.
            </summary>
            <param name="childchanged"></param>
            <remarks>
            When the <see cref="P:Northwoods.Go.GoBasicNode.LabelSpot"/> is <see cref="F:Northwoods.Go.GoObject.Middle"/>,
            we automatically resize the shape to be somewhat larger than the label,
            and we size the port to be the same size as the shape.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoBasicNode.OnLabelSpotChanged(System.Int32)">
            <summary>
            Determine how to change the whole node when the LabelSpot changes.
            </summary>
            <param name="old">the former <see cref="P:Northwoods.Go.GoBasicNode.LabelSpot"/> value</param>
            <remarks>
            By default, setting the <see cref="P:Northwoods.Go.GoBasicNode.LabelSpot"/> to <see cref="F:Northwoods.Go.GoObject.Middle"/>
            will make the shape big enough to hold the text and the port the same size as
            the shape.  It will also make the node not resizable.
            It also changes the port's <see cref="P:Northwoods.Go.GoPort.Style"/>
            to <see cref="F:Northwoods.Go.GoPortStyle.None"/>, so that the port does not obscure the label.
            Changing the <see cref="P:Northwoods.Go.GoBasicNode.LabelSpot"/> from <see cref="F:Northwoods.Go.GoObject.Middle"/> to some
            other value will reset the shape and port sizes to their initial, default values.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoBasicNode.OnAutoResizesChanged(System.Boolean)">
            <summary>
            This method is called when the value of <see cref="P:Northwoods.Go.GoBasicNode.AutoResizes"/> changes.
            </summary>
            <remarks>
            This just changes the <see cref="P:Northwoods.Go.GoBasicNode.Label"/>'s <see cref="P:Northwoods.Go.GoText.Wrapping"/>
            and <see cref="P:Northwoods.Go.GoText.Clipping"/> properties to be true when the
            <see cref="P:Northwoods.Go.GoBasicNode.AutoResizes"/> property is false, and vice-versa.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoBasicNode.ChangeValue(Northwoods.Go.GoChangedEventArgs,System.Boolean)">
            <summary>
            Handle this class's property changes for undo and redo
            </summary>
            <param name="e"></param>
            <param name="undo"></param>
        </member>
        <member name="P:Northwoods.Go.GoBasicNode.SelectionObject">
            <summary>
            The user appears to select the shape, not the node as a whole.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoBasicNode.LabelSpot">
            <summary>
            Gets or sets the spot at which the label, if any, should be positioned
            relative to the shape.
            </summary>
            <remarks>
            This calls the virtual method <see cref="M:Northwoods.Go.GoBasicNode.OnLabelSpotChanged(System.Int32)"/> to determine
            how to change all of the parts of the node appropriately.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoBasicNode.MiddleLabelMargin">
            <summary>
            Gets or sets the how much larger the <see cref="P:Northwoods.Go.GoBasicNode.Shape"/> should be on each side of
            the <see cref="P:Northwoods.Go.GoBasicNode.Label"/> when the <see cref="P:Northwoods.Go.GoBasicNode.LabelSpot"/> is <see cref="F:Northwoods.Go.GoObject.Middle"/>.
            </summary>
            <value>
            The default value is a width of 20 and a height of 10, which is adequate for an ellipse
            around short text strings.
            </value>
        </member>
        <member name="P:Northwoods.Go.GoBasicNode.AutoResizes">
            <summary>
            Gets or sets whether the size of the background is changed as the text label's size changes,
            when the <see cref="P:Northwoods.Go.GoBasicNode.LabelSpot"/> is <c>GoObject.Middle</c>.
            </summary>
            <value>
            The default value is true.
            </value>
        </member>
        <member name="P:Northwoods.Go.GoBasicNode.Pen">
            <summary>
            Gets or sets the shape's <see cref="P:Northwoods.Go.GoShape.Pen"/> property.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoBasicNode.Brush">
            <summary>
            Gets or sets the shape's <see cref="P:Northwoods.Go.GoShape.Brush"/> property.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoBasicNode.Text">
            <summary>
            The text is of course just the label's text.
            </summary>
            <remarks>
            Setting this property will create and position the label, if needed.
            Setting it to a null value will remove the text label from this node.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoBasicNode.Shape">
            <summary>
            Gets or sets the <see cref="T:Northwoods.Go.GoShape"/>, the background for this node.
            </summary>
            <value>
            The new value may be null, to simply remove the background shape.
            If non-null, the shape should have the <see cref="P:Northwoods.Go.GoObject.Selectable"/>
            property set to false.
            </value>
            <remarks>
            Instead of setting the shape after creating a node, you may find it
            easier to override the <see cref="M:Northwoods.Go.GoBasicNode.CreateShape(Northwoods.Go.GoPort)"/> method.
            The new shape will have its Center location,
            Selectable, Resizable, Reshapable, ResizesRealtime, and Shadowed
            properties copied from the old shape.
            Setting this property will also set the <see cref="P:Northwoods.Go.GoBasicNode.Port"/>'s
            <see cref="P:Northwoods.Go.GoPort.PortObject"/> to be the new shape.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoBasicNode.Label">
            <summary>
            Gets or sets the <see cref="T:Northwoods.Go.GoText"/>, the label for this node (or null if there is no label).
            </summary>
            <value>
            The new value may be null, to simply remove the label.
            If non-null, the new text object should have the <see cref="P:Northwoods.Go.GoObject.Selectable"/>
            property set to false.
            </value>
            <remarks>
            Instead of setting the label after creating a node, you may find it
            easier to override the <see cref="M:Northwoods.Go.GoBasicNode.CreateLabel(System.String)"/> method.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoBasicNode.Port">
            <summary>
            Gets or sets the <see cref="T:Northwoods.Go.GoPort"/> for this node.
            </summary>
            <value>
            The new value may be null, to simply remove the port.
            If non-null, the port should have the <see cref="P:Northwoods.Go.GoObject.Selectable"/>
            property set to false.
            </value>
            <remarks>
            Setting this property to a new port will also set that port's
            <see cref="P:Northwoods.Go.GoPort.PortObject"/> to be this node's <see cref="P:Northwoods.Go.GoBasicNode.Shape"/>,
            if it didn't already have a <see cref="P:Northwoods.Go.GoPort.PortObject"/>.
            Instead of setting the port after creating a node, you may find it
            easier to override the <see cref="M:Northwoods.Go.GoBasicNode.CreatePort"/> method.
            </remarks>
        </member>
        <member name="T:Northwoods.Go.GoBoxNode">
            <summary>
            A GoBoxNode has a single rectangular port that surrounds another object.
            </summary>
            <remarks>
            This uses a <see cref="T:Northwoods.Go.GoBoxPort"/> to allow links to come in orthogonally
            and be positioned intelligently apart from each other.
            The port is slightly larger than the body object, so that it appears as if
            it were a border for the body object.  Thus users can start drawing links
            by pressing and dragging along the edge of the GoBoxNode.
            </remarks>
        </member>
        <member name="F:Northwoods.Go.GoBoxNode.ChangedBody">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoBoxNode.ChangedPortBorderMargin">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoBoxNode.#ctor">
            <summary>
            Construct a GoBoxNode that by default has a body that is a multiline
            <see cref="T:Northwoods.Go.GoText"/> object with a white background.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoBoxNode.CreateBody">
            <summary>
            This method is called by the <see cref="T:Northwoods.Go.GoBoxNode"/> constructor to
            provide the object in the middle of the rectangular port.
            </summary>
            <returns>
            By default this returns a multiline <see cref="T:Northwoods.Go.GoText"/> with a white background.
            </returns>
            <example>
            If you override this method, you may want the definition to do
            some of the things that the standard definition does:
            <code>
             protected virtual GoObject CreateBody() {
               GoText t = new GoText();
               t.TransparentBackground = false;
               t.BackgroundColor = Color.White;
               t.Multiline = true;
               t.Selectable = false;
               return t;
             }
            </code>
            </example>
        </member>
        <member name="M:Northwoods.Go.GoBoxNode.CreatePort">
            <summary>
            This method is called by the <see cref="T:Northwoods.Go.GoBoxNode"/> constructor to
            provide the node's single port.
            </summary>
            <returns>
            By default this just returns a <see cref="T:Northwoods.Go.GoBoxPort"/>.
            </returns>
            <example>
            If you override this method, you may want the definition to do
            some of the things that the standard definition does:
            <code>
             protected virtual GoPort CreatePort() {
               GoBoxPort p = new GoBoxPort();
               return p;
             }
            </code>
            </example>
        </member>
        <member name="M:Northwoods.Go.GoBoxNode.CopyChildren(Northwoods.Go.GoGroup,Northwoods.Go.GoCopyDictionary)">
            <summary>
            Copy the <see cref="P:Northwoods.Go.GoBoxNode.Port"/> and <see cref="P:Northwoods.Go.GoBoxNode.Body"/>.
            </summary>
            <param name="newgroup"></param>
            <param name="env"></param>
        </member>
        <member name="M:Northwoods.Go.GoBoxNode.LayoutChildren(Northwoods.Go.GoObject)">
            <summary>
            Position the <see cref="P:Northwoods.Go.GoBoxNode.Port"/> to be centered on the <see cref="P:Northwoods.Go.GoBoxNode.Body"/>,
            but sized larger by <see cref="P:Northwoods.Go.GoBoxNode.PortBorderMargin"/> width and height on
            each side.
            </summary>
            <param name="childchanged"></param>
        </member>
        <member name="M:Northwoods.Go.GoBoxNode.Remove(Northwoods.Go.GoObject)">
            <summary>
            If any part is removed from this group,
            be sure to remove any references in local fields.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Northwoods.Go.GoBoxNode.ChangeValue(Northwoods.Go.GoChangedEventArgs,System.Boolean)">
            <summary>
            Perform changes to the body or port margin for undo.
            </summary>
            <param name="e"></param>
            <param name="undo"></param>
        </member>
        <member name="P:Northwoods.Go.GoBoxNode.Body">
            <summary>
            Gets or sets the main object that this node is displaying.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoBoxNode.PortBorderMargin">
            <summary>
            Gets or sets the margin that is always visible for the port on each side of the body.
            </summary>
            <value>
            This specifies the width of each side margin and the height of top margin and the
            height of the bottom margin, in document coordinates.
            By default the width and height are each <c>4</c>, so that the port is <c>8</c>
            units wider and taller than the <see cref="P:Northwoods.Go.GoBoxNode.Body"/>.
            The width and height must be non-negative.
            </value>
        </member>
        <member name="P:Northwoods.Go.GoBoxNode.Port">
            <summary>
            Gets the port for this node.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoBoxNode.LinkPointsSpread">
            <summary>
            Gets or sets whether the link points of the links connected to this node's <see cref="T:Northwoods.Go.GoBoxPort"/>
            are spread evenly along the side of the port, or if they are all at the
            mid-point of the side.
            </summary>
            <value>
            The value actually comes from the <see cref="P:Northwoods.Go.GoBoxNode.Port"/>, which is normally a <see cref="T:Northwoods.Go.GoBoxPort"/>.
            </value>
        </member>
        <member name="T:Northwoods.Go.GoBoxPort">
            <summary>
            A rectangular port that is smart about where each of its
            links is connected, centered on each side, meeting
            the edge of the port orthogonally.
            </summary>
            <remarks>
            Although this class is normally used as part of a <see cref="T:Northwoods.Go.GoBoxNode"/>
            to act as a port that surrounds another object, you can use
            GoBoxPort as part of other groups, such as <see cref="T:Northwoods.Go.GoIconicNode"/>.
            </remarks>
        </member>
        <member name="T:Northwoods.Go.GoPort">
            <summary>
            This class provides the standard implementation of <see cref="T:Northwoods.Go.IGoPort"/>
            as a <see cref="P:Northwoods.Go.GoPort.GoObject"/>.
            </summary>
        </member>
        <member name="T:Northwoods.Go.IGoPort">
            <summary>
            This interface represents an abstract connection point for a link to
            be attached to a node.
            </summary>
            <remarks>
            Every <c>IGoPort</c> also implements <see cref="P:Northwoods.Go.IGoGraphPart.GoObject"/>,
            <see cref="P:Northwoods.Go.IGoGraphPart.UserFlags"/>, and <see cref="P:Northwoods.Go.IGoGraphPart.UserObject"/>.
            </remarks>
            <seealso cref="T:Northwoods.Go.IGoNode"/>
            <seealso cref="T:Northwoods.Go.IGoLink"/>
        </member>
        <member name="M:Northwoods.Go.IGoPort.AddSourceLink(Northwoods.Go.IGoLink)">
            <summary>
            Add a link whose <see cref="P:Northwoods.Go.IGoLink.ToPort"/> should be this port.
            </summary>
            <param name="l"></param>
        </member>
        <member name="M:Northwoods.Go.IGoPort.AddDestinationLink(Northwoods.Go.IGoLink)">
            <summary>
            Add a link whose <see cref="P:Northwoods.Go.IGoLink.FromPort"/> should be this port.
            </summary>
            <param name="l"></param>
        </member>
        <member name="M:Northwoods.Go.IGoPort.RemoveLink(Northwoods.Go.IGoLink)">
            <summary>
            Remove a link from the collection of links connected to this port.
            </summary>
            <param name="l"></param>
        </member>
        <member name="M:Northwoods.Go.IGoPort.ContainsLink(Northwoods.Go.IGoLink)">
            <summary>
            This predicate is true if the given link is connected to this port.
            </summary>
            <param name="l"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.IGoPort.ClearLinks">
            <summary>
            Remove all links connected at this port.
            </summary>
        </member>
        <member name="M:Northwoods.Go.IGoPort.CopyLinksArray">
            <summary>
            Returns a newly allocated array containing references to all of the
            links connected to this port.
            </summary>
        </member>
        <member name="M:Northwoods.Go.IGoPort.IsValidLink(Northwoods.Go.IGoPort)">
            <summary>
            This predicate should be true when it is valid to create a link from
            this port to another port.
            </summary>
            <param name="toPort"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.IGoPort.CanLinkFrom">
            <summary>
            This predicate should be true if, by itself, there is no known
            reason why one couldn't create a valid link from this port to some port.
            </summary>
        </member>
        <member name="M:Northwoods.Go.IGoPort.CanLinkTo">
            <summary>
            This predicate should be true if, by itself, there is no known
            reason why one couldn't create a valid link from some port to this one.
            </summary>
        </member>
        <member name="M:Northwoods.Go.IGoPort.OnLinkChanged(Northwoods.Go.IGoLink,System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)">
            <summary>
            This method is called when a link connected to this port is changed.
            </summary>
            <param name="link"></param>
            <param name="subhint"></param>
            <param name="oldI"></param>
            <param name="oldVal"></param>
            <param name="oldRect"></param>
            <param name="newI"></param>
            <param name="newVal"></param>
            <param name="newRect"></param>
        </member>
        <member name="P:Northwoods.Go.IGoPort.Links">
            <summary>
            Gets an enumerator over all of the links connected at this port.
            </summary>
        </member>
        <member name="P:Northwoods.Go.IGoPort.SourceLinks">
            <summary>
            Gets an enumerator over all of the links coming into this port.
            </summary>
            <remarks>
            Each source link's <see cref="P:Northwoods.Go.IGoLink.ToPort"/> will be this port.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.IGoPort.DestinationLinks">
            <summary>
            Gets an enumerator over all of the links going out of this port.
            </summary>
            <remarks>
            Each destination link's <see cref="P:Northwoods.Go.IGoLink.FromPort"/> will be this port.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.IGoPort.LinksCount">
            <summary>
            Gets the total number of links connected at this port.
            </summary>
        </member>
        <member name="P:Northwoods.Go.IGoPort.SourceLinksCount">
            <summary>
            Gets the number of links coming into this port.
            </summary>
            <remarks>
            This is the number of links whose <see cref="P:Northwoods.Go.IGoLink.ToPort"/>
            is this port.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.IGoPort.DestinationLinksCount">
            <summary>
            Gets the number of links going out of this port.
            </summary>
            <remarks>
            This is the number of links whose <see cref="P:Northwoods.Go.IGoLink.FromPort"/>
            is this port.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.IGoPort.Node">
            <summary>
            Gets the node that this port is part of.
            </summary>
            <remarks>
            If this port is not part of any node, this should return null.
            If this port is part of a node that in turn is part of another node,
            this should return the highest-level (most encompassing) node.
            </remarks>
        </member>
        <member name="F:Northwoods.Go.GoPort.ChangedPortUserFlags">
            <summary>
            This is a <see cref="!:GoObject.Changed"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoPort.ChangedPortUserObject">
            <summary>
            This is a <see cref="!:GoObject.Changed"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoPort.ChangedStyle">
            <summary>
            This is a <see cref="!:GoObject.Changed"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoPort.ChangedObject">
            <summary>
            This is a <see cref="!:GoObject.Changed"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoPort.ChangedValidFrom">
            <summary>
            This is a <see cref="!:GoObject.Changed"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoPort.ChangedValidTo">
            <summary>
            This is a <see cref="!:GoObject.Changed"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoPort.ChangedValidSelfNode">
            <summary>
            This is a <see cref="!:GoObject.Changed"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoPort.ChangedFromSpot">
            <summary>
            This is a <see cref="!:GoObject.Changed"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoPort.ChangedToSpot">
            <summary>
            This is a <see cref="!:GoObject.Changed"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoPort.ChangedAddedLink">
            <summary>
            This is a <see cref="!:GoObject.Changed"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoPort.ChangedRemovedLink">
            <summary>
            This is a <see cref="!:GoObject.Changed"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoPort.ChangedValidDuplicateLinks">
            <summary>
            This is a <see cref="!:GoObject.Changed"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoPort.ChangedEndSegmentLength">
            <summary>
            This is a <see cref="!:GoObject.Changed"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoPort.ChangedPartID">
            <summary>
            This is a <see cref="!:GoObject.Changed"/> subhint.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoPort.#ctor">
            <summary>
            The constructor produces a port whose appearance is a filled black ellipse,
            that is both a valid source and destination for linking, that assumes that
            source links come in from the left and that destination links depart out
            to the right, and that is not selectable or resizable by the user.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoPort.CopyObject(Northwoods.Go.GoCopyDictionary)">
            <summary>
            Copying a port does not immediately cause its links to be copied.
            </summary>
            <param name="env"></param>
            <remarks>
            The <see cref="P:Northwoods.Go.GoPort.PortObject"/> is only copied if it belongs to
            a document; otherwise it remains shared with the original port.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoPort.CopyObjectDelayed(Northwoods.Go.GoCopyDictionary,Northwoods.Go.GoObject)">
            <summary>
            Make sure any unshared <see cref="P:Northwoods.Go.GoPort.PortObject"/> is copied.
            </summary>
            <param name="env"></param>
            <param name="newobj"></param>
            <remarks>
            If the <see cref="P:Northwoods.Go.GoPort.PortObject"/> is a shared object, both the
            new port and the old port refer to the same object.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoPort.AddSourceLink(Northwoods.Go.IGoLink)">
            <summary>
            Add a link to this port's collection of connected links,
            making sure the link's ToPort is this port so that the
            link is a connection from another source port.
            </summary>
            <param name="link"></param>
        </member>
        <member name="M:Northwoods.Go.GoPort.AddDestinationLink(Northwoods.Go.IGoLink)">
            <summary>
            Add a link to this port's collection of connected links,
            making sure the link's FromPort is this port so that the
            link is a connection to another destination port.
            </summary>
            <param name="link"></param>
        </member>
        <member name="M:Northwoods.Go.GoPort.RemoveLink(Northwoods.Go.IGoLink)">
            <summary>
            Remove a link from this port's collection of connected links.
            </summary>
            <param name="link"></param>
        </member>
        <member name="M:Northwoods.Go.GoPort.ContainsLink(Northwoods.Go.IGoLink)">
            <summary>
            Determine if a link is connected at this port.
            </summary>
            <param name="l"></param>
            <returns>
            True if <paramref name="l"/> is in this port's collection of connected links.
            </returns>
        </member>
        <member name="M:Northwoods.Go.GoPort.ClearLinks">
            <summary>
            Remove all links connected to this port.
            </summary>
            <remarks>
            Normally this will just call <see cref="M:Northwoods.Go.IGoLink.Unlink"/> on each link.
            However, this method does not do so if the link is in a document
            but the port is in a view, or vice versa.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoPort.CopyLinksArray">
            <summary>
            Returns a newly allocated array containing references to all of the
            links connected to this port.
            </summary>
            <seealso cref="M:Northwoods.Go.IGoPort.CopyLinksArray"/>
        </member>
        <member name="M:Northwoods.Go.GoPort.FindTopNode(Northwoods.Go.GoObject)">
            <summary>
            Return the most inclusive node containing an object.
            </summary>
            <param name="x"></param>
            <returns>
            An <see cref="T:Northwoods.Go.IGoNode"/> that is as close to top-level in the
            <see cref="!:GoObject.Parent"/> hierarchy as possible.
            If <paramref name="x"/> is null, this returns null;
            If there is no <see cref="T:Northwoods.Go.IGoNode"/> that contains the object,
            this will return null.
            </returns>
        </member>
        <member name="M:Northwoods.Go.GoPort.FindParentNode(Northwoods.Go.GoObject)">
            <summary>
            Return the node that immediately contains an object, or return the object
            itself if it is an <see cref="T:Northwoods.Go.IGoNode"/>.
            </summary>
            <param name="x"></param>
            <returns>
            An <see cref="T:Northwoods.Go.IGoNode"/> that either is <paramref name="x"/> or the first
            <see cref="!:GoObject.Parent"/> going up the part hierarchy.
            If <paramref name="x"/> is null, this returns null;
            </returns>
        </member>
        <member name="M:Northwoods.Go.GoPort.IsValidLink(Northwoods.Go.IGoPort)">
            <summary>
            True if it is valid to create a link from this port to <paramref name="toPort"/>.
            </summary>
            <param name="toPort"></param>
            <remarks>
            By default this is true when <paramref name="toPort"/> is not the same as this
            port, <see cref="M:Northwoods.Go.GoPort.CanLinkFrom"/> is true, and <see cref="M:Northwoods.Go.GoPort.CanLinkTo"/> is true
            for the <paramref name="toPort"/> port.
            Furthermore, this considers the <see cref="P:Northwoods.Go.GoPort.IsValidSelfNode"/>, the
            <see cref="P:Northwoods.Go.GoPort.IsValidDuplicateLinks"/>, and the <see cref="P:Northwoods.Go.GoDocument.ValidCycle"/>
            properties.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoPort.CanLinkFrom">
            <summary>
            This predicate should be true if, by itself, there is no known
            reason why one couldn't create a valid link from this port to some port.
            </summary>
            <remarks>
            To be true, this port must pass <see cref="P:Northwoods.Go.GoPort.IsValidFrom"/>,
            <see cref="!:GoObject.CanView"/>, and <c>Layer.CanLinkObjects</c> (if it
            belongs to a layer).
            To control the validity of link creation considering two ports,
            override <see cref="M:Northwoods.Go.GoPort.IsValidLink(Northwoods.Go.IGoPort)"/> or set one of the properties
            that that method depends on.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoPort.CanLinkTo">
            <summary>
            This predicate should be true if, by itself, there is no known
            reason why one couldn't create a valid link from some port to this one.
            </summary>
            <remarks>
            To be true, this port must pass <see cref="P:Northwoods.Go.GoPort.IsValidTo"/>,
            <see cref="!:GoObject.CanView"/>, and <c>Layer.CanLinkObjects</c> (if it
            belongs to a layer).
            To control the validity of link creation considering two ports,
            override <see cref="M:Northwoods.Go.GoPort.IsValidLink(Northwoods.Go.IGoPort)"/> or set one of the properties
            that that method depends on.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoPort.IsInSameNode(Northwoods.Go.IGoPort,Northwoods.Go.IGoPort)">
            <summary>
            This static method determines if both arguments belong to the same IGoNode.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns>
            True if both ports are part of the same <see cref="T:Northwoods.Go.IGoNode"/>.
            If the ports are not part of an <see cref="T:Northwoods.Go.IGoNode"/> (but only contained
            by a <see cref="T:Northwoods.Go.GoGroup"/>), their <see cref="!:GoObject.TopLevelObject"/>s
            are compared instead.
            </returns>
            <seealso cref="P:Northwoods.Go.GoPort.Node"/>
            <seealso cref="M:Northwoods.Go.GoPort.IsInSameNode(Northwoods.Go.IGoPort)"/>
            <seealso cref="M:Northwoods.Go.GoPort.FindParentNode(Northwoods.Go.GoObject)"/>
        </member>
        <member name="M:Northwoods.Go.GoPort.IsInSameNode(Northwoods.Go.IGoPort)">
            <summary>
            Determine if this port is in the same group as another port.
            </summary>
            <param name="p"></param>
            <returns>
            True if this port is part of the same <see cref="T:Northwoods.Go.GoGroup"/>
            as <paramref name="p"/>.
            </returns>
            <seealso cref="M:Northwoods.Go.GoPort.IsInSameNode(Northwoods.Go.IGoPort,Northwoods.Go.IGoPort)"/>
        </member>
        <member name="M:Northwoods.Go.GoPort.IsLinked(Northwoods.Go.IGoPort,Northwoods.Go.IGoPort)">
            <summary>
            This static method determines if there is a link going from one port to another.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns>
            True if there is an <see cref="T:Northwoods.Go.IGoLink"/> from <paramref name="a"/>
            to <paramref name="b"/>.
            Note that a link in the opposite direction will not satisfy this predicate.
            </returns>
            <seealso cref="M:Northwoods.Go.GoPort.IsLinked(Northwoods.Go.IGoPort)"/>
        </member>
        <member name="M:Northwoods.Go.GoPort.IsLinked(Northwoods.Go.IGoPort)">
            <summary>
            Determine if there is a link from this port to another port.
            </summary>
            <param name="p"></param>
            <returns>
            True if there is an <see cref="T:Northwoods.Go.IGoLink"/> from this port
            to <paramref name="p"/>.
            Note that a link in the opposite direction, that is one whose
            <see cref="P:Northwoods.Go.IGoLink.FromPort"/> is <paramref name="p"/> and
            whose <see cref="P:Northwoods.Go.IGoLink.ToPort"/> is this port,
            will not satisfy this predicate.
            </returns>
            <seealso cref="M:Northwoods.Go.GoPort.IsLinked(Northwoods.Go.IGoPort,Northwoods.Go.IGoPort)"/>
        </member>
        <member name="M:Northwoods.Go.GoPort.Paint(System.Drawing.Graphics,Northwoods.Go.GoView)">
            <summary>
            Draw a port as either a simple shape using a Pen and Brush,
            as an arbitrary object, or not at all.
            </summary>
            <param name="g"></param>
            <param name="view"></param>
            <remarks>
            By default this method uses the <see cref="P:Northwoods.Go.GoPort.Style"/> property to
            determine the general shape of the port.
            When the <see cref="P:Northwoods.Go.GoPort.Style"/> is <see cref="F:Northwoods.Go.GoPortStyle.None"/>,
            nothing is painted.
            When the <see cref="P:Northwoods.Go.GoPort.Style"/> is <see cref="F:Northwoods.Go.GoPortStyle.Object"/>,
            we set the <see cref="P:Northwoods.Go.GoPort.PortObject"/>'s <see cref="!:GoObject.Bounds"/>
            property to this port's bounds before painting that <see cref="P:Northwoods.Go.GoPort.PortObject"/>.
            This ignores the <see cref="!:GoObject.Shadowed"/> property.
            </remarks>
            <seealso cref="!:GoObject.GetSpotLocation"/>
        </member>
        <member name="M:Northwoods.Go.GoPort.PaintGreek(System.Drawing.Graphics,Northwoods.Go.GoView)">
            <summary>
            Because ports are normally small objects, we heed the
            <see cref="P:Northwoods.Go.GoView.PaintNothingScale"/> and <see cref="P:Northwoods.Go.GoView.PaintGreekScale"/>
            properties.
            </summary>
            <param name="g"></param>
            <param name="view"></param>
            <returns></returns>
            <remarks>
            Greeking of a port is accomplished by just drawing a rectangle with
            the port's bounds.
            If <see cref="P:Northwoods.Go.GoView.IsPrinting"/> is true, we reduce the scales at
            which we paint nothing or paint greek, so that the printed representation
            will have more detail than the on-screen one.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoPort.ExpandPaintBounds(System.Drawing.RectangleF,Northwoods.Go.GoView)">
            <summary>
            If the <see cref="P:Northwoods.Go.GoPort.Style"/> is <see cref="F:Northwoods.Go.GoPortStyle.Object"/>, we
            need to consider the <see cref="P:Northwoods.Go.GoPort.PortObject"/>'s paint bounds.
            </summary>
            <param name="rect"></param>
            <param name="view"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.GoPort.GetNearestIntersectionPoint(Northwoods.Go.PointF,Northwoods.Go.PointF,Northwoods.Go.PointF@)">
            <summary>
            If there is a <see cref="P:Northwoods.Go.GoPort.PortObject"/>, return the closest intersection
            point of the given line with that object.
            </summary>
            <param name="p1"></param>
            <param name="p2"></param>
            <param name="result"></param>
            <returns></returns>
            <remarks>
            If there is no <see cref="P:Northwoods.Go.GoPort.PortObject"/>, we just return the default
            behavior, assuming the port is a rectangle.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoPort.GetFromLinkPoint(Northwoods.Go.IGoLink)">
            <summary>
            Determines the actual point at which
            a link coming out from this port should originate.
            </summary>
            <param name="link"></param>
            <returns></returns>
            <remarks>
            When the value of <see cref="P:Northwoods.Go.GoPort.FromSpot"/> is not <see cref="!:GoObject.NoSpot"/>,
            this just returns that spot's location.
            Otherwise this returns <see cref="M:Northwoods.Go.GoPort.GetLinkPointFromPoint(Northwoods.Go.PointF)"/> for
            a point near the end of the link.
            You may wish to override this method if you want to customize
            the link point connection dynamically.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoPort.GetToLinkPoint(Northwoods.Go.IGoLink)"/>
        </member>
        <member name="M:Northwoods.Go.GoPort.GetToLinkPoint(Northwoods.Go.IGoLink)">
            <summary>
            Determine the actual point at which
            a link connected to this port should terminate.
            </summary>
            <param name="link"></param>
            <returns></returns>
            <remarks>
            When the value of <see cref="P:Northwoods.Go.GoPort.ToSpot"/> is not <see cref="!:GoObject.NoSpot"/>,
            this just returns that spot's location.
            Otherwise this returns <see cref="M:Northwoods.Go.GoPort.GetLinkPointFromPoint(Northwoods.Go.PointF)"/> for
            a point near the end of the link.
            You may wish to override this method if you want to customize
            the link point connection dynamically.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoPort.GetFromLinkPoint(Northwoods.Go.IGoLink)"/>
        </member>
        <member name="M:Northwoods.Go.GoPort.GetLinkPointFromPoint(Northwoods.Go.PointF)">
            <summary>
            Determine the actual point at which
            a link connected to this port should terminate when the spot is
            <see cref="!:GoObject.NoSpot"/>.
            </summary>
            <param name="p"></param>
            <returns></returns>
            <remarks>
            By default this is the same as <see cref="M:Northwoods.Go.GoPort.GetNearestIntersectionPoint(Northwoods.Go.PointF,Northwoods.Go.PointF,Northwoods.Go.PointF@)"/>
            for the line from <paramref name="p"/> to the center of this port.
            But this will just return the <see cref="!:GoObject.Center"/> if the point is
            contained in this port (or <see cref="P:Northwoods.Go.GoPort.PortObject"/>, if any).
            You may wish to override this method if you want to customize
            the link point connection dynamically.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoPort.GetFromLinkPoint(Northwoods.Go.IGoLink)"/>
            <seealso cref="M:Northwoods.Go.GoPort.GetToLinkPoint(Northwoods.Go.IGoLink)"/>
        </member>
        <member name="M:Northwoods.Go.GoPort.GetFromLinkDir(Northwoods.Go.IGoLink)">
            <summary>
            Determine the direction that a link will go when coming out of this port.
            </summary>
            <param name="link"></param>
            <returns>
            A direction in degrees, where the positive X axis is zero, and where
            <c>90</c> is downward along the positive Y axis.
            </returns>
            <remarks>
            When the value of <see cref="P:Northwoods.Go.GoPort.FromSpot"/> is not
            <see cref="!:GoObject.NoSpot"/> or <see cref="!:GoObject.Middle"/>,
            this just returns the result of calling <see cref="M:Northwoods.Go.GoPort.GetLinkDir(System.Int32)"/>.
            Otherwise this returns one of the horizontal or vertical directions,
            based on the relative positions of the <paramref name="link"/>'s other port.
            You may wish to override this method if you want to customize dynamically
            the direction of the link at the link point.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoPort.GetToLinkDir(Northwoods.Go.IGoLink)"/>
            <seealso cref="M:Northwoods.Go.GoPort.GetLinkDir(System.Int32)"/>
        </member>
        <member name="M:Northwoods.Go.GoPort.GetToLinkDir(Northwoods.Go.IGoLink)">
            <summary>
            Determine the direction that a link will go when going into this port.
            </summary>
            <param name="link"></param>
            <returns>
            A direction in degrees, where the positive X axis is zero, and where
            <c>90</c> is downward along the positive Y axis.
            </returns>
            <remarks>
            When the value of <see cref="P:Northwoods.Go.GoPort.ToSpot"/> is not
            <see cref="!:GoObject.NoSpot"/> or <see cref="!:GoObject.Middle"/>,
            this just returns the result of calling <see cref="M:Northwoods.Go.GoPort.GetLinkDir(System.Int32)"/>.
            Otherwise this returns one of the horizontal or vertical directions,
            based on the relative positions of the <paramref name="link"/>'s other port.
            You may wish to override this method if you want to customize dynamically
            the direction of the link at the link point.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoPort.GetFromLinkDir(Northwoods.Go.IGoLink)"/>
            <seealso cref="M:Northwoods.Go.GoPort.GetLinkDir(System.Int32)"/>
        </member>
        <member name="M:Northwoods.Go.GoPort.GetLinkDir(System.Int32)">
            <summary>
            Determine the direction in which the link should go from the link point.
            </summary>
            <param name="spot"></param>
            <returns>
            A direction in degrees, where the positive X axis is zero, and where
            <c>90</c> is downward along the positive Y axis.
            </returns>
            <remarks>
            By default this handles the eight standard object spots around the edges.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoPort.GetFromLinkPoint(Northwoods.Go.IGoLink)"/>
            <seealso cref="M:Northwoods.Go.GoPort.GetToLinkPoint(Northwoods.Go.IGoLink)"/>
            <seealso cref="!:GoObject.GetSpotLocation"/>
        </member>
        <member name="M:Northwoods.Go.GoPort.LinksOnPortChanged(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)">
            <summary>
            Tell any connected links about any change to this port
            </summary>
            <param name="subhint"></param>
            <param name="oldI"></param>
            <param name="oldVal"></param>
            <param name="oldRect"></param>
            <param name="newI"></param>
            <param name="newVal"></param>
            <param name="newRect"></param>
            <remarks>
            All the parameters just get passed on through calls to <see cref="M:Northwoods.Go.IGoLink.OnPortChanged(Northwoods.Go.IGoPort,System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoPort.OnLinkChanged(Northwoods.Go.IGoLink,System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)">
            <summary>
            When a link connected to this port is changed, this method is called.
            </summary>
            <param name="l"></param>
            <param name="subhint"></param>
            <param name="oldI"></param>
            <param name="oldVal"></param>
            <param name="oldRect"></param>
            <param name="newI"></param>
            <param name="newVal"></param>
            <param name="newRect"></param>
            <remarks>
            This lets port subclasses handle changes to any links on this port.
            <paramref name="subhint"/> may include <see cref="F:Northwoods.Go.GoPort.ChangedAddedLink"/>
            and <see cref="F:Northwoods.Go.GoPort.ChangedRemovedLink"/>,
            as well as possibly some subhints such as <see cref="F:Northwoods.Go.GoLink.ChangedFromPort"/>
            and <see cref="F:Northwoods.Go.GoLink.ChangedToPort"/>.
            The default implementation of this method does nothing.
            If you override this, you will probably want to do nothing if the link parameter,
            <paramref name="l"/>, is null.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoPort.OnBoundsChanged(System.Drawing.RectangleF)">
            <summary>
            When a port is moved, we update any links connected to this port
            by calling <see cref="M:Northwoods.Go.GoPort.LinksOnPortChanged(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/>.
            </summary>
            <param name="old"></param>
        </member>
        <member name="M:Northwoods.Go.GoPort.OnLayerChanged(Northwoods.Go.GoLayer,Northwoods.Go.GoLayer,Northwoods.Go.GoObject)">
            <summary>
            When a port is removed from a layer, we remove all of the links connected
            to the port.
            </summary>
            <param name="oldlayer"></param>
            <param name="newlayer"></param>
            <param name="mainObj"></param>
            <remarks>
            This does not remove any links that are part of the <paramref name="mainObj"/>.
            Nor does it remove any links that belong to a view, if this port is part of a document.
            And conversely, it does not remove any links that belong to a document if this port
            is part of a view.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoPort.ChangeValue(Northwoods.Go.GoChangedEventArgs,System.Boolean)">
            <summary>
            Performs changes for undo and redo.
            </summary>
            <seealso cref="!:GoObject.ChangeValue"/>
        </member>
        <member name="P:Northwoods.Go.GoPort.GoObject">
            <summary>
            Returns itself as a <see cref="P:Northwoods.Go.GoPort.GoObject"/>.
            </summary>
            <remarks>
            This property cannot be set.
            </remarks>
            <seealso cref="P:Northwoods.Go.IGoGraphPart.GoObject"/>
        </member>
        <member name="P:Northwoods.Go.GoPort.UserFlags">
            <summary>
            Gets or sets an integer value associated with this port.
            </summary>
            <value>
            The initial value is zero.
            </value>
            <seealso cref="P:Northwoods.Go.IGoGraphPart.UserFlags"/>
        </member>
        <member name="P:Northwoods.Go.GoPort.UserObject">
            <summary>
            Gets or sets an object associated with this port.
            </summary>
            <value>
            The initial value is null.
            </value>
            <seealso cref="P:Northwoods.Go.IGoGraphPart.UserObject"/>
        </member>
        <member name="P:Northwoods.Go.GoPort.Links">
            <summary>
            Gets an enumerator over all of the links connected at this port.
            </summary>
            <seealso cref="P:Northwoods.Go.IGoPort.Links"/>
        </member>
        <member name="P:Northwoods.Go.GoPort.SourceLinks">
            <summary>
            Gets an enumerator over all of the links coming into this port.
            </summary>
            <remarks>
            Each source link's <see cref="P:Northwoods.Go.IGoLink.ToPort"/> will be this port.
            </remarks>
            <seealso cref="P:Northwoods.Go.IGoPort.SourceLinks"/>
        </member>
        <member name="P:Northwoods.Go.GoPort.DestinationLinks">
            <summary>
            Gets an enumerator over all of the links going out of this port.
            </summary>
            <remarks>
            Each destination link's <see cref="P:Northwoods.Go.IGoLink.FromPort"/> will be this port.
            </remarks>
            <seealso cref="P:Northwoods.Go.IGoPort.DestinationLinks"/>
        </member>
        <member name="P:Northwoods.Go.GoPort.LinksCount">
            <summary>
            Gets the total number of links connected at this port.
            </summary>
            <seealso cref="P:Northwoods.Go.IGoPort.LinksCount"/>
        </member>
        <member name="P:Northwoods.Go.GoPort.SourceLinksCount">
            <summary>
            Gets the number of links coming into this port.
            </summary>
            <seealso cref="P:Northwoods.Go.IGoPort.SourceLinksCount"/>
        </member>
        <member name="P:Northwoods.Go.GoPort.DestinationLinksCount">
            <summary>
            Gets the number of links going out of this port.
            </summary>
            <remarks>
            This is the number of links whose <see cref="P:Northwoods.Go.IGoLink.FromPort"/>
            is this port.
            </remarks>
            <seealso cref="P:Northwoods.Go.IGoPort.DestinationLinksCount"/>
        </member>
        <member name="P:Northwoods.Go.GoPort.Node">
            <summary>
            Gets the node that this port is part of.
            </summary>
            <remarks>
            By default this uses <see cref="M:Northwoods.Go.GoPort.FindParentNode(Northwoods.Go.GoObject)"/>, but you
            may need to override this to use <see cref="M:Northwoods.Go.GoPort.FindTopNode(Northwoods.Go.GoObject)"/>
            instead if your node class contains other nodes as parts that
            you don't want to consider separate objects.
            </remarks>
            <seealso cref="P:Northwoods.Go.IGoPort.Node"/>
        </member>
        <member name="P:Northwoods.Go.GoPort.IsValidFrom">
            <summary>
            Gets or sets whether this port can be a valid value for some
            link's <see cref="P:Northwoods.Go.IGoLink.FromPort"/>.
            </summary>
            <value>
            This defaults to true.
            </value>
            <seealso cref="M:Northwoods.Go.GoPort.CanLinkFrom"/>
        </member>
        <member name="P:Northwoods.Go.GoPort.IsValidTo">
            <summary>
            Gets or sets whether this port can be a valid value for some
            link's <see cref="P:Northwoods.Go.IGoLink.ToPort"/>.
            </summary>
            <value>
            This defaults to true.
            </value>
            <seealso cref="M:Northwoods.Go.GoPort.CanLinkTo"/>
        </member>
        <member name="P:Northwoods.Go.GoPort.IsValidSelfNode">
            <summary>
            Gets or sets whether a valid link can be made between two ports belonging to the same node.
            </summary>
            <value>
            This defaults to false.
            </value>
            <remarks>
            <see cref="M:Northwoods.Go.GoPort.IsValidLink(Northwoods.Go.IGoPort)"/> uses this property in the following manner:
            If this property is true, and the other port's <c>IsValidSelfNode</c> property is also
            true, then the proposed link may be valid.
            Otherwise, if <see cref="M:Northwoods.Go.GoPort.IsInSameNode(Northwoods.Go.IGoPort,Northwoods.Go.IGoPort)"/> is true, it will not be a valid link.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoPort.IsValidDuplicateLinks">
            <summary>
            Gets or sets whether a valid link can be made between two ports already connected
            by a link in the same direction.
            </summary>
            <value>
            This defaults to false.
            </value>
            <remarks>
            <see cref="M:Northwoods.Go.GoPort.IsValidLink(Northwoods.Go.IGoPort)"/> uses this property in the following manner:
            If this property is true, and the other port's <c>IsValidDuplicateLinks</c> property is also
            true, then the proposed link may be valid.
            Otherwise, if <see cref="M:Northwoods.Go.GoPort.IsLinked(Northwoods.Go.IGoPort,Northwoods.Go.IGoPort)"/> is true, it will not be a valid link.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoPort.IsValidLink(Northwoods.Go.IGoPort)"/>
        </member>
        <member name="P:Northwoods.Go.GoPort.Style">
            <summary>
            Gets or sets the appearance style for this port.
            </summary>
            <value>
            This defaults to <see cref="F:Northwoods.Go.GoPortStyle.Ellipse"/>.
            </value>
            <remarks>
            If the value changes, the setter will also call <see cref="M:Northwoods.Go.GoPort.LinksOnPortChanged(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/>
            to notify all connected links about the change.
            </remarks>
            <seealso cref="P:Northwoods.Go.GoPort.PortObject"/>
        </member>
        <member name="P:Northwoods.Go.GoPort.PortObject">
            <summary>
            Gets or sets the <see cref="P:Northwoods.Go.GoPort.GoObject"/> that may stand in for this port.
            </summary>
            <value>
            The initial value is null.
            </value>
            <remarks>
            When painting this port, if the <see cref="P:Northwoods.Go.GoPort.Style"/> is
            <see cref="F:Northwoods.Go.GoPortStyle.Object"/>, then the painting is delegated
            to the value of this property, which should be an object not
            owned by any layer or group.
            <see cref="M:Northwoods.Go.GoPort.GetNearestIntersectionPoint(Northwoods.Go.PointF,Northwoods.Go.PointF,Northwoods.Go.PointF@)"/> delegates to the value of this property
            when the <see cref="P:Northwoods.Go.GoPort.Style"/> is not <see cref="F:Northwoods.Go.GoPortStyle.Object"/>
            and the port object does belong to a layer.
            The value must not be set to another port.
            If the value changes, the setter will also call <see cref="M:Northwoods.Go.GoPort.LinksOnPortChanged(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/>
            to notify all connected links about the change.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoPort.FromSpot">
            <summary>
            Gets or sets the <see cref="P:Northwoods.Go.GoPort.GoObject"/> spot at which to connect
            links coming out from this port.
            </summary>
            <value>
            The default value is <see cref="!:GoObject.MiddleRight"/>.
            </value>
            <remarks>
            This property is used for the common case where we know where and
            in which direction we expect to attach links to ports.
            The default assumes a left-to-right flow for the graph.
            If the value changes, the setter will also call <see cref="M:Northwoods.Go.GoPort.LinksOnPortChanged(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/>
            to notify all connected links about the change.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoPort.GetFromLinkPoint(Northwoods.Go.IGoLink)"/>
            <seealso cref="M:Northwoods.Go.GoPort.GetToLinkPoint(Northwoods.Go.IGoLink)"/>
        </member>
        <member name="P:Northwoods.Go.GoPort.ToSpot">
            <summary>
            Gets or sets the <see cref="P:Northwoods.Go.GoPort.GoObject"/> spot at which to connect
            links going into this port.
            </summary>
            <value>
            The default value is <see cref="!:GoObject.MiddleLeft"/>.
            </value>
            <remarks>
            This property is used for the common case where we know where and
            in which direction we expect to attach links to ports.
            The default assumes a left-to-right flow for the graph.
            If the value changes, the setter will also call <see cref="M:Northwoods.Go.GoPort.LinksOnPortChanged(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/>
            to notify all connected links about the change.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoPort.GetFromLinkPoint(Northwoods.Go.IGoLink)"/>
            <seealso cref="M:Northwoods.Go.GoPort.GetToLinkPoint(Northwoods.Go.IGoLink)"/>
        </member>
        <member name="P:Northwoods.Go.GoPort.EndSegmentLength">
            <summary>
            Gets or sets the length of the link segment closest to this port.
            </summary>
            <value>
            This <c>float</c> value is in document coordinates.
            By default this value is <c>10</c>.
            </value>
            <remarks>
            Basically this tells <see cref="M:Northwoods.Go.GoLink.CalculateStroke"/> how long
            a line segment to draw straight out from the port before turning,
            assuming a well-defined (non-NoSpot) link spot for this port.
            If the value changes, the setter will also call <see cref="M:Northwoods.Go.GoPort.LinksOnPortChanged(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/>
            to notify all connected links about the change.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoPort.PartID">
            <summary>
            Gets or sets the unique ID of this part within its document.
            </summary>
            <value>
            The value is invalid unless this object is part of a <see cref="T:Northwoods.Go.GoDocument"/>
            whose <see cref="P:Northwoods.Go.GoDocument.MaintainsPartID"/> property is true.
            Setting this property should be done only by <see cref="T:Northwoods.Go.GoDocument"/>
            when this object is added to the document.
            </value>
        </member>
        <member name="F:Northwoods.Go.GoBoxPort.ChangedLinkPointsSpread">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoBoxPort.#ctor">
            <summary>
            Construct a rectangular port that is a solid gray.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoBoxPort.CopyObject(Northwoods.Go.GoCopyDictionary)">
            <summary>
            Don't copy internally cached information.
            </summary>
            <param name="env"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.GoBoxPort.Paint(System.Drawing.Graphics,Northwoods.Go.GoView)">
            <summary>
            Unlike most ports, this kind of port will draw a drop-shadow, if expected of the parent
            <see cref="T:Northwoods.Go.GoBoxNode"/>.
            </summary>
            <param name="g"></param>
            <param name="view"></param>
        </member>
        <member name="M:Northwoods.Go.GoBoxPort.ExpandPaintBounds(System.Drawing.RectangleF,Northwoods.Go.GoView)">
            <summary>
            The expanded paint bounds for a shape includes any Pen width and miter
            limit and any drop shadow.
            </summary>
            <param name="rect"></param>
            <param name="view"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.GoBoxPort.GetFromLinkPoint(Northwoods.Go.IGoLink)">
            <summary>
            Determine the link point by judging where the link is going
            to, and at what angle.
            </summary>
            <param name="link"></param>
            <returns>a <c>PointF</c> on the edge of the port, in document coordinates</returns>
        </member>
        <member name="M:Northwoods.Go.GoBoxPort.GetToLinkPoint(Northwoods.Go.IGoLink)">
            <summary>
            Determine the link point by judging where the link is coming
            from, and at what angle.
            </summary>
            <param name="link"></param>
            <returns>a <c>PointF</c> on the edge of the port, in document coordinates</returns>
        </member>
        <member name="M:Northwoods.Go.GoBoxPort.GetFromLinkDir(Northwoods.Go.IGoLink)">
            <summary>
            Make sure the link is going out perpendicularly from the
            sides of the port.
            </summary>
            <param name="link"></param>
            <returns>the angle in degrees</returns>
        </member>
        <member name="M:Northwoods.Go.GoBoxPort.GetToLinkDir(Northwoods.Go.IGoLink)">
            <summary>
            Make sure the link is coming in perpendicularly to the
            sides of the port.
            </summary>
            <param name="link"></param>
            <returns>the angle in degrees</returns>
        </member>
        <member name="M:Northwoods.Go.GoBoxPort.IsOrthogonal(Northwoods.Go.IGoLink)">
            <summary>
            This convenience method decides if the given link is supposed to
            be drawn with all of its segments orthogonal.
            </summary>
            <param name="link"></param>
            <returns>true if the link is believed to be drawn with orthogonal segments</returns>
        </member>
        <member name="M:Northwoods.Go.GoBoxPort.GetAngle(Northwoods.Go.IGoLink)">
            <summary>
            Determine for a link the angle the port at the other end makes with this port.
            </summary>
            <param name="link"></param>
            <returns>the angle in degrees</returns>
        </member>
        <member name="M:Northwoods.Go.GoBoxPort.ChangeValue(Northwoods.Go.GoChangedEventArgs,System.Boolean)">
            <summary>
            Handle undo and redo changes.
            </summary>
            <param name="e"></param>
            <param name="undo"></param>
        </member>
        <member name="P:Northwoods.Go.GoBoxPort.LinkPointsSpread">
            <summary>
            Gets or sets whether the link points of the links connected to this port
            are spread evenly along the side of the port, or if they are all at the
            mid-point of the side.
            </summary>
            <value>
            The default value is false--all of the links connect at the mid-point of each side.
            </value>
        </member>
        <member name="T:Northwoods.Go.GoButton">
            <summary>
            A GoButton looks like a regular button, with a text label and/or an icon,
            but is composed of GoObjects so that it is very light weight and flexible.
            </summary>
        </member>
        <member name="T:Northwoods.Go.IGoActionObject">
            <summary>
            This interface specifies ways for the <see cref="T:Northwoods.Go.GoToolAction"/> tool to
            invoke actions on objects.  
            </summary>
            <remarks>
            Typically this will be some object where a click should execute some code.
            One such class is <see cref="T:Northwoods.Go.GoButton"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.IGoActionObject.OnActionAdjusted(Northwoods.Go.GoView,Northwoods.Go.GoInputEventArgs)">
            <summary>
            This method is called by <see cref="T:Northwoods.Go.GoToolAction"/> as the user is
            adjusting the object, normally by a mouse drag or move.
            </summary>
            <param name="view">the <see cref="T:Northwoods.Go.GoView"/> that the input event occurred in</param>
            <param name="e">the <see cref="T:Northwoods.Go.GoInputEventArgs"/> describing the input event</param>
        </member>
        <member name="M:Northwoods.Go.IGoActionObject.OnAction(Northwoods.Go.GoView,Northwoods.Go.GoInputEventArgs)">
            <summary>
            This method is called by <see cref="T:Northwoods.Go.GoToolAction"/> to perform the object's
            action, normally by a mouse button being released.
            </summary>
            <param name="view">the <see cref="T:Northwoods.Go.GoView"/> that the input event occurred in</param>
            <param name="e">the <see cref="T:Northwoods.Go.GoInputEventArgs"/> describing the input event</param>
        </member>
        <member name="P:Northwoods.Go.IGoActionObject.ActionEnabled">
            <summary>
            Gets or sets whether the <see cref="T:Northwoods.Go.GoToolAction"/> tool should consider
            activating this object and invoking the object's action.
            </summary>
        </member>
        <member name="P:Northwoods.Go.IGoActionObject.ActionActivated">
            <summary>
            Gets or sets whether the object's Action is about to be invoked,
            normally by a mouse button being pressed.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoButton.ChangedBackground">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoButton.ChangedIcon">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoButton.ChangedLabel">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoButton.ChangedTopLeftMargin">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoButton.ChangedBottomRightMargin">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoButton.ChangedActionEnabled">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoButton.#ctor">
            <summary>
            Construct a <see cref="T:Northwoods.Go.GoButton"/> with an empty text label and no icon.
            </summary>
            <remarks>
            This calls <see cref="M:Northwoods.Go.GoButton.CreateBackground"/>, <see cref="M:Northwoods.Go.GoButton.CreateIcon"/>, and
            <see cref="M:Northwoods.Go.GoButton.CreateLabel"/> to build the node.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoButton.CreateBackground">
            <summary>
            Make the background rectangle for the button.
            </summary>
            <returns>By default this returns a <see cref="T:Northwoods.Go.GoRectangle"/></returns>
            <remarks>
            This is called by the constructor.
            </remarks>
            <example>
            If you override this method, you may want the definition to do
            some of the things that the standard definition does:
            <code>
             protected virtual GoObject CreateBackground() {
               GoRectangle r = new GoRectangle();
               r.Selectable = false;
               r.Pen = null;
               r.Brush = GoShape.SystemBrushes_Control;
               return r;
             }
            </code>
            </example>
        </member>
        <member name="M:Northwoods.Go.GoButton.CreateIcon">
            <summary>
            Make the icon for the button.
            </summary>
            <returns>By default this returns null</returns>
            <remarks>
            This is called by the constructor.
            You can override this to return a newly allocated <see cref="T:Northwoods.Go.GoImage"/>,
            or some other object to serve as the decoration for the button.
            You can also set the <see cref="P:Northwoods.Go.GoButton.Icon"/> property at any time.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoButton.CreateLabel">
            <summary>
            Make the text label for the button.
            </summary>
            <returns>By default this returns an empty <see cref="T:Northwoods.Go.GoText"/> object</returns>
            <remarks>
            This is called by the constructor.
            </remarks>
            <example>
            If you override this method, you may want the definition to do
            some of the things that the standard definition does:
            <code>
             protected virtual GoText CreateLabel() {
               GoText l = new GoText();
               l.Selectable = false;
               return l;
             }
            </code>
            </example>
        </member>
        <member name="M:Northwoods.Go.GoButton.CopyChildren(Northwoods.Go.GoGroup,Northwoods.Go.GoCopyDictionary)">
            <summary>
            Copy the <see cref="P:Northwoods.Go.GoButton.Background"/>, <see cref="P:Northwoods.Go.GoButton.Label"/>, and <see cref="P:Northwoods.Go.GoButton.Icon"/>.
            </summary>
            <param name="newgroup"></param>
            <param name="env"></param>
        </member>
        <member name="M:Northwoods.Go.GoButton.LayoutChildren(Northwoods.Go.GoObject)">
            <summary>
            Position the <see cref="P:Northwoods.Go.GoButton.Icon"/> to the left of the <see cref="P:Northwoods.Go.GoButton.Label"/>,
            and surround both with the <see cref="P:Northwoods.Go.GoButton.Background"/>, leaving
            <see cref="P:Northwoods.Go.GoButton.TopLeftMargin"/> and <see cref="P:Northwoods.Go.GoButton.BottomRightMargin"/> space
            along the sides.
            </summary>
            <param name="childchanged"></param>
        </member>
        <member name="M:Northwoods.Go.GoButton.Remove(Northwoods.Go.GoObject)">
            <summary>
            If any part is removed from this group,
            be sure to remove any references in local fields.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Northwoods.Go.GoButton.Paint(System.Drawing.Graphics,Northwoods.Go.GoView)">
            <summary>
            Call <see cref="M:Northwoods.Go.GoButton.PaintButton(System.Drawing.Graphics,Northwoods.Go.GoView)"/> in addition to painting the
            <see cref="P:Northwoods.Go.GoButton.Background"/>, <see cref="P:Northwoods.Go.GoButton.Label"/>, and <see cref="P:Northwoods.Go.GoButton.Icon"/>.
            </summary>
            <param name="g"></param>
            <param name="view"></param>
        </member>
        <member name="M:Northwoods.Go.GoButton.PaintButton(System.Drawing.Graphics,Northwoods.Go.GoView)">
            <summary>
            This method is called by <see cref="M:Northwoods.Go.GoButton.Paint(System.Drawing.Graphics,Northwoods.Go.GoView)"/> to display any button state,
            such as whether it is "pressed".
            </summary>
            <param name="g"></param>
            <param name="view"></param>
        </member>
        <member name="M:Northwoods.Go.GoButton.ExpandPaintBounds(System.Drawing.RectangleF,Northwoods.Go.GoView)">
            <summary>
            Additional painted area includes part of the border giving 3D control appearance.
            </summary>
            <param name="rect"></param>
            <param name="view"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.GoButton.OnActionAdjusted(Northwoods.Go.GoView,Northwoods.Go.GoInputEventArgs)">
            <summary>
            We don't care about any mouse movement over a button.
            </summary>
            <param name="view"></param>
            <param name="e"></param>
        </member>
        <member name="M:Northwoods.Go.GoButton.OnAction(Northwoods.Go.GoView,Northwoods.Go.GoInputEventArgs)">
            <summary>
            Call all of the Action event handlers.
            </summary>
            <param name="view"></param>
            <param name="e"></param>
            <remarks>
            This method is called when the user does a mouse press and release
            on this button.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoButton.ChangeValue(Northwoods.Go.GoChangedEventArgs,System.Boolean)">
            <summary>
            Handle undo and redo changes.
            </summary>
            <param name="e"></param>
            <param name="undo"></param>
        </member>
        <member name="P:Northwoods.Go.GoButton.Background">
            <summary>
            Gets or sets the background object for this button.
            </summary>
            <remarks>
            Instead of setting the background shape after creating a <c>GoButton</c>, you may find it
            easier to override the <see cref="M:Northwoods.Go.GoButton.CreateBackground"/> method.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoButton.Icon">
            <summary>
            Gets or sets the icon object for this button.
            </summary>
            <remarks>
            Instead of setting the icon after allocation, you may find it
            easier to override the <see cref="M:Northwoods.Go.GoButton.CreateIcon"/> method.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoButton.Text">
            <summary>
            Gets or sets the text string for this button.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoButton.Label">
            <summary>
            Gets or sets the text label for this button.
            </summary>
            <remarks>
            Instead of setting the label after allocation, you may find it
            easier to override the <see cref="M:Northwoods.Go.GoButton.CreateLabel"/> method.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoButton.TopLeftMargin">
            <summary>
            Gets or sets the amount of space to leave at the top and left sides between
            the icon and label and the edge of the background.
            </summary>
            <value>
            This defaults to 3x2, in document coordinates.
            </value>
        </member>
        <member name="P:Northwoods.Go.GoButton.BottomRightMargin">
            <summary>
            Gets or sets the amount of space to leave at the bottom and right sides between
            the icon and label and the edge of the background.
            </summary>
            <value>
            This defaults to 2x3, in document coordinates.
            </value>
        </member>
        <member name="P:Northwoods.Go.GoButton.ActionEnabled">
            <summary>
            Gets or sets whether the user can click on this button to get it to perform an action.
            </summary>
            <value>
            The default value is true.
            </value>
        </member>
        <member name="P:Northwoods.Go.GoButton.ActionActivated">
            <summary>
            Gets or sets whether the button appears "depressed".
            </summary>
            <value>
            This defaults to false.
            </value>
            <remarks>
            A change to this state is considered transient, and does not
            invoke <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/>.
            </remarks>
        </member>
        <member name="E:Northwoods.Go.GoButton.Action">
            <summary>
            An Action event happens whenever the user clicks on this button.
            </summary>
        </member>
        <member name="T:Northwoods.Go.GoGeneralNode">
            <summary>
            A more complicated node that has an icon, optional labels at the top and bottom,
            and variable numbers of labeled ports on either side.
            </summary>
            <remarks>
            Setting the <see cref="P:Northwoods.Go.GoNode.Location"/>, <see cref="P:Northwoods.Go.GoNode.Resizable"/>,
            <see cref="P:Northwoods.Go.GoNode.Reshapable"/> and <see cref="P:Northwoods.Go.GoNode.Shadowed"/>
            properties actually set the same properties on the
            <see cref="P:Northwoods.Go.GoGeneralNode.SelectionObject"/>, which is the <see cref="P:Northwoods.Go.GoGeneralNode.Icon"/>.
            </remarks>
        </member>
        <member name="T:Northwoods.Go.IGoNodeIconConstraint">
            <summary>
            This interface is used by <see cref="T:Northwoods.Go.GoNodeIcon"/> to constrain
            the resizing of the image.
            </summary>
            <remarks>
            <see cref="T:Northwoods.Go.GoSimpleNode"/> and <see cref="T:Northwoods.Go.GoGeneralNode"/> implement
            this interface.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.IGoNodeIconConstraint.MinimumIconSize">
            <summary>
            Gets the minimum non-negative size, in document coordinates, for the icon.
            </summary>
        </member>
        <member name="P:Northwoods.Go.IGoNodeIconConstraint.MaximumIconSize">
            <summary>
            Gets the maximum size not less than the <see cref="P:Northwoods.Go.IGoNodeIconConstraint.MinimumIconSize"/>,
            in document coordinates, for the icon.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoGeneralNode.InsertedPort">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoGeneralNode.RemovedPort">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoGeneralNode.ReplacedPort">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoGeneralNode.ChangedTopLabel">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoGeneralNode.ChangedBottomLabel">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoGeneralNode.ChangedIcon">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoGeneralNode.ChangedOrientation">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoGeneralNode.#ctor">
            <summary>
            Create an empty GoGeneralNode--call <see cref="M:Northwoods.Go.GoGeneralNode.Initialize(System.Resources.ResourceManager,System.String,System.String,System.String,System.Int32,System.Int32)"/> to create
            an icon, labels, and ports, or set all of the desired parts explicitly.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoGeneralNode.Initialize(System.Resources.ResourceManager,System.String,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Initialize an empty GoGeneralNode to have an icon, some labels, and some ports.
            </summary>
            <param name="res">
            Provides the <c>ResourceManager</c> holding an <c>Image</c> resource named by
            <paramref name="iconname"/>.  If this parameter is null,
            <see cref="P:Northwoods.Go.GoImage.DefaultResourceManager"/> is used instead.
            </param>
            <param name="iconname">
            The name of the <c>Image</c> resource in the <c>ResourceManager</c>
            given by <paramref name="res"/>, or else a file name if no resource manager
            can be used (i.e., when both <paramref name="res"/> is null and
            <see cref="P:Northwoods.Go.GoImage.DefaultResourceManager"/> is null).
            </param>
            <param name="top">
            The initial string value for the <see cref="P:Northwoods.Go.GoGeneralNode.TopLabel"/>.
            If this value is null, no label is created at the top of this node.
            </param>
            <param name="bottom">
            The initial string value for the <see cref="P:Northwoods.Go.GoGeneralNode.BottomLabel"/>.
            If this value is null, no label is created at the bottom of this node.
            </param>
            <param name="numinports">
            The number of ports to create on the left side of this node.
            </param>
            <param name="numoutports">
            The number of ports to create on the right side of this node.
            </param>
        </member>
        <member name="M:Northwoods.Go.GoGeneralNode.Initialize(System.Windows.Forms.ImageList,System.Int32,System.String,System.String,System.Int32,System.Int32)">
            <summary>
            Initialize an empty GoGeneralNode to have an icon, some labels, and some ports.
            </summary>
            <param name="imglist">
            Provide the <c>ImageList</c> whose <paramref name="imgindex"/> specifies
            the actual image to use for the icon.  If this is null, the
            <see cref="P:Northwoods.Go.GoView.ImageList"/> property is used by <see cref="M:Northwoods.Go.GoImage.Paint(System.Drawing.Graphics,Northwoods.Go.GoView)"/>.
            </param>
            <param name="imgindex">
            The zero-based index of the <c>Image</c> contained in an <c>ImageList</c>,
            given either by <paramref name="imglist"/> or by <see cref="P:Northwoods.Go.GoView.ImageList"/>.
            </param>
            <param name="top">
            The initial string value for the <see cref="P:Northwoods.Go.GoGeneralNode.TopLabel"/>.
            If this value is null, no label is created at the top of this node.
            </param>
            <param name="bottom">
            The initial string value for the <see cref="P:Northwoods.Go.GoGeneralNode.BottomLabel"/>.
            If this value is null, no label is created at the bottom of this node.
            </param>
            <param name="numinports">
            The number of ports to create on the left side of this node.
            </param>
            <param name="numoutports">
            The number of ports to create on the right side of this node.
            </param>
        </member>
        <member name="M:Northwoods.Go.GoGeneralNode.CreateIcon(System.Resources.ResourceManager,System.String)">
            <summary>
            Create and initialize an image to act as the node's icon.
            </summary>
            <param name="res"></param>
            <param name="iconname">
            a null value causes no <see cref="T:Northwoods.Go.GoNodeIcon"/> to be allocated,
            but a <see cref="T:Northwoods.Go.GoRectangle"/> instead.
            </param>
            <returns>
            a <see cref="T:Northwoods.Go.GoNodeIcon"/> that obeys this node's <see cref="P:Northwoods.Go.GoGeneralNode.MinimumIconSize"/>
            and <see cref="P:Northwoods.Go.GoGeneralNode.MaximumIconSize"/> properties
            </returns>
            <example>
            If you override this method, you may want the definition to do
            some of the things that the standard definition does:
            <code>
             protected virtual GoObject CreateIcon(ResourceManager res, String iconname) {
               if (iconname != null) {
                 GoNodeIcon ni = new GoNodeIcon();
                 if (res != null)
                   ni.ResourceManager = res;
                 ni.Name = iconname;
                 ni.MinimumIconSize = new SizeF(20, 20);
                 ni.MaximumIconSize = new SizeF(1000, 2000);
                 ni.Size = ni.MinimumIconSize;
                 return ni;
               } else {
                 GoRectangle rect = new GoRectangle();
                 rect.Size = new SizeF(20, 20);
                 return rect;
               }
             }
            </code>
            </example>
        </member>
        <member name="M:Northwoods.Go.GoGeneralNode.CreateIcon(System.Windows.Forms.ImageList,System.Int32)">
            <summary>
            Create and initialize an image to act as the node's icon.
            </summary>
            <param name="imglist"></param>
            <param name="imgindex"></param>
            <returns>
            a <see cref="T:Northwoods.Go.GoNodeIcon"/> that obeys this node's <see cref="P:Northwoods.Go.GoGeneralNode.MinimumIconSize"/>
            and <see cref="P:Northwoods.Go.GoGeneralNode.MaximumIconSize"/> properties
            </returns>
            <example>
            If you override this method, you may want the definition to do
            some of the things that the standard definition does:
            <code>
             protected virtual GoObject CreateIcon(System.Windows.Forms.ImageList imglist, int imgindex) {
               GoNodeIcon ni = new GoNodeIcon();
               ni.ImageList = imglist;
               ni.Index = imgindex;
               ni.MinimumIconSize = new SizeF(20, 20);
               ni.MaximumIconSize = new SizeF(1000, 2000);
               ni.Size = ni.MinimumIconSize;
               return ni;
             }
            </code>
            </example>
        </member>
        <member name="M:Northwoods.Go.GoGeneralNode.CreateLabel(System.Boolean,System.String)">
            <summary>
            Create and initialize a text label for either the top or the bottom.
            </summary>
            <param name="top"></param>
            <param name="text">a null value causes no label to be allocated</param>
            <returns>an editable, non-selectable, middle-aligned, non-rescaling <see cref="T:Northwoods.Go.GoText"/> object</returns>
            <example>
            If you override this method, you may want the definition to do
            some of the things that the standard definition does:
            <code>
             protected virtual GoText CreateLabel(bool top, String text) {
               GoText l = null;
               if (text != null) {
                 l = new GoText();
                 l.Text = text;
                 l.Selectable = false;
                 if (this.Orientation == Orientation.Vertical) {
                   if (top)
                     l.Alignment = MiddleRight;
                   else
                     l.Alignment = MiddleLeft;
                 } else {
                   if (top)
                     l.Alignment = MiddleBottom;
                   else
                     l.Alignment = MiddleTop;
                 }
                 l.Editable = true;
                 this.Editable = true;
               }
               return l;
             }
            </code>
            </example>
        </member>
        <member name="M:Northwoods.Go.GoGeneralNode.CreatePort(System.Boolean)">
            <summary>
            Create and initialize a port that may go on either the left side or the right side.
            </summary>
            <param name="input"></param>
            <returns>a <see cref="T:Northwoods.Go.GoGeneralNodePort"/></returns>
            <remarks>
            This method is called by <see cref="M:Northwoods.Go.GoGeneralNode.MakePort(System.Boolean)"/> to create a port,
            which it then associates with a port label.
            </remarks>
            <example>
            If you override this method, you may want the definition to do
            some of the things that the standard definition does:
            <code>
             protected virtual GoGeneralNodePort CreatePort(bool input) {
               GoGeneralNodePort p = new GoGeneralNodePort();
               p.LeftSide = input;
               p.IsValidFrom = !input;
               p.IsValidTo = input;
               return p;
             }
            </code>
            </example>
        </member>
        <member name="M:Northwoods.Go.GoGeneralNode.CreatePortLabel(System.Boolean)">
            <summary>
            Create a label for a port.
            </summary>
            <param name="input"></param>
            <returns>a <see cref="T:Northwoods.Go.GoGeneralNodePortLabel"/></returns>
            <remarks>
            This method is called by <see cref="M:Northwoods.Go.GoGeneralNode.MakePort(System.Boolean)"/> to create a
            label for a port.
            </remarks>
            <example>
            If you override this method, you may want the definition to do
            some of the things that the standard definition does:
            <code>
             protected virtual GoGeneralNodePortLabel CreatePortLabel(bool input) {
               GoGeneralNodePortLabel l = new GoGeneralNodePortLabel();
               return l;
             }
            </code>
            </example>
        </member>
        <member name="M:Northwoods.Go.GoGeneralNode.MakePort(System.Boolean)">
            <summary>
            Create and initialize a new port and its label.
            </summary>
            <param name="input"></param>
            <returns></returns>
            <remarks>
            Pass the result of this method to <see cref="M:Northwoods.Go.GoGeneralNode.AddLeftPort(Northwoods.Go.GoGeneralNodePort)"/>,
            <see cref="M:Northwoods.Go.GoGeneralNode.AddRightPort(Northwoods.Go.GoGeneralNodePort)"/>, <see cref="M:Northwoods.Go.GoGeneralNode.InsertLeftPort(System.Int32,Northwoods.Go.GoGeneralNodePort)"/>,
            or <see cref="M:Northwoods.Go.GoGeneralNode.InsertRightPort(System.Int32,Northwoods.Go.GoGeneralNodePort)"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoGeneralNode.CopyChildren(Northwoods.Go.GoGroup,Northwoods.Go.GoCopyDictionary)">
            <summary>
            Make copies of the icon, label and the left and right ports.
            </summary>
            <param name="newgroup"></param>
            <param name="env"></param>
        </member>
        <member name="M:Northwoods.Go.GoGeneralNode.LayoutChildren(Northwoods.Go.GoObject)">
            <summary>
            Position the parts of this node.
            </summary>
            <param name="childchanged"></param>
            <remarks>
            The icon is the primary part--the node labels are placed just above
            and below the icon.
            The ports go on their respective sides of the icon, positioned
            contiguously and centered vertically.  The ports are always next to
            the icon, and their respective labels are expected to be outside,
            as determined by <see cref="M:Northwoods.Go.GoGeneralNodePort.LayoutLabel"/>
            When <see cref="P:Northwoods.Go.GoObject.Initializing"/> is true, this method does nothing.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoGeneralNode.OnOrientationChanged(System.Windows.Forms.Orientation)">
            <summary>
            Determine how to change the whole node when the <see cref="P:Northwoods.Go.GoGeneralNode.Orientation"/> changes.
            </summary>
            <param name="old">the former <see cref="P:Northwoods.Go.GoGeneralNode.Orientation"/> value</param>
            <remarks>
            By default, changing the <see cref="P:Northwoods.Go.GoGeneralNode.Orientation"/> property will reposition
            all of the ports appropriately and change the ports' <see cref="P:Northwoods.Go.GoPort.ToSpot"/>
            and <see cref="P:Northwoods.Go.GoPort.FromSpot"/> properties.
            When <see cref="P:Northwoods.Go.GoGeneralNode.Orientation"/> is <c>Orientation.Horizontal</c>, "left" ports
            are in fact on the left side, "right" ports are on the right side, source links
            come into the left ports on the left side, and destination links go out of the
            right ports from the right side.
            When <see cref="P:Northwoods.Go.GoGeneralNode.Orientation"/> is <c>Orientation.Vertical</c>, "left" ports are
            on top of the node, "right" ports are on the bottom, and links come in from the
            top and go out from the bottom.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoGeneralNode.GetLeftPort(System.Int32)">
            <summary>
            Return a port by its index position on the left side of this node.
            </summary>
            <param name="i">a zero-based, non-negative index</param>
            <returns>null if <paramref name="i"/> is greater than or equal to <see cref="P:Northwoods.Go.GoGeneralNode.LeftPortsCount"/></returns>
        </member>
        <member name="M:Northwoods.Go.GoGeneralNode.GetRightPort(System.Int32)">
            <summary>
            Return a port by its index position on the right side of this node.
            </summary>
            <param name="i">a zero-based, non-negative index</param>
            <returns>null if <paramref name="i"/> is greater than or equal to <see cref="P:Northwoods.Go.GoGeneralNode.RightPortsCount"/></returns>
        </member>
        <member name="M:Northwoods.Go.GoGeneralNode.AddLeftPort(Northwoods.Go.GoGeneralNodePort)">
            <summary>
            Add a <see cref="T:Northwoods.Go.GoGeneralNodePort"/> created by a call to <see cref="M:Northwoods.Go.GoGeneralNode.MakePort(System.Boolean)"/>
            at the end of the list of ports on the left side of this node.
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:Northwoods.Go.GoGeneralNode.AddRightPort(Northwoods.Go.GoGeneralNodePort)">
            <summary>
            Add a <see cref="T:Northwoods.Go.GoGeneralNodePort"/> created by a call to <see cref="M:Northwoods.Go.GoGeneralNode.MakePort(System.Boolean)"/>
            at the end of the list of ports on the right side of this node.
            </summary>
            <param name="p"></param>
        </member>
        <member name="M:Northwoods.Go.GoGeneralNode.InsertLeftPort(System.Int32,Northwoods.Go.GoGeneralNodePort)">
            <summary>
            Insert a <see cref="T:Northwoods.Go.GoGeneralNodePort"/> created by a call to <see cref="M:Northwoods.Go.GoGeneralNode.MakePort(System.Boolean)"/>
            to be at a particular index position on the left side of this node.
            </summary>
            <param name="i">if beyond the number of ports, adds it at the end</param>
            <param name="p"></param>
        </member>
        <member name="M:Northwoods.Go.GoGeneralNode.InsertRightPort(System.Int32,Northwoods.Go.GoGeneralNodePort)">
            <summary>
            Insert a <see cref="T:Northwoods.Go.GoGeneralNodePort"/> created by a call to <see cref="M:Northwoods.Go.GoGeneralNode.MakePort(System.Boolean)"/>
            to be at a particular index position on the right side of this node.
            </summary>
            <param name="i">if beyond the number of ports, adds it at the end</param>
            <param name="p"></param>
        </member>
        <member name="M:Northwoods.Go.GoGeneralNode.Remove(Northwoods.Go.GoObject)">
            <summary>
            When a port is removed, make sure we also remove its label and adjust
            the positions of all of the other ports.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Northwoods.Go.GoGeneralNode.RemoveLeftPort(System.Int32)">
            <summary>
            Remove the port and its label at a particular index position on the
            left side of this node.
            </summary>
            <param name="i">a zero-based non-negative index</param>
        </member>
        <member name="M:Northwoods.Go.GoGeneralNode.RemoveRightPort(System.Int32)">
            <summary>
            Remove the port and its label at a particular index position on the
            right side of this node.
            </summary>
            <param name="i">a zero-based non-negative index</param>
        </member>
        <member name="M:Northwoods.Go.GoGeneralNode.SetLeftPort(System.Int32,Northwoods.Go.GoGeneralNodePort)">
            <summary>
            Replace the port and its label at a particular index position on the
            left side of this node.
            </summary>
            <param name="i">a zero-based non-negative index</param>
            <param name="p"></param>
        </member>
        <member name="M:Northwoods.Go.GoGeneralNode.SetRightPort(System.Int32,Northwoods.Go.GoGeneralNodePort)">
            <summary>
            Replace the port and its label at a particular index position on the
            right side of this node.
            </summary>
            <param name="i">a zero-based non-negative index</param>
            <param name="p"></param>
        </member>
        <member name="M:Northwoods.Go.GoGeneralNode.ChangeValue(Northwoods.Go.GoChangedEventArgs,System.Boolean)">
            <summary>
            Handle this class's property changes for undo and redo
            </summary>
            <param name="e"></param>
            <param name="undo"></param>
        </member>
        <member name="P:Northwoods.Go.GoGeneralNode.MinimumIconSize">
            <summary>
            Assume the icon needs to be tall enough to hold all of the
            ports on its left and right sides without overlapping them or
            extending them out beyond the icon.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoGeneralNode.MaximumIconSize">
            <summary>
            Assume a 1000x2000 maximum size for the icon.
            </summary>
            <value>
            The value comes from the <see cref="P:Northwoods.Go.GoGeneralNode.Icon"/> if it is an instance of <see cref="T:Northwoods.Go.GoNodeIcon"/>;
            otherwise the value defaults to 1000x2000.
            Setting this value sets the <see cref="P:Northwoods.Go.GoNodeIcon.MaximumIconSize"/> property of the
            <see cref="P:Northwoods.Go.GoGeneralNode.Icon"/> if it is a <see cref="T:Northwoods.Go.GoNodeIcon"/>; it is a no-op otherwise.
            </value>
        </member>
        <member name="P:Northwoods.Go.GoGeneralNode.SelectionObject">
            <summary>
            The selection object, what the user sees as being selected and what the user
            actually resizes, is the icon.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoGeneralNode.Label">
            <summary>
            Participate in standard textual node searches and editing,
            using the bottom label in preference to the top label if both
            are present.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoGeneralNode.Icon">
            <summary>
            Gets or sets the <see cref="T:Northwoods.Go.GoObject"/>, normally a <see cref="T:Northwoods.Go.GoImage"/>,
            acting as the central icon for this node.
            </summary>
            <value>
            The new value may be null, to simply remove the icon.
            If non-null, the icon object should have the <see cref="P:Northwoods.Go.GoObject.Selectable"/>
            property set to false.
            </value>
            <remarks>
            Instead of setting the icon after creating a node, you may find it
            easier to override the <see cref="M:Northwoods.Go.GoGeneralNode.CreateIcon(System.Resources.ResourceManager,System.String)"/> method(s).
            The new shape will have its Center location,
            Selectable, Resizable, Reshapable, ResizesRealtime, and Shadowed
            properties copied from the old shape.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoGeneralNode.Image">
            <summary>
            Gets the icon as a <see cref="T:Northwoods.Go.GoImage"/>.
            </summary>
            <value>
            If, in an exceptional case, the icon does not exist or in fact is
            not a <see cref="T:Northwoods.Go.GoImage"/>, this value is null.
            </value>
        </member>
        <member name="P:Northwoods.Go.GoGeneralNode.Orientation">
            <summary>
            Gets or sets the general orientation of the node and how links connect to it.
            </summary>
            <value>
            This defaults to <c>Orientation.Horizontal</c>
            </value>
        </member>
        <member name="P:Northwoods.Go.GoGeneralNode.TopLabel">
            <summary>
            Gets or sets the label at the top of the node.
            </summary>
            <value>
            This must be a <see cref="T:Northwoods.Go.GoText"/> object.
            The value may be set to null, to remove any existing label.
            If non-null, the text object should have the <see cref="P:Northwoods.Go.GoObject.Selectable"/>
            property set to false.
            </value>
            <remarks>
            Instead of setting the label after creating a node, you may find it
            easier to override the <see cref="M:Northwoods.Go.GoGeneralNode.CreateLabel(System.Boolean,System.String)"/> method.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoGeneralNode.BottomLabel">
            <summary>
            Gets or sets the label at the bottom of the node.
            </summary>
            <value>
            This must be a <see cref="T:Northwoods.Go.GoText"/> object.
            The value may be set to null, to remove any existing label.
            If non-null, the text object should have the <see cref="P:Northwoods.Go.GoObject.Selectable"/>
            property set to false.
            </value>
            <remarks>
            Instead of setting the label after creating a node, you may find it
            easier to override the <see cref="M:Northwoods.Go.GoGeneralNode.CreateLabel(System.Boolean,System.String)"/> method.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoGeneralNode.LeftPortsCount">
            <summary>
            Gets the number of ports on the left side of this node.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoGeneralNode.RightPortsCount">
            <summary>
            Gets the number of ports on the right side of this node.
            </summary>
        </member>
        <member name="T:Northwoods.Go.GoGeneralNodePort">
            <summary>
            A <see cref="T:Northwoods.Go.GoPort"/> that is part of a <see cref="T:Northwoods.Go.GoGeneralNode"/>.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoGeneralNodePort.ChangedName">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoGeneralNodePort.ChangedLabel">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoGeneralNodePort.ChangedSideIndex">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoGeneralNodePort.ChangedLeftSide">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoGeneralNodePort.#ctor">
            <summary>
            Create a GoGeneralNodePort, for use in a <see cref="T:Northwoods.Go.GoGeneralNode"/>.
            </summary>
            <remarks>
            The port is normally a medium sized gray triangle with no name.
            It does not create a <see cref="T:Northwoods.Go.GoGeneralNodePortLabel"/>--
            <see cref="T:Northwoods.Go.GoGeneralNode"/> is responsible for creating it
            and associating the two with each other.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoGeneralNodePort.CopyObject(Northwoods.Go.GoCopyDictionary)">
            <summary>
            Copy the port's label too, and make sure its <see cref="P:Northwoods.Go.GoGeneralNodePortLabel.Port"/>
            property points to the copied port.
            </summary>
            <param name="env"></param>
        </member>
        <member name="M:Northwoods.Go.GoGeneralNodePort.LayoutLabel">
            <summary>
            Position the port label to the appropriate side of the port,
            so that it doesn't overlap the icon or the port itself.
            </summary>
            <remarks>
            This depends on the <see cref="P:Northwoods.Go.GoGeneralNodePort.LabelSpacing"/> property, and
            affects the link point for this port.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoGeneralNodePort.GetToLinkPoint(Northwoods.Go.IGoLink)">
            <summary>
            Override the calculation of the link point to take into account
            the size of any port label, so the link does not overlap the label.
            </summary>
            <param name="link"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.GoGeneralNodePort.GetFromLinkPoint(Northwoods.Go.IGoLink)">
            <summary>
            Override the calculation of the link point to take into account
            the size of any port label, so the link does not overlap the label.
            </summary>
            <param name="link"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.GoGeneralNodePort.GetLinkPoint(System.Int32)">
            <summary>
            This is called by <see cref="M:Northwoods.Go.GoGeneralNodePort.GetToLinkPoint(Northwoods.Go.IGoLink)"/> and <see cref="M:Northwoods.Go.GoGeneralNodePort.GetFromLinkPoint(Northwoods.Go.IGoLink)"/>
            to calculate the appropriate point for a link to connect at, considering
            the width of the label and the <see cref="P:Northwoods.Go.GoGeneralNodePort.LabelSpacing"/>.
            </summary>
            <param name="spot"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.GoGeneralNodePort.GetToolTip(Northwoods.Go.GoView)">
            <summary>
            Show the name of the port, in case the <see cref="P:Northwoods.Go.GoGeneralNodePort.Label"/> is not present.
            </summary>
            <param name="view"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.GoGeneralNodePort.ChangeValue(Northwoods.Go.GoChangedEventArgs,System.Boolean)">
            <summary>
            Handle this class's property changes for undo and redo
            </summary>
            <param name="e"></param>
            <param name="undo"></param>
        </member>
        <member name="P:Northwoods.Go.GoGeneralNodePort.LeftSide">
            <summary>
            Gets or sets which side of the <see cref="T:Northwoods.Go.GoGeneralNode"/> this port should be on.
            </summary>
            <remarks>
            This should only be set before it is actually added to the node.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoGeneralNodePort.SideIndex">
            <summary>
            Gets or sets the index of this port in the <see cref="T:Northwoods.Go.GoGeneralNode"/> list of ports on this side.
            </summary>
            <remarks>
            This should only be set by <see cref="T:Northwoods.Go.GoGeneralNode"/> code.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoGeneralNodePort.Name">
            <summary>
            Gets or sets the name for this port, which is normally reflected by the label, if any.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoGeneralNodePort.Label">
            <summary>
            Gets or sets the text object displays the name of this port.
            </summary>
            <value>
            The new value may be null, to simply remove the label.
            If non-null, the text object should have the <see cref="P:Northwoods.Go.GoObject.Selectable"/>
            property set to false.
            </value>
            <remarks>
            Instead of setting the label after creating a port, you may find it
            easier to override the <see cref="M:Northwoods.Go.GoGeneralNode.CreatePortLabel(System.Boolean)"/> method.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoGeneralNodePort.LabelSpacing">
            <summary>
            Return the desired distance between the port label and the port itself 
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoGeneralNodePort.PortAndLabelWidth">
            <summary>
            This is called by <see cref="M:Northwoods.Go.GoGeneralNode.LayoutChildren(Northwoods.Go.GoObject)"/> and
            related methods to determine how wide this port is.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoGeneralNodePort.PortAndLabelHeight">
            <summary>
            This is called by <see cref="M:Northwoods.Go.GoGeneralNode.LayoutChildren(Northwoods.Go.GoObject)"/> and
            related methods to determine how tall this port is.
            </summary>
        </member>
        <member name="T:Northwoods.Go.GoGeneralNodePortLabel">
            <summary>
            The label for a <see cref="T:Northwoods.Go.GoGeneralNodePort"/>.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoGeneralNodePortLabel.#ctor">
            <summary>
            Create an editable, non-rescaling <see cref="T:Northwoods.Go.GoText"/> that
            does not yet know which <see cref="P:Northwoods.Go.GoGeneralNodePortLabel.Port"/> it is associated with.
            </summary>
            <remarks>
            <see cref="T:Northwoods.Go.GoGeneralNode"/> is responsible for allocating a
            <see cref="T:Northwoods.Go.GoGeneralNodePort"/> and associating it with this label.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoGeneralNodePortLabel.Port">
            <summary>
            Gets or sets the port corresponding to this label.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoGeneralNodePortLabel.Text">
            <summary>
            When this label's text string changes, we update the port's name too.
            </summary>
        </member>
        <member name="T:Northwoods.Go.GoIconicNode">
            <summary>
            A node with an image for an icon, a label, and a single port centered on the image.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoIconicNode.ChangedDraggableLabel">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoIconicNode.ChangedIcon">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoIconicNode.ChangedLabel">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoIconicNode.ChangedPort">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoIconicNode.#ctor">
            <summary>
            Create an empty GoIconicNode--call <see cref="M:Northwoods.Go.GoIconicNode.Initialize(System.Resources.ResourceManager,System.String,System.String)"/> to
            create an icon, a label, and a port.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoIconicNode.Initialize(System.Resources.ResourceManager,System.String,System.String)">
            <summary>
            Initialize an empty GoIconicNode to have an icon, a label, and one port.
            </summary>
            <param name="res">
            Provides the <c>ResourceManager</c> holding an <c>Image</c> resource named by
            <paramref name="iconname"/>.  If this parameter is null,
            <see cref="P:Northwoods.Go.GoImage.DefaultResourceManager"/> is used instead.
            </param>
            <param name="iconname">
            The name of the <c>Image</c> resource in the <c>ResourceManager</c>
            given by <paramref name="res"/>, or else a file name if no resource manager
            can be used (i.e., when both <paramref name="res"/> is null and
            <see cref="P:Northwoods.Go.GoImage.DefaultResourceManager"/> is null).
            </param>
            <param name="name">
            The initial string value for the <see cref="P:Northwoods.Go.GoIconicNode.Label"/>.
            If this value is null, no label is created for this node.
            </param>
        </member>
        <member name="M:Northwoods.Go.GoIconicNode.Initialize(System.Windows.Forms.ImageList,System.Int32,System.String)">
            <summary>
            Initialize an empty GoIconicNode to have an icon, a label, and one port.
            </summary>
            <param name="imglist">
            Provide the <c>ImageList</c> whose <paramref name="imgindex"/> specifies
            the actual image to use for the icon.  If this is null, the
            <see cref="P:Northwoods.Go.GoView.ImageList"/> property is used by <see cref="M:Northwoods.Go.GoImage.Paint(System.Drawing.Graphics,Northwoods.Go.GoView)"/>.
            </param>
            <param name="imgindex">
            The zero-based index of the <c>Image</c> contained in an <c>ImageList</c>,
            given either by <paramref name="imglist"/> or by <see cref="P:Northwoods.Go.GoView.ImageList"/>.
            </param>
            <param name="name">
            The initial string value for the <see cref="P:Northwoods.Go.GoIconicNode.Label"/>.
            If this value is null, no label is created for this node.
            </param>
        </member>
        <member name="M:Northwoods.Go.GoIconicNode.CreateIcon(System.Resources.ResourceManager,System.String)">
            <summary>
            Create and initialize an image to act as the node's icon.
            </summary>
            <param name="res"></param>
            <param name="iconname"></param>
            <returns>
            a <see cref="T:Northwoods.Go.GoImage"/>
            </returns>
            <example>
            If you override this method, you may want the definition to do
            some of the things that the standard definition does:
            <code>
             protected virtual GoObject CreateIcon(ResourceManager res, String iconname) {
               GoImage img = new GoImage();
               if (res != null)
                 img.ResourceManager = res;
               img.Name = iconname;
               img.Selectable = false;
               img.Resizable = false;
               return img;
             }
            </code>
            </example>
        </member>
        <member name="M:Northwoods.Go.GoIconicNode.CreateIcon(System.Windows.Forms.ImageList,System.Int32)">
            <summary>
            Create and initialize an image to act as the node's icon.
            </summary>
            <param name="imglist"></param>
            <param name="imgindex"></param>
            <returns>
            a <see cref="T:Northwoods.Go.GoImage"/>
            </returns>
            <example>
            If you override this method, you may want the definition to do
            some of the things that the standard definition does:
            <code>
             protected virtual GoObject CreateIcon(System.Windows.Forms.ImageList imglist, int imgindex) {
               GoImage img = new GoImage();
               img.ImageList = imglist;
               img.Index = imgindex;
               img.Selectable = false;
               img.Resizable = false;
               return img;
             }
            </code>
            </example>
        </member>
        <member name="M:Northwoods.Go.GoIconicNode.CreateLabel(System.String)">
            <summary>
            Create and initialize a text label.
            </summary>
            <param name="name"></param>
            <returns>a non-editable, non-selectable, middle-aligned, non-rescaling <see cref="T:Northwoods.Go.GoText"/> object</returns>
            <example>
            If you override this method, you may want the definition to do
            some of the things that the standard definition does:
            <code>
             protected virtual GoText CreateLabel(String name) {
               GoText l = null;
               if (name != null) {
                 l = new GoText();
                 l.Text = name;
                 l.Selectable = this.DraggableLabel;
                 l.Alignment = MiddleTop;
               }
               return l;
             }
            </code>
            </example>
        </member>
        <member name="M:Northwoods.Go.GoIconicNode.CreatePort">
            <summary>
            Create and initialize the node's port, which is normally not visible and at
            the middle of the icon.
            </summary>
            <returns>a <see cref="T:Northwoods.Go.GoPort"/></returns>
            <remarks>
            <see cref="P:Northwoods.Go.GoPort.IsValidFrom"/> and <see cref="P:Northwoods.Go.GoPort.IsValidTo"/>
            are true, by default, thus allowing users to draw links from or
            to these nodes.  You may want to set those properties to false
            if you want prevent users from drawing links with a mouse-down
            and drag from the port, or to create a port with a different size
            or appearance.
            </remarks>
            <example>
            If you override this method, you may want the definition to do
            some of the things that the standard definition does:
            <code>
             protected virtual GoPort CreatePort() {
               GoPort p = new GoPort();
               p.Style = GoPortStyle.None;
               p.Size = new SizeF(6, 6);
               p.FromSpot = NoSpot;
               p.ToSpot = NoSpot;
               p.PortObject = this;
               return p;
             }
            </code>
            </example>
        </member>
        <member name="M:Northwoods.Go.GoIconicNode.CopyChildren(Northwoods.Go.GoGroup,Northwoods.Go.GoCopyDictionary)">
            <summary>
            Make copies of the icon, label and port.
            </summary>
            <param name="newgroup"></param>
            <param name="env"></param>
            <remarks>
            Remember to override this to copy any objects you add to this class.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoIconicNode.Remove(Northwoods.Go.GoObject)">
            <summary>
            Because the label may be selectable and deleted by the user,
            be sure to remove any reference to the label.
            </summary>
            <param name="obj"></param>
            <remarks>
            Remember to override this to clear any child object references you add to this class.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoIconicNode.LayoutChildren(Northwoods.Go.GoObject)">
            <summary>
            Position the label and port relative to the icon.
            </summary>
            <param name="childchanged"></param>
            <remarks>
            Initially the label is positioned below the icon.
            When <see cref="P:Northwoods.Go.GoIconicNode.DraggableLabel"/> is true, the user may select
            and drag the label around independently of the node.
            This class maintains the last known offset of the label with
            respect to the icon, so that this method can place the label
            correctly when <see cref="P:Northwoods.Go.GoIconicNode.DraggableLabel"/> is false or the
            <paramref name="childchanged"/> is not the label.
            When <see cref="P:Northwoods.Go.GoObject.Initializing"/> is true, this method does nothing.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoIconicNode.ChangeValue(Northwoods.Go.GoChangedEventArgs,System.Boolean)">
            <summary>
            Handle this class's property changes for undo and redo
            </summary>
            <param name="e"></param>
            <param name="undo"></param>
        </member>
        <member name="P:Northwoods.Go.GoIconicNode.Icon">
            <summary>
            Gets or sets the <see cref="T:Northwoods.Go.GoObject"/> acting as the icon for this node.
            </summary>
            <remarks>
            You might want to override the <see cref="M:Northwoods.Go.GoIconicNode.CreateIcon(System.Resources.ResourceManager,System.String)"/> method(s)
            if you want to create a different kind of <see cref="T:Northwoods.Go.GoImage"/> when
            constructing this kind of node.
            The new shape will have its Center location,
            Selectable, Resizable, Reshapable, ResizesRealtime, and Shadowed
            properties copied from the old shape.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoIconicNode.Image">
            <summary>
            Gets this node's icon, assuming it is a <see cref="T:Northwoods.Go.GoImage"/>, as it usually is.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoIconicNode.Label">
            <summary>
            Gets or sets the <see cref="T:Northwoods.Go.GoText"/> label.
            </summary>
            <remarks>
            You might want to override the <see cref="M:Northwoods.Go.GoIconicNode.CreateLabel(System.String)"/> method
            if you want to create a different kind of <see cref="T:Northwoods.Go.GoText"/> when
            constructing this kind of node.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoIconicNode.Port">
            <summary>
            Gets or sets the only port of this node, a <see cref="T:Northwoods.Go.GoPort"/>.
            </summary>
            <remarks>
            Setting this property to a new port will also set that port's
            <see cref="P:Northwoods.Go.GoPort.PortObject"/> to be this node,
            if it didn't already have a <see cref="P:Northwoods.Go.GoPort.PortObject"/>.
            You might want to override the <see cref="M:Northwoods.Go.GoIconicNode.CreatePort"/> method
            if you want to create a different kind of <see cref="T:Northwoods.Go.GoPort"/> when
            constructing this kind of node.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoIconicNode.SelectionObject">
            <summary>
            The selection object, what the user sees as being selected and what the user
            actually resizes, is the icon.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoIconicNode.DraggableLabel">
            <summary>
            Gets or sets whether the user can drag the label around independently of the node.
            </summary>
            <value>
            Initially this value is false--the label is always positioned by
            <see cref="M:Northwoods.Go.GoIconicNode.LayoutChildren(Northwoods.Go.GoObject)"/> and users cannot move the
            label without moving the whole node.
            </value>
        </member>
        <member name="T:Northwoods.Go.GoLabeledLink">
            <summary>
            This class provides a standard implementation of <see cref="T:Northwoods.Go.IGoLink"/>
            as a <see cref="P:Northwoods.Go.GoLabeledLink.GoObject"/> with several other decoration objects.
            </summary>
            <remarks>
            <para>
            The <see cref="P:Northwoods.Go.GoLabeledLink.RealLink"/> property is the actual <see cref="T:Northwoods.Go.GoLink"/>
            that this group uses to implement the link.  If you want to specify
            any arrow or highlighting or stroke point information, you should do
            so on the <see cref="P:Northwoods.Go.GoLabeledLink.RealLink"/> rather than on this class.  However,
            for your convenience, many of the <see cref="T:Northwoods.Go.GoLink"/> properties are
            available here, delegated to the <see cref="P:Northwoods.Go.GoLabeledLink.RealLink"/>.
            </para>
            <para>
            The labels, <see cref="P:Northwoods.Go.GoLabeledLink.MidLabel"/>, <see cref="P:Northwoods.Go.GoLabeledLink.FromLabel"/>, and <see cref="P:Northwoods.Go.GoLabeledLink.ToLabel"/>,
            are normally either null or instances of <see cref="T:Northwoods.Go.GoText"/>.  However,
            they can be other objects, including ports or groups of objects.
            Nevertheless, GoLabeledLink does not support link labels that are links.
            Nor may this link's ports be or be part of any of its own labels.
            </para>
            </remarks>
        </member>
        <member name="T:Northwoods.Go.IGoLink">
            <summary>
            This interface represents an abstract connection between nodes, using ports
            to specify more specific connection points on the nodes.
            </summary>
            <remarks>
            Every <c>IGoLink</c> also implements <see cref="P:Northwoods.Go.IGoGraphPart.GoObject"/>,
            <see cref="P:Northwoods.Go.IGoGraphPart.UserFlags"/>, and <see cref="P:Northwoods.Go.IGoGraphPart.UserObject"/>.
            </remarks>
            <seealso cref="T:Northwoods.Go.IGoPort"/>
            <seealso cref="T:Northwoods.Go.IGoNode"/>
        </member>
        <member name="M:Northwoods.Go.IGoLink.GetOtherPort(Northwoods.Go.IGoPort)">
            <summary>
            Given one of the ports connected to this link, return this link's other port.
            </summary>
        </member>
        <member name="M:Northwoods.Go.IGoLink.GetOtherNode(Northwoods.Go.IGoNode)">
            <summary>
            Given one of the nodes connected to this link, return this link's other node.
            </summary>
        </member>
        <member name="M:Northwoods.Go.IGoLink.Unlink">
            <summary>
            Remove this link by disconnecting it from both of its ports.
            </summary>
        </member>
        <member name="M:Northwoods.Go.IGoLink.OnPortChanged(Northwoods.Go.IGoPort,System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)">
            <summary>
            This method is called when one of this link's two ports is changed.
            </summary>
            <param name="port"></param>
            <param name="subhint"></param>
            <param name="oldI"></param>
            <param name="oldVal"></param>
            <param name="oldRect"></param>
            <param name="newI"></param>
            <param name="newVal"></param>
            <param name="newRect"></param>
        </member>
        <member name="P:Northwoods.Go.IGoLink.FromPort">
            <summary>
            Gets or sets the port that the link is coming from.
            </summary>
            <seealso cref="P:Northwoods.Go.IGoLink.ToPort"/>
            <seealso cref="P:Northwoods.Go.IGoLink.FromNode"/>
        </member>
        <member name="P:Northwoods.Go.IGoLink.ToPort">
            <summary>
            Gets or sets the port that the link is going to.
            </summary>
            <seealso cref="P:Northwoods.Go.IGoLink.FromPort"/>
            <seealso cref="P:Northwoods.Go.IGoLink.ToNode"/>
        </member>
        <member name="P:Northwoods.Go.IGoLink.FromNode">
            <summary>
            Gets the node that the link is coming from.
            </summary>
            <seealso cref="P:Northwoods.Go.IGoLink.FromPort"/>
            <seealso cref="P:Northwoods.Go.IGoLink.ToNode"/>
        </member>
        <member name="P:Northwoods.Go.IGoLink.ToNode">
            <summary>
            Gets the node that the link is going to.
            </summary>
            <seealso cref="P:Northwoods.Go.IGoLink.ToPort"/>
            <seealso cref="P:Northwoods.Go.IGoLink.FromNode"/>
        </member>
        <member name="F:Northwoods.Go.GoLabeledLink.ChangedLink">
            <summary>
            This is a <see cref="!:GoObject.Changed"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoLabeledLink.ChangedFromLabel">
            <summary>
            This is a <see cref="!:GoObject.Changed"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoLabeledLink.ChangedMidLabel">
            <summary>
            This is a <see cref="!:GoObject.Changed"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoLabeledLink.ChangedToLabel">
            <summary>
            This is a <see cref="!:GoObject.Changed"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoLabeledLink.ChangedFromLabelCentered">
            <summary>
            This is a <see cref="!:GoObject.Changed"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoLabeledLink.ChangedMidLabelCentered">
            <summary>
            This is a <see cref="!:GoObject.Changed"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoLabeledLink.ChangedToLabelCentered">
            <summary>
            This is a <see cref="!:GoObject.Changed"/> subhint.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoLabeledLink.#ctor">
            <summary>
            The constructor produces a link with no labels that is connected to no ports,
            and is not movable by the user.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoLabeledLink.CreateRealLink">
            <summary>
            Create a GoLink to act as the real link for this group that is a labeled link.
            </summary>
            <returns>
            By default this allocates a new <see cref="T:Northwoods.Go.GoLink"/>.
            </returns>
            <remarks>
            You may wish to override this in order to customize the initial appearance
            of the link or to substitute a subclass of <see cref="T:Northwoods.Go.GoLink"/> for
            different behavior.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoLabeledLink.CopyChildren(Northwoods.Go.GoGroup,Northwoods.Go.GoCopyDictionary)">
            <summary>
            Copying a labeled link is just a matter of copying the real link
            and the three label objects.
            </summary>
            <param name="newgroup"></param>
            <param name="env"></param>
        </member>
        <member name="M:Northwoods.Go.GoLabeledLink.Remove(Northwoods.Go.GoObject)">
            <summary>
            Remove a child object from this group.
            </summary>
            <param name="obj"></param>
            <remarks>
            This method is not normally called.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoLabeledLink.MoveChildren(System.Drawing.RectangleF)">
            <summary>
            Avoid repositioning the labels when a labeled link is moved.
            </summary>
            <param name="old"></param>
        </member>
        <member name="M:Northwoods.Go.GoLabeledLink.GetOtherPort(Northwoods.Go.IGoPort)">
            <summary>
            Return the port at the other end of this link from the given port.
            </summary>
            <param name="p"></param>
            <returns>
            An <see cref="T:Northwoods.Go.IGoPort"/>, that may be null if the other end of the link is
            not connected, or that may return the same <paramref name="p"/> if both
            ends of the link are connected to the same port.
            </returns>
        </member>
        <member name="M:Northwoods.Go.GoLabeledLink.GetOtherNode(Northwoods.Go.IGoNode)">
            <summary>
            Return the node at the other end of this link from the given node.
            </summary>
            <param name="n"></param>
            <returns>
            An <see cref="T:Northwoods.Go.IGoNode"/>, that may be null if the other end of the
            link is not connected or whose port may not be part of a node,
            or that may return the same <paramref name="n"/> if both ends of
            the link are connected to the same node, even if at different ports.
            </returns>
        </member>
        <member name="M:Northwoods.Go.GoLabeledLink.Unlink">
            <summary>
            Remove this link from its layer.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoLabeledLink.OnPortChanged(Northwoods.Go.IGoPort,System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)">
            <summary>
            Let links get notifications of changes to either port so labels
            can be moved and the real link's stroke can be recalculated.
            </summary>
            <param name="port"></param>
            <param name="subhint"></param>
            <param name="oldI"></param>
            <param name="oldVal"></param>
            <param name="oldRect"></param>
            <param name="newI"></param>
            <param name="newVal"></param>
            <param name="newRect"></param>
            <remarks>
            Most of the parameters are the same as for <see cref="!:GoObject.Changed"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoLabeledLink.Pick(Northwoods.Go.PointF,System.Boolean)">
            <summary>
            This is overridden to allow more picking flexibility to the <see cref="P:Northwoods.Go.GoLabeledLink.RealLink"/>.
            </summary>
            <param name="p"></param>
            <param name="selectableOnly"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.GoLabeledLink.LayoutChildren(Northwoods.Go.GoObject)">
            <summary>
            Position each of the labels.
            </summary>
            <param name="childchanged"></param>
            <remarks>
            This method calls <see cref="M:Northwoods.Go.GoLabeledLink.PositionEndLabel(Northwoods.Go.GoObject,System.Boolean,Northwoods.Go.PointF,Northwoods.Go.PointF,Northwoods.Go.PointF)"/> for the
            <see cref="P:Northwoods.Go.GoLabeledLink.FromLabel"/> and <see cref="P:Northwoods.Go.GoLabeledLink.ToLabel"/>, and calls
            <see cref="M:Northwoods.Go.GoLabeledLink.LayoutMidLabel(Northwoods.Go.GoObject)"/> which similarly calls
            <see cref="M:Northwoods.Go.GoLabeledLink.PositionMidLabel(Northwoods.Go.GoObject,Northwoods.Go.PointF,Northwoods.Go.PointF)"/> for the <see cref="P:Northwoods.Go.GoLabeledLink.MidLabel"/>.
            If there are less than two points in the stroke of the
            <see cref="P:Northwoods.Go.GoLabeledLink.RealLink"/>, this method does nothing.
            When <see cref="!:GoObject.Initializing"/> is true, this method does nothing.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoLabeledLink.PositionEndLabel(Northwoods.Go.GoObject,System.Boolean,Northwoods.Go.PointF,Northwoods.Go.PointF,Northwoods.Go.PointF)">
            <summary>
            Move a <see cref="P:Northwoods.Go.GoLabeledLink.FromLabel"/> or <see cref="P:Northwoods.Go.GoLabeledLink.ToLabel"/> to be near the link's corresponding end point.
            </summary>
            <param name="lab">The label object.</param>
            <param name="atEnd">Whether the <paramref name="lab"/> is the <see cref="P:Northwoods.Go.GoLabeledLink.ToLabel"/>.</param>
            <param name="a">The port link point.</param>
            <param name="b">The inner point of the end segment.</param>
            <param name="c">The inner end point of the second line segment.</param>
        </member>
        <member name="M:Northwoods.Go.GoLabeledLink.LayoutMidLabel(Northwoods.Go.GoObject)">
            <summary>
            Decide which segment should get the middle label,
            and call <see cref="M:Northwoods.Go.GoLabeledLink.PositionMidLabel(Northwoods.Go.GoObject,Northwoods.Go.PointF,Northwoods.Go.PointF)"/> to perform that positioning.
            </summary>
            <param name="childchanged">passed on from <see cref="M:Northwoods.Go.GoLabeledLink.LayoutChildren(Northwoods.Go.GoObject)"/></param>
            <remarks>
            If there are an odd number of segments in the link's stroke, this calls
            <see cref="M:Northwoods.Go.GoLabeledLink.PositionMidLabel(Northwoods.Go.GoObject,Northwoods.Go.PointF,Northwoods.Go.PointF)"/> with the endpoints of the middle segment.
            Otherwise with an even number of segments, it uses the longer of the
            two middle segments.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoLabeledLink.PositionMidLabel(Northwoods.Go.GoObject,Northwoods.Go.PointF,Northwoods.Go.PointF)">
            <summary>
            Move the MidLabel to an appropriate location near the middle of the link.
            </summary>
            <param name="lab">The label object.</param>
            <param name="a">The start point of the middle segment of the link.</param>
            <param name="b">The end point of the middle segment of the link.</param>
        </member>
        <member name="M:Northwoods.Go.GoLabeledLink.ChangeValue(Northwoods.Go.GoChangedEventArgs,System.Boolean)">
            <summary>
            Performs changes for undo and redo.
            </summary>
            <seealso cref="!:GoObject.ChangeValue"/>
        </member>
        <member name="P:Northwoods.Go.GoLabeledLink.GoObject">
            <summary>
            Returns itself as a <see cref="P:Northwoods.Go.GoLabeledLink.GoObject"/>.
            </summary>
            <remarks>
            This property cannot be set.
            </remarks>
            <seealso cref="P:Northwoods.Go.IGoGraphPart.GoObject"/>
        </member>
        <member name="P:Northwoods.Go.GoLabeledLink.UserFlags">
            <summary>
            Gets or sets an integer value associated with this port.
            </summary>
            <value>
            The initial value is zero.
            </value>
            <seealso cref="P:Northwoods.Go.IGoGraphPart.UserFlags"/>
        </member>
        <member name="P:Northwoods.Go.GoLabeledLink.UserObject">
            <summary>
            Gets or sets an object associated with this port.
            </summary>
            <value>
            The initial value is null.
            </value>
            <seealso cref="P:Northwoods.Go.IGoGraphPart.UserObject"/>
        </member>
        <member name="P:Northwoods.Go.GoLabeledLink.FromPort">
            <summary>
            Gets or sets the port that the link is coming from.
            </summary>
            <seealso cref="P:Northwoods.Go.IGoLink.FromPort"/>
        </member>
        <member name="P:Northwoods.Go.GoLabeledLink.ToPort">
            <summary>
            Gets or sets the port that the link is going to.
            </summary>
            <seealso cref="P:Northwoods.Go.IGoLink.ToPort"/>
            <seealso cref="P:Northwoods.Go.GoLabeledLink.FromPort"/>
        </member>
        <member name="P:Northwoods.Go.GoLabeledLink.FromNode">
            <summary>
            Gets the node that the link is coming from.
            </summary>
            <seealso cref="P:Northwoods.Go.IGoLink.FromNode"/>
            <seealso cref="P:Northwoods.Go.GoLabeledLink.ToNode"/>
        </member>
        <member name="P:Northwoods.Go.GoLabeledLink.ToNode">
            <summary>
            Gets the node that the link is going to.
            </summary>
            <seealso cref="P:Northwoods.Go.IGoLink.ToNode"/>
            <seealso cref="P:Northwoods.Go.GoLabeledLink.FromNode"/>
        </member>
        <member name="P:Northwoods.Go.GoLabeledLink.SelectionObject">
            <summary>
            Let the user see and manipulate the real link as if it were the selected object.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoLabeledLink.Shadowed">
            <summary>
            Giving this node a shadow really means giving the icon a shadow.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoLabeledLink.RealLink">
            <summary>
            Gets or sets the <see cref="T:Northwoods.Go.GoLink"/> object in this group.
            </summary>
            <remarks>
            <c>GoLabeledLink</c> delegates more of the <see cref="T:Northwoods.Go.IGoLink"/> interface
            to the value of this property.
            The real link also gets the selection handles when this labeled link is selected.
            Setting this property removes any previous <c>RealLink</c> value, and then adds the
            new value to this group.
            </remarks>
            <seealso cref="P:Northwoods.Go.GoLink.AbstractLink"/>
        </member>
        <member name="P:Northwoods.Go.GoLabeledLink.FromLabel">
            <summary>
            Gets or sets the label object associated with the source end of the link.
            </summary>
            <remarks>
            Setting this property removes any previous FromLabel value, and then adds the
            new value to this group.
            The label is positioned by <see cref="M:Northwoods.Go.GoLabeledLink.LayoutChildren(Northwoods.Go.GoObject)"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoLabeledLink.FromLabelCentered">
            <summary>
            Gets or sets whether the label at the start of the link is positioned on the stroke
            rather than to the side of the stroke.
            </summary>
            <value>
            By default this value is false;
            </value>
        </member>
        <member name="P:Northwoods.Go.GoLabeledLink.MidLabel">
            <summary>
            Gets or sets the label object associated with the middle of the link.
            </summary>
            <remarks>
            Setting this property removes any previous MidLabel value, and then adds the
            new value to this group.
            The label is positioned by <see cref="M:Northwoods.Go.GoLabeledLink.LayoutChildren(Northwoods.Go.GoObject)"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoLabeledLink.MidLabelCentered">
            <summary>
            Gets or sets whether the label at the middle of the link is positioned on the stroke
            rather than to the side of the stroke.
            </summary>
            <value>
            By default this value is false;
            </value>
        </member>
        <member name="P:Northwoods.Go.GoLabeledLink.ToLabel">
            <summary>
            Gets or sets the label object associated with the destination end of the link.
            </summary>
            <remarks>
            Setting this property removes any previous ToLabel value, and then adds the
            new value to this group.
            The label is positioned by <see cref="M:Northwoods.Go.GoLabeledLink.LayoutChildren(Northwoods.Go.GoObject)"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoLabeledLink.ToLabelCentered">
            <summary>
            Gets or sets whether the label at the end of the link is positioned on the stroke
            rather than to the side of the stroke.
            </summary>
            <value>
            By default this value is false;
            </value>
        </member>
        <member name="P:Northwoods.Go.GoLabeledLink.Pen">
            <summary>
            Gets or sets the <see cref="P:Northwoods.Go.GoLabeledLink.RealLink"/>'s <see cref="P:Northwoods.Go.GoShape.Pen"/> property.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoLabeledLink.PenWidth">
            <summary>
            Gets or sets the <see cref="P:Northwoods.Go.GoLabeledLink.RealLink"/>'s <see cref="P:Northwoods.Go.GoStroke.PenWidth"/> property.  [Only in GoDiagram Pocket]
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoLabeledLink.HighlightPenWidth">
            <summary>
            Gets or sets the <see cref="P:Northwoods.Go.GoLabeledLink.RealLink"/>'s <see cref="P:Northwoods.Go.GoStroke.HighlightPenWidth"/> property.  [Only in GoDiagram Pocket]
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoLabeledLink.Brush">
            <summary>
            Gets or sets the <see cref="P:Northwoods.Go.GoLabeledLink.RealLink"/>'s <see cref="P:Northwoods.Go.GoShape.Brush"/> property.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoLabeledLink.AvoidsNodes">
            <summary>
            Gets or sets the <see cref="P:Northwoods.Go.GoLabeledLink.RealLink"/>'s <see cref="P:Northwoods.Go.GoLink.AvoidsNodes"/> property.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoLabeledLink.Orthogonal">
            <summary>
            Gets or sets the <see cref="P:Northwoods.Go.GoLabeledLink.RealLink"/>'s <see cref="P:Northwoods.Go.GoLink.Orthogonal"/> property.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoLabeledLink.Relinkable">
            <summary>
            Gets or sets the <see cref="P:Northwoods.Go.GoLabeledLink.RealLink"/>'s <see cref="P:Northwoods.Go.GoLink.Relinkable"/> property.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoLabeledLink.Resizable">
            <summary>
            Gets or sets the <see cref="P:Northwoods.Go.GoLabeledLink.RealLink"/>'s <see cref="!:GoObject.Resizable"/> property.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoLabeledLink.Reshapable">
            <summary>
            Gets or sets the <see cref="P:Northwoods.Go.GoLabeledLink.RealLink"/>'s <see cref="!:GoObject.Reshapable"/> property.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoLabeledLink.Style">
            <summary>
            Gets or sets the <see cref="P:Northwoods.Go.GoLabeledLink.RealLink"/>'s <see cref="P:Northwoods.Go.GoStroke.Style"/> property.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoLabeledLink.ToArrow">
            <summary>
            Gets or sets the <see cref="P:Northwoods.Go.GoLabeledLink.RealLink"/>'s <see cref="P:Northwoods.Go.GoStroke.ToArrow"/> property.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoLabeledLink.ToArrowStyle">
            <summary>
            Gets or sets the <see cref="P:Northwoods.Go.GoLabeledLink.RealLink"/>'s <see cref="P:Northwoods.Go.GoStroke.ToArrowStyle"/> property.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoLabeledLink.ToArrowLength">
            <summary>
            Gets or sets the <see cref="P:Northwoods.Go.GoLabeledLink.RealLink"/>'s <see cref="P:Northwoods.Go.GoStroke.ToArrowLength"/> property.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoLabeledLink.ToArrowShaftLength">
            <summary>
            Gets or sets the <see cref="P:Northwoods.Go.GoLabeledLink.RealLink"/>'s <see cref="P:Northwoods.Go.GoStroke.ToArrowShaftLength"/> property.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoLabeledLink.ToArrowWidth">
            <summary>
            Gets or sets the <see cref="P:Northwoods.Go.GoLabeledLink.RealLink"/>'s <see cref="P:Northwoods.Go.GoStroke.ToArrowWidth"/> property.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoLabeledLink.ToArrowFilled">
            <summary>
            Gets or sets the <see cref="P:Northwoods.Go.GoLabeledLink.RealLink"/>'s <see cref="P:Northwoods.Go.GoStroke.ToArrowFilled"/> property.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoLabeledLink.FromArrow">
            <summary>
            Gets or sets the <see cref="P:Northwoods.Go.GoLabeledLink.RealLink"/>'s <see cref="P:Northwoods.Go.GoStroke.FromArrow"/> property.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoLabeledLink.FromArrowStyle">
            <summary>
            Gets or sets the <see cref="P:Northwoods.Go.GoLabeledLink.RealLink"/>'s <see cref="P:Northwoods.Go.GoStroke.FromArrowStyle"/> property.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoLabeledLink.FromArrowLength">
            <summary>
            Gets or sets the <see cref="P:Northwoods.Go.GoLabeledLink.RealLink"/>'s <see cref="P:Northwoods.Go.GoStroke.FromArrowLength"/> property.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoLabeledLink.FromArrowShaftLength">
            <summary>
            Gets or sets the <see cref="P:Northwoods.Go.GoLabeledLink.RealLink"/>'s <see cref="P:Northwoods.Go.GoStroke.FromArrowShaftLength"/> property.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoLabeledLink.FromArrowWidth">
            <summary>
            Gets or sets the <see cref="P:Northwoods.Go.GoLabeledLink.RealLink"/>'s <see cref="P:Northwoods.Go.GoStroke.FromArrowWidth"/> property.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoLabeledLink.FromArrowFilled">
            <summary>
            Gets or sets the <see cref="P:Northwoods.Go.GoLabeledLink.RealLink"/>'s <see cref="P:Northwoods.Go.GoStroke.FromArrowFilled"/> property.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoLabeledLink.Curviness">
            <summary>
            Gets or sets the <see cref="P:Northwoods.Go.GoLabeledLink.RealLink"/>'s <see cref="P:Northwoods.Go.GoStroke.Curviness"/> property.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoLabeledLink.Highlight">
            <summary>
            Gets or sets the <see cref="P:Northwoods.Go.GoLabeledLink.RealLink"/>'s <see cref="P:Northwoods.Go.GoStroke.Highlight"/> property.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoLabeledLink.HighlightPen">
            <summary>
            Gets or sets the <see cref="P:Northwoods.Go.GoLabeledLink.RealLink"/>'s <see cref="P:Northwoods.Go.GoStroke.HighlightPen"/> property.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoLabeledLink.HighlightWhenSelected">
            <summary>
            Gets or sets the <see cref="P:Northwoods.Go.GoLabeledLink.RealLink"/>'s <see cref="P:Northwoods.Go.GoStroke.HighlightWhenSelected"/> property.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoLabeledLink.AdjustingStyle">
            <summary>
            Gets or sets the <see cref="P:Northwoods.Go.GoLabeledLink.RealLink"/>'s <see cref="P:Northwoods.Go.GoLink.AdjustingStyle"/> property.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoLabeledLink.PartID">
            <summary>
            Gets or sets the <see cref="P:Northwoods.Go.GoLabeledLink.RealLink"/>'s <see cref="P:Northwoods.Go.GoLink.PartID"/> property.
            </summary>
        </member>
        <member name="T:Northwoods.Go.GoLinkAdjustingStyle">
            <summary>
            Specifies how <see cref="M:Northwoods.Go.GoLink.CalculateStroke"/> should determine the
            points of the link's stroke.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoLinkAdjustingStyle.Calculate">
            <summary>
            Clear all of the existing points and add points for the standard kinds of strokes.
            </summary>
            <remarks>
            <see cref="T:Northwoods.Go.GoLink"/> has a number of standard appearances:
            <list type="bullet">
            <item>
            When both ports have link spots that are <see cref="F:Northwoods.Go.GoObject.NoSpot"/>,
            draw a straight line if the <see cref="P:Northwoods.Go.GoStroke.Style"/> is <see cref="F:Northwoods.Go.GoStrokeStyle.Line"/>
            or draw a Bezier curve if the stroke style is <see cref="F:Northwoods.Go.GoStrokeStyle.Bezier"/>.
            </item>
            <item>
            When only one port has a link spot, draw a two segment straight line.
            </item>
            <item>
            When both ports have link spots, draw either a three-segment line
            or a Bezier curve, depending on the value of <see cref="P:Northwoods.Go.GoStroke.Style"/>.
            </item>
            <item>
            If <see cref="P:Northwoods.Go.GoLink.Orthogonal"/> is true, draw a five-segment line (either
            straight segments or with rounded corners) or a Bezier curve.
            </item>
            <item>
            If <see cref="P:Northwoods.Go.GoLink.IsSelfLoop"/> is true, draw either a Bezier curve or
            a five-segment line if <see cref="P:Northwoods.Go.GoLink.Orthogonal"/> is true.
            </item>
            </list>
            </remarks>
        </member>
        <member name="F:Northwoods.Go.GoLinkAdjustingStyle.Scale">
            <summary>
            When there are more than the standard number of points in the stroke,
            scale and rotate the intermediate points so that the link's shape stays
            approximately the same.
            </summary>
            <remarks>
            This style, implemented by <see cref="M:Northwoods.Go.GoLink.RescalePoints(System.Int32,Northwoods.Go.PointF,System.Int32,Northwoods.Go.PointF)"/>, does not
            maintain the horizontal and vertical line segments of an orthogonal link.
            Orthogonal links with this adjusting style will instead recalculate
            the standard stroke path, as if the adjusting style were <see cref="F:Northwoods.Go.GoLinkAdjustingStyle.Calculate"/>.
            </remarks>
        </member>
        <member name="F:Northwoods.Go.GoLinkAdjustingStyle.Stretch">
            <summary>
            When there are more than the standard number of points in the stroke,
            linearly interpolate the intermediate points along the X and Y dimensions
            between the ports.
            </summary>
            <remarks>
            This style, implemented by <see cref="M:Northwoods.Go.GoLink.StretchPoints(System.Int32,Northwoods.Go.PointF,System.Int32,Northwoods.Go.PointF)"/>, does not
            maintain the horizontal and vertical line segments of an orthogonal link.
            Orthogonal links with this adjusting style will instead only modify the
            end points of the existing path, as if the adjusting style were <see cref="F:Northwoods.Go.GoLinkAdjustingStyle.End"/>.
            </remarks>
        </member>
        <member name="F:Northwoods.Go.GoLinkAdjustingStyle.End">
            <summary>
            When there are more than the standard number of points in the stroke,
            or if the stroke is orthogonal, just modify the end points,
            while leaving the intermediate points unchanged.
            </summary>
            <remarks>
            This style maintains orthogonality for orthogonal links.
            </remarks>
        </member>
        <member name="T:Northwoods.Go.GoLink">
            <summary>
            This class provides a standard implementation of <see cref="T:Northwoods.Go.IGoLink"/>
            as a <see cref="P:Northwoods.Go.GoLink.GoObject"/>.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoLink.RelinkableFromHandle">
            <summary>
            This is a special handle ID.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoLink.RelinkableToHandle">
            <summary>
            This is a special handle ID.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoLink.ChangedLinkUserFlags">
            <summary>
            This is a <see cref="!:GoObject.Changed"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoLink.ChangedLinkUserObject">
            <summary>
            This is a <see cref="!:GoObject.Changed"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoLink.ChangedFromPort">
            <summary>
            This is a <see cref="!:GoObject.Changed"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoLink.ChangedToPort">
            <summary>
            This is a <see cref="!:GoObject.Changed"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoLink.ChangedOrthogonal">
            <summary>
            This is a <see cref="!:GoObject.Changed"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoLink.ChangedRelinkable">
            <summary>
            This is a <see cref="!:GoObject.Changed"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoLink.ChangedAbstractLink">
            <summary>
            This is a <see cref="!:GoObject.Changed"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoLink.ChangedAvoidsNodes">
            <summary>
            This is a <see cref="!:GoObject.Changed"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoLink.ChangedPartID">
            <summary>
            This is a <see cref="!:GoObject.Changed"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoLink.ChangedAdjustingStyle">
            <summary>
            This is a <see cref="!:GoObject.Changed"/> subhint.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoLink.#ctor">
            <summary>
            The constructor produces a link connected to no ports, and that is
            not movable by the user, but is relinkable.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoLink.CopyObject(Northwoods.Go.GoCopyDictionary)">
            <summary>
            Copying a link does not immediately set the <see cref="P:Northwoods.Go.IGoLink.FromPort"/>
            and <see cref="P:Northwoods.Go.IGoLink.ToPort"/> of the copied link,
            but does add the link to the copy dictionary's
            <see cref="P:Northwoods.Go.GoCopyDictionary.Delayeds"/> collection so that later
            processing can set those properties.
            </summary>
            <param name="env"></param>
        </member>
        <member name="M:Northwoods.Go.GoLink.CopyObjectDelayed(Northwoods.Go.GoCopyDictionary,Northwoods.Go.GoObject)">
            <summary>
            Make sure both ports are newly copied ports, or else remove this link
            from the destination layer.
            </summary>
            <param name="env"></param>
            <param name="newobj"></param>
        </member>
        <member name="M:Northwoods.Go.GoLink.GetOtherPort(Northwoods.Go.IGoPort)">
            <summary>
            Return the port at the other end of this link from the given port.
            </summary>
            <param name="p"></param>
            <returns>
            <c>GoLink.GetOtherPort(this, p)</c>, an <see cref="T:Northwoods.Go.IGoPort"/>.
            </returns>
        </member>
        <member name="M:Northwoods.Go.GoLink.GetOtherNode(Northwoods.Go.IGoNode)">
            <summary>
            Return the node at the other end of this link from the given node.
            </summary>
            <param name="n"></param>
            <returns>
            <c>GoLink.GetOtherNode(this, n)</c>, an <see cref="T:Northwoods.Go.IGoNode"/>.
            </returns>
        </member>
        <member name="M:Northwoods.Go.GoLink.Unlink">
            <summary>
            Remove this link from its layer.
            </summary>
            <remarks>
            This method also removes this link from both ports' collections of
            connected links, by the implementation of <see cref="M:Northwoods.Go.GoLink.OnLayerChanged(Northwoods.Go.GoLayer,Northwoods.Go.GoLayer,Northwoods.Go.GoObject)"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoLink.OnPortChanged(Northwoods.Go.IGoPort,System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)">
            <summary>
            Let links get notifications of changes to either port or to the link itself.
            </summary>
            <param name="port">This <see cref="T:Northwoods.Go.IGoPort"/> may be null for some events on the link.</param>
            <param name="subhint">
            This integer may include <see cref="F:Northwoods.Go.GoLink.ChangedFromPort"/> and <see cref="F:Northwoods.Go.GoLink.ChangedToPort"/>,
            stroke changes such as <see cref="F:Northwoods.Go.GoStroke.ChangedAllPoints"/> and <see cref="F:Northwoods.Go.GoStroke.ChangedStyle"/>,
            as well as some selected <c>GoPort.Changed...</c> subhints.
            </param>
            <param name="oldI"></param>
            <param name="oldVal"></param>
            <param name="oldRect"></param>
            <param name="newI"></param>
            <param name="newVal"></param>
            <param name="newRect"></param>
            <remarks>
            In general when this method is called, we call <see cref="M:Northwoods.Go.GoLink.CalculateStroke"/>.
            Most of the parameters are the same as for <see cref="!:GoObject.Changed"/>.
            This method does nothing when <paramref name="port"/> is null.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoLink.PortsOnLinkChanged(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)">
            <summary>
            Notify both ports that there was a change to this link.
            </summary>
            <param name="subhint"></param>
            <param name="oldI"></param>
            <param name="oldVal"></param>
            <param name="oldRect"></param>
            <param name="newI"></param>
            <param name="newVal"></param>
            <param name="newRect"></param>
            <remarks>
            This calls <see cref="M:Northwoods.Go.IGoPort.OnLinkChanged(Northwoods.Go.IGoLink,System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> on both ports.
            Most of the parameters are the same as for <see cref="!:GoObject.Changed"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoLink.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)">
            <summary>
            If one of the stroke's points has changed, we notify this link's AbstractLink
            about the change, so that it has a chance to recalculate its stroke.
            </summary>
            <param name="subhint"></param>
            <param name="oldI"></param>
            <param name="oldVal"></param>
            <param name="oldRect"></param>
            <param name="newI"></param>
            <param name="newVal"></param>
            <param name="newRect"></param>
            <remarks>
            This notification is useful for <see cref="T:Northwoods.Go.GoLabeledLink"/> to be notified about
            changes in the stroke so that its labels can be repositioned.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoLink.GetOtherPort(Northwoods.Go.IGoLink,Northwoods.Go.IGoPort)">
            <summary>
            Return the IGoPort of an IGoLink other than the given one.
            </summary>
            <param name="l"></param>
            <param name="p"></param>
            <returns>
            An <see cref="T:Northwoods.Go.IGoPort"/>, that may be null if the other end of the link is
            not connected, or that may return the same <paramref name="p"/> if both
            ends of the link are connected to the same port.
            </returns>
        </member>
        <member name="M:Northwoods.Go.GoLink.GetOtherNode(Northwoods.Go.IGoLink,Northwoods.Go.IGoNode)">
            <summary>
            Return the IGoNode connected to the other end of an IGoLink.
            </summary>
            <param name="l"></param>
            <param name="n"></param>
            <returns>
            An <see cref="T:Northwoods.Go.IGoNode"/>, that may be null if the other end of the
            link is not connected or whose port may not be part of a node,
            or that may return the same <paramref name="n"/> if both ends of
            the link are connected to the same node, even if at different ports.
            </returns>
        </member>
        <member name="M:Northwoods.Go.GoLink.DoResize(Northwoods.Go.GoView,System.Drawing.RectangleF,Northwoods.Go.PointF,System.Int32,Northwoods.Go.GoInputState,System.Drawing.SizeF,System.Drawing.SizeF)">
            <summary>
            Handle resizing in the same manner as <see cref="T:Northwoods.Go.GoStroke"/>,
            but when <see cref="P:Northwoods.Go.GoLink.Orthogonal"/> is true, we move both points
            of the middle segment in order to maintain orthogonality.
            </summary>
            <param name="view"></param>
            <param name="origRect"></param>
            <param name="newPoint"></param>
            <param name="whichHandle"></param>
            <param name="evttype"></param>
            <param name="min"></param>
            <param name="max"></param>
        </member>
        <member name="M:Northwoods.Go.GoLink.AddSelectionHandles(Northwoods.Go.GoSelection,Northwoods.Go.GoObject)">
            <summary>
            Unlike a normal <see cref="T:Northwoods.Go.GoStroke"/> the end handles are in the
            shape of diamonds if <see cref="P:Northwoods.Go.GoLink.Relinkable"/> is true.
            </summary>
            <param name="sel"></param>
            <param name="selectedObj"></param>
        </member>
        <member name="M:Northwoods.Go.GoLink.OnLayerChanged(Northwoods.Go.GoLayer,Northwoods.Go.GoLayer,Northwoods.Go.GoObject)">
            <summary>
            When a link is removed from a layer, also remove it from the
            collections of connected links of both ports.
            </summary>
            <param name="oldlayer"></param>
            <param name="newlayer"></param>
            <param name="mainObj"></param>
        </member>
        <member name="M:Northwoods.Go.GoLink.CalculateStroke">
            <summary>
            This method is responsible for determining the points in the stroke,
            given the positions of the ports.
            </summary>
            <remarks>
            <para>
            The standard stroke path is determined by properties of this link
            and of the two ports it is connected to.
            If both ports are <see cref="T:Northwoods.Go.GoPort"/>s, by default this method
            considers the <see cref="P:Northwoods.Go.GoLink.FromPort"/>'s <see cref="P:Northwoods.Go.GoPort.FromSpot"/>
            and the <see cref="P:Northwoods.Go.GoLink.ToPort"/>'s <see cref="P:Northwoods.Go.GoPort.ToSpot"/>.
            If both spots are <see cref="!:GoObject.NoSpot"/>, this link's stroke
            will consist of two points determined by calling
            <see cref="M:Northwoods.Go.GoPort.GetFromLinkPoint(Northwoods.Go.IGoLink)"/> and <see cref="M:Northwoods.Go.GoPort.GetToLinkPoint(Northwoods.Go.IGoLink)"/>.
            (There are four points if the <see cref="P:Northwoods.Go.GoStroke.Style"/> is
            <see cref="F:Northwoods.Go.GoStrokeStyle.Bezier"/>--the points are plotted according
            to the value of <see cref="P:Northwoods.Go.GoStroke.Curviness"/>.)
            If both spots have "spots" (i.e. not <see cref="!:GoObject.NoSpot"/>), 
            there will be four points in the stroke, resulting in
            three straight line segments, unless <see cref="P:Northwoods.Go.GoLink.Orthogonal"/> is
            true, in which case there are six points (five horizontal or vertical
            line segments).
            </para>
            <para>
            However, if there are already more than the standard number of
            points in this link, the <see cref="M:Northwoods.Go.GoLink.AdjustPoints(System.Int32,Northwoods.Go.PointF,System.Int32,Northwoods.Go.PointF)"/> method is called
            to give the link a chance to decide how it wants to modify its path.
            The behavior of <see cref="M:Northwoods.Go.GoLink.AdjustPoints(System.Int32,Northwoods.Go.PointF,System.Int32,Northwoods.Go.PointF)"/> depends on the value of
            <see cref="P:Northwoods.Go.GoLink.AdjustingStyle"/>.
            If <see cref="M:Northwoods.Go.GoLink.AdjustPoints(System.Int32,Northwoods.Go.PointF,System.Int32,Northwoods.Go.PointF)"/> returns false, this method plots the
            standard stroke as described above.
            </para>
            <para>
            If either port is not a <see cref="T:Northwoods.Go.GoPort"/>, this stroke is just
            a single straight line segment between the centers of the objects.
            If either port is not a <see cref="P:Northwoods.Go.GoLink.GoObject"/>, this method does nothing.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoLink.AdjustPoints(System.Int32,Northwoods.Go.PointF,System.Int32,Northwoods.Go.PointF)">
            <summary>
            Adjust all of the existing points in this link's stroke in an inclusive range
            according to new first and last stroke points.
            </summary>
            <param name="startIndex">the zero-based index of the first point to be changed, to be
            the value of <paramref name="newFromPoint"/></param>
            <param name="newFromPoint"></param>
            <param name="endIndex">the zero-based index of the last point to be changed, to be
            the value of <paramref name="newToPoint"/></param>
            <param name="newToPoint"></param>
            <value>
            This method should return true if the stroke points were adjusted.  Return false
            to tell <see cref="M:Northwoods.Go.GoLink.CalculateStroke"/> to plot the standard path.
            </value>
            <remarks>
            <para>
            This is primarily useful to help maintain intermediate inflection points
            in a link when one or both ports moves.
            By default this just calls <see cref="M:Northwoods.Go.GoLink.RescalePoints(System.Int32,Northwoods.Go.PointF,System.Int32,Northwoods.Go.PointF)"/>, <see cref="M:Northwoods.Go.GoLink.StretchPoints(System.Int32,Northwoods.Go.PointF,System.Int32,Northwoods.Go.PointF)"/>,
            or <see cref="M:Northwoods.Go.GoLink.ModifyEndPoints(System.Int32,Northwoods.Go.PointF,System.Int32,Northwoods.Go.PointF)"/>.
            This method is not called when there are no existing points to be adjusted
            or when <see cref="P:Northwoods.Go.GoLink.AdjustingStyle"/> is <see cref="F:Northwoods.Go.GoLinkAdjustingStyle.Calculate"/>.
            </para>
            <para>
            When this link is <see cref="P:Northwoods.Go.GoLink.Orthogonal"/>, an <see cref="P:Northwoods.Go.GoLink.AdjustingStyle"/> of
            <see cref="F:Northwoods.Go.GoLinkAdjustingStyle.Scale"/> will just return false to result in
            the standard orthogonal path.
            An <see cref="P:Northwoods.Go.GoLink.AdjustingStyle"/> of <see cref="F:Northwoods.Go.GoLinkAdjustingStyle.Stretch"/>
            for an orthogonal link is treated as if it were <see cref="F:Northwoods.Go.GoLinkAdjustingStyle.End"/>.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoLink.RescalePoints(System.Int32,Northwoods.Go.PointF,System.Int32,Northwoods.Go.PointF)">
            <summary>
            Maintain the same shape for the stroke, but scale and rotate according to
            new points <paramref name="newFromPoint"/> and <paramref name="newToPoint"/>.
            </summary>
            <param name="startIndex"></param>
            <param name="newFromPoint"></param>
            <param name="endIndex"></param>
            <param name="newToPoint"></param>
            <value>
            This method should return true if the stroke points were adjusted.  Return false
            to tell <see cref="M:Northwoods.Go.GoLink.AdjustPoints(System.Int32,Northwoods.Go.PointF,System.Int32,Northwoods.Go.PointF)"/> and <see cref="M:Northwoods.Go.GoLink.CalculateStroke"/> to plot
            the standard stroke path.
            </value>
            <remarks>
            The <paramref name="startIndex"/> point should be set to <paramref name="newFromPoint"/>,
            and the <paramref name="endIndex"/> point should be set to <paramref name="newToPoint"/>,
            and all the intermediate points should be scaled and rotated accordingly to
            maintain the same shape as the original set of points from <paramref name="startIndex"/>
            to <paramref name="endIndex"/>, inclusive.
            <see cref="M:Northwoods.Go.GoLink.AdjustPoints(System.Int32,Northwoods.Go.PointF,System.Int32,Northwoods.Go.PointF)"/> calls this method when <see cref="P:Northwoods.Go.GoLink.AdjustingStyle"/>
            is <see cref="F:Northwoods.Go.GoLinkAdjustingStyle.Scale"/>.
            This method should not be used when <see cref="P:Northwoods.Go.GoLink.Orthogonal"/> is true.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoLink.StretchPoints(System.Int32,Northwoods.Go.PointF,System.Int32,Northwoods.Go.PointF)">
            <summary>
            Stretch the points of this stroke by interpolating the points
            from <paramref name="startIndex"/> to <paramref name="endIndex"/> between the
            new points <paramref name="newFromPoint"/> and <paramref name="newToPoint"/>.
            </summary>
            <param name="startIndex"></param>
            <param name="newFromPoint"></param>
            <param name="endIndex"></param>
            <param name="newToPoint"></param>
            <value>
            This method should return true if the stroke points were adjusted.  Return false
            to tell <see cref="M:Northwoods.Go.GoLink.AdjustPoints(System.Int32,Northwoods.Go.PointF,System.Int32,Northwoods.Go.PointF)"/> and <see cref="M:Northwoods.Go.GoLink.CalculateStroke"/> to plot
            the standard stroke path.
            </value>
            <remarks>
            The <paramref name="startIndex"/> point should be set to <paramref name="newFromPoint"/>,
            and the <paramref name="endIndex"/> point should be set to <paramref name="newToPoint"/>,
            and all the intermediate points should be interpolated linearly to
            stretch or compress the original set of points from <paramref name="startIndex"/>
            to <paramref name="endIndex"/>, inclusive, along each of the X and Y dimensions.
            <see cref="M:Northwoods.Go.GoLink.AdjustPoints(System.Int32,Northwoods.Go.PointF,System.Int32,Northwoods.Go.PointF)"/> calls this method when <see cref="P:Northwoods.Go.GoLink.AdjustingStyle"/>
            is <see cref="F:Northwoods.Go.GoLinkAdjustingStyle.Stretch"/>.
            This method should not be used when <see cref="P:Northwoods.Go.GoLink.Orthogonal"/> is true.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoLink.ModifyEndPoints(System.Int32,Northwoods.Go.PointF,System.Int32,Northwoods.Go.PointF)">
            <summary>
            Modify only the end points of this stroke to match any new
            <paramref name="newFromPoint"/> or <paramref name="newToPoint"/> points;
            intermediate points are not changed.
            </summary>
            <param name="startIndex"></param>
            <param name="newFromPoint"></param>
            <param name="endIndex"></param>
            <param name="newToPoint"></param>
            <value>
            This method should return true if the stroke points were adjusted.  Return false
            to tell <see cref="M:Northwoods.Go.GoLink.AdjustPoints(System.Int32,Northwoods.Go.PointF,System.Int32,Northwoods.Go.PointF)"/> and <see cref="M:Northwoods.Go.GoLink.CalculateStroke"/> to plot
            the standard stroke path.
            </value>
            <remarks>
            The <paramref name="startIndex"/> point should be set to <paramref name="newFromPoint"/>,
            and the <paramref name="endIndex"/> point should be set to <paramref name="newToPoint"/>,
            and the intermediate points should be not be changed unless needed to maintain
            orthogonality when <see cref="P:Northwoods.Go.GoLink.Orthogonal"/> is true.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoLink.AddOrthoPoints(Northwoods.Go.PointF,System.Single,Northwoods.Go.PointF,System.Single)">
            <summary>
            This method is called by <see cref="M:Northwoods.Go.GoLink.CalculateStroke"/> when <see cref="P:Northwoods.Go.GoLink.Orthogonal"/>
            is true and both ports are instances of <see cref="T:Northwoods.Go.GoPort"/> and at least one of
            them have a link spot that is not <see cref="!:GoObject.NoSpot"/>.
            </summary>
            <param name="startFrom"></param>
            <param name="fromDir">0, 90, 180, or 270 degrees</param>
            <param name="endTo"></param>
            <param name="toDir">0, 90, 180, or 270 degrees</param>
            <remarks>
            This method calls <see cref="M:Northwoods.Go.GoLink.GetMidOrthoPosition(System.Single,System.Single,System.Boolean)"/> to determine the
            distance of the middle segment between the two ports.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoLink.GetMidOrthoPosition(System.Single,System.Single,System.Boolean)">
            <summary>
            This method is called by <see cref="M:Northwoods.Go.GoLink.AddOrthoPoints(Northwoods.Go.PointF,System.Single,Northwoods.Go.PointF,System.Single)"/> to determine the distance
            of the middle segment between the two ports.
            </summary>
            <param name="fromPosition">The <see cref="P:Northwoods.Go.GoLink.FromPort"/>'s point's X or Y coordinate, depending on the direction</param>
            <param name="toPosition">The <see cref="P:Northwoods.Go.GoLink.ToPort"/>'s point's X or Y coordinate, depending on the direction</param>
            <param name="vertical">Whether the mid-position is along the vertical axis or horizontal</param>
            <returns></returns>
            <remarks>
            By default this returns the midpoint between the two coordinates.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoLink.ChangeValue(Northwoods.Go.GoChangedEventArgs,System.Boolean)">
            <summary>
            Performs changes for undo and redo.
            </summary>
            <seealso cref="!:GoObject.ChangeValue"/>
        </member>
        <member name="P:Northwoods.Go.GoLink.GoObject">
            <summary>
            Returns itself as a <see cref="P:Northwoods.Go.GoLink.GoObject"/>.
            </summary>
            <remarks>
            This property cannot be set.
            </remarks>
            <seealso cref="P:Northwoods.Go.IGoGraphPart.GoObject"/>
        </member>
        <member name="P:Northwoods.Go.GoLink.UserFlags">
            <summary>
            Gets or sets an integer value associated with this link.
            </summary>
            <value>
            The initial value is zero.
            </value>
            <seealso cref="P:Northwoods.Go.IGoGraphPart.UserFlags"/>
        </member>
        <member name="P:Northwoods.Go.GoLink.UserObject">
            <summary>
            Gets or sets an object associated with this link.
            </summary>
            <value>
            The initial value is null.
            </value>
            <seealso cref="P:Northwoods.Go.IGoGraphPart.UserObject"/>
        </member>
        <member name="P:Northwoods.Go.GoLink.FromPort">
            <summary>
            Gets or sets the port that the link is coming from.
            </summary>
            <seealso cref="P:Northwoods.Go.IGoLink.FromPort"/>
        </member>
        <member name="P:Northwoods.Go.GoLink.ToPort">
            <summary>
            Gets or sets the port that the link is going to.
            </summary>
            <seealso cref="P:Northwoods.Go.IGoLink.ToPort"/>
            <seealso cref="P:Northwoods.Go.GoLink.FromPort"/>
        </member>
        <member name="P:Northwoods.Go.GoLink.FromNode">
            <summary>
            Gets the node that the link is coming from.
            </summary>
            <seealso cref="P:Northwoods.Go.IGoLink.FromNode"/>
            <seealso cref="P:Northwoods.Go.GoLink.ToNode"/>
        </member>
        <member name="P:Northwoods.Go.GoLink.ToNode">
            <summary>
            Gets the node that the link is going to.
            </summary>
            <seealso cref="P:Northwoods.Go.IGoLink.ToNode"/>
            <seealso cref="P:Northwoods.Go.GoLink.FromNode"/>
        </member>
        <member name="P:Northwoods.Go.GoLink.AbstractLink">
            <summary>
            Get the object acting as the <see cref="T:Northwoods.Go.IGoLink"/>.
            </summary>
            <value>
            Initially this value will be this <see cref="T:Northwoods.Go.GoLink"/> itself.
            Any new value must not be null.
            </value>
            <remarks>
            This property allows a GoLink to be used in the implementation of an IGoLink
            without being the IGoLink.  This is important to avoid confusion in classes such as
            <see cref="T:Northwoods.Go.GoLabeledLink"/>.
            When the link is copied or removed, it is actually the abstract link that is
            copied or removed, not just this GoLink object.
            </remarks>
            <seealso cref="P:Northwoods.Go.GoLabeledLink.RealLink"/>
        </member>
        <member name="P:Northwoods.Go.GoLink.Orthogonal">
            <summary>
            Gets or sets whether the segments of the link are always horizontal or vertical.
            </summary>
            <remarks>
            This property primarily controls the behavior of <see cref="M:Northwoods.Go.GoLink.CalculateStroke"/>,
            to position the points of the stroke so that straight line segments will
            be horizontal or vertical.
            You can have a link drawn with only horizontal and vertical segments if the
            link's stroke style is <see cref="F:Northwoods.Go.GoStrokeStyle.Line"/> or
            <see cref="F:Northwoods.Go.GoStrokeStyle.RoundedLine"/>.
            If the stroke style is <see cref="F:Northwoods.Go.GoStrokeStyle.Bezier"/>, some of the orthogonally
            positioned points act as control points to help form the curve.
            The orthogonal <see cref="M:Northwoods.Go.GoLink.CalculateStroke"/> algorithm adds two segments to
            the normal three segments so that it is possible to connect two ports using only
            orthogonal lines.
            Changing this value will call <see cref="M:Northwoods.Go.GoLink.PortsOnLinkChanged(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> to notify
            both ports that this property changed.
            Setting this property to true will clear any existing points and then call
            <see cref="M:Northwoods.Go.GoLink.CalculateStroke"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoLink.Relinkable">
            <summary>
            Gets or sets whether the user may reconnect this link to another port.
            </summary>
            <value>
            This defaults to true.
            </value>
        </member>
        <member name="P:Northwoods.Go.GoLink.AvoidsNodes">
            <summary>
            Gets or sets whether the link's path tries to avoid other nodes.
            </summary>
            <value>
            This defaults to false.
            </value>
            <remarks>
            This property is only applicable when the <see cref="P:Northwoods.Go.GoLink.Orthogonal"/> property is true.
            A Bezier <see cref="P:Northwoods.Go.GoLink.Style"/> for this link is not recommended.
            When this property is true you will incur a noticeable overhead in each call to
            <see cref="M:Northwoods.Go.GoLink.CalculateStroke"/>.
            Changing this value will call <see cref="M:Northwoods.Go.GoLink.PortsOnLinkChanged(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> to notify
            both ports that this property changed.
            Setting this property to true will clear any existing points and then call
            <see cref="M:Northwoods.Go.GoLink.CalculateStroke"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoLink.FirstPickIndex">
            <summary>
            Return the index of the first stroke point to get a selection handle.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoLink.LastPickIndex">
            <summary>
            Return the index of the last stroke point to get a selection handle.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoLink.Style">
            <summary>
            When <see cref="P:Northwoods.Go.GoLink.IsSelfLoop"/> is true and <see cref="P:Northwoods.Go.GoLink.Orthogonal"/> is false,
            the stroke style is assumed to be <see cref="F:Northwoods.Go.GoStrokeStyle.Bezier"/>.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoLink.IsSelfLoop">
            <summary>
            Return true when both ports are the same.
            </summary>
            <value>
            By default this is true when both ports are the same and non-null.
            </value>
            <remarks>
            This is used by <see cref="M:Northwoods.Go.GoLink.CalculateStroke"/> and <see cref="P:Northwoods.Go.GoLink.Style"/>.
            When this property is true, the link is drawn as a Bezier style
            stroke in a loop.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoLink.AdjustingStyle">
            <summary>
            Gets or sets how <see cref="M:Northwoods.Go.GoLink.CalculateStroke"/> behaves.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoLink.PartID">
            <summary>
            Gets or sets the unique ID of this part within its document.
            </summary>
            <value>
            The value is invalid unless this object is part of a <see cref="T:Northwoods.Go.GoDocument"/>
            whose <see cref="P:Northwoods.Go.GoDocument.MaintainsPartID"/> property is true.
            Setting this property should be done only by <see cref="T:Northwoods.Go.GoDocument"/>
            when this object is added to the document.
            </value>
        </member>
        <member name="T:Northwoods.Go.GoListGroup">
            <summary>
            This group arranges its children vertically, aligned within the rectangular bounds,
            optionally spaced with lines drawn between the objects, bordered, and with a background.
            </summary>
            <remarks>
            As with any other group, adding a child to this group does not change its selectability.
            You will need to decide whether the user can select individual items in the list of
            objects.  If an item is selectable, it probably should not be resizable and should
            have its DragsNode property set to true.
            </remarks>
        </member>
        <member name="F:Northwoods.Go.GoListGroup.ChangedSpacing">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoListGroup.ChangedAlignment">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoListGroup.ChangedLinePen">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoListGroup.ChangedBorderPen">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoListGroup.ChangedBrush">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoListGroup.ChangedCorner">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoListGroup.ChangedTopLeftMargin">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoListGroup.ChangedBottomRightMargin">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoListGroup.#ctor">
            <summary>
            Construct an empty GoListGroup.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoListGroup.CopyChildren(Northwoods.Go.GoGroup,Northwoods.Go.GoCopyDictionary)">
            <summary>
            Perform some internal bookkeeping in addition to copying each of the items.
            </summary>
            <param name="newgroup"></param>
            <param name="env"></param>
        </member>
        <member name="M:Northwoods.Go.GoListGroup.ComputeBounds">
            <summary>
            The width of this group is just the maximum width of all of the children,
            and the height is the sum of the heights of the items, incremented by the
            <see cref="P:Northwoods.Go.GoListGroup.Spacing"/> property between the items.
            </summary>
            <returns>
            a <c>RectangleF</c> describing the actual size and position
            of the whole group in document coordinates
            </returns>
        </member>
        <member name="M:Northwoods.Go.GoListGroup.LayoutChildren(Northwoods.Go.GoObject)">
            <summary>
            Position each child starting at the top, according to the alignment,
            leaving space according to the spacing and drawn lines.
            </summary>
            <param name="childchanged">the child object that was moved or resized</param>
            <remarks>
            The first child is drawn at the top (smallest Y coordinate); the last
            one is at the bottom (largest Y coordinate).
            The actual amount of space between items is the larger of the <see cref="P:Northwoods.Go.GoListGroup.Spacing"/>
            value and the width of the <see cref="P:Northwoods.Go.GoListGroup.LinePen"/>.
            The actual positioning of each child item is performed by a call
            to <see cref="M:Northwoods.Go.GoListGroup.LayoutItem(System.Int32,System.Drawing.RectangleF)"/>.
            When <see cref="P:Northwoods.Go.GoObject.Initializing"/> is true, this method does nothing.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoListGroup.LayoutItem(System.Int32,System.Drawing.RectangleF)">
            <summary>
            Position a child item, within a delimiting rectangle.
            </summary>
            <param name="i">the index in the group of the child object to be positioned</param>
            <param name="cell">
            a <c>RectangleF</c> delimiting where the item should be placed;
            the width and height denote how much room remains in the whole group for all
            of the child items to be placed.
            </param>
            <returns>the maximum Y coordinate so far, including the just positioned item</returns>
        </member>
        <member name="M:Northwoods.Go.GoListGroup.Paint(System.Drawing.Graphics,Northwoods.Go.GoView)">
            <summary>
            In addition to painting all of the children, this method also
            draws lines using <see cref="P:Northwoods.Go.GoListGroup.LinePen"/> between each child and
            <see cref="P:Northwoods.Go.GoListGroup.BorderPen"/> around them all.
            </summary>
            <param name="g"></param>
            <param name="view"></param>
        </member>
        <member name="M:Northwoods.Go.GoListGroup.PaintDecoration(System.Drawing.Graphics,Northwoods.Go.GoView)">
            <summary>
            Paint a shadow, filled border, and separator lines.
            </summary>
            <param name="g"></param>
            <param name="view"></param>
        </member>
        <member name="M:Northwoods.Go.GoListGroup.ChangeValue(Northwoods.Go.GoChangedEventArgs,System.Boolean)">
            <summary>
            Perform changes to the spacing, alignment, and pen.
            </summary>
            <param name="e"></param>
            <param name="undo"></param>
        </member>
        <member name="P:Northwoods.Go.GoListGroup.Bounds">
            <summary>
            Whenever the size and/or position is changed, we need to recalculate the
            corners.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoListGroup.Spacing">
            <summary>
            Gets or sets how much space there should be between items.
            </summary>
            <value>
            This specifies the vertical distance between items in document coordinates.
            By default this value is <c>0</c>, so that the items just touch each other.
            </value>
        </member>
        <member name="P:Northwoods.Go.GoListGroup.Alignment">
            <summary>
            Gets or sets where each item should be drawn if it is narrower than the width
            of the whole group.
            </summary>
            <value>
            This defaults to <see cref="F:Northwoods.Go.GoObject.MiddleLeft"/>, i.e., left-aligned.
            </value>
        </member>
        <member name="P:Northwoods.Go.GoListGroup.LinePen">
            <summary>
            Gets or sets the <c>Pen</c> used to draw lines separating the items.
            </summary>
            <value>
            You must not modify the pen after you have assigned it.
            If this value is null, no lines will be drawn.
            By default this value is null.
            </value>
        </member>
        <member name="P:Northwoods.Go.GoListGroup.BorderPen">
            <summary>
            Gets or sets the pen used to draw a rectangular outline just inside the
            edges of this node.
            </summary>
            <value>
            You must not modify the pen after you have assigned it.
            The <c>Pen</c> value may be null, in which case no outline is drawn.
            This value defaults to null.
            </value>
        </member>
        <member name="P:Northwoods.Go.GoListGroup.Brush">
            <summary>
            Gets or sets the brush used to fill this group as a background.
            </summary>
            <value>
            The <c>Brush</c> value may be null, in which case no background is drawn.
            This value defaults to null.
            </value>
            <remarks>
            You must not modify the brush after you have assigned it.
            It is common to use the predefined brushes that are members of the
            <c>Brushes</c> class.
            Currently serialization is limited to standard solid, hatch,
            and texture brushes.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoListGroup.Corner">
            <summary>
            Gets or sets the maximum radial width and height of each corner.
            </summary>
            <value>
            The default value is 0x0.  Both the width and the height must be
            non-negative; only when both are positive will there be arcs at each corner.
            </value>
        </member>
        <member name="P:Northwoods.Go.GoListGroup.TopLeftMargin">
            <summary>
            Gets or sets the space between the top and left sides of the text label
            with the top and left sides of the border.
            </summary>
            <value>
            The width and height must not be negative.
            </value>
        </member>
        <member name="P:Northwoods.Go.GoListGroup.BottomRightMargin">
            <summary>
            Gets or sets the space between the bottom and right sides of the text label
            with the bottom and right sides of the border.
            </summary>
            <value>
            The width and height must not be negative.
            </value>
        </member>
        <member name="T:Northwoods.Go.GoMultiTextNode">
            <summary>
            The GoMultiTextNode class displays a number of text objects vertically
            using a GoListGroup, and associates ports on each side of each text object,
            plus a port at the top and one at the bottom of the node.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoMultiTextNode.InsertedLeftPort">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoMultiTextNode.InsertedRightPort">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoMultiTextNode.RemovedLeftPort">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoMultiTextNode.RemovedRightPort">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoMultiTextNode.ReplacedPort">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoMultiTextNode.ChangedTopPort">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoMultiTextNode.ChangedBottomPort">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoMultiTextNode.ChangedItemWidth">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoMultiTextNode.#ctor">
            <summary>
            Create an empty-lookng node, containing no items and only the top and bottom ports.
            </summary>
            <remarks>
            The <see cref="P:Northwoods.Go.GoMultiTextNode.LinePen"/> and <see cref="P:Northwoods.Go.GoMultiTextNode.BorderPen"/> properties default to black pens.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoMultiTextNode.CopyChildren(Northwoods.Go.GoGroup,Northwoods.Go.GoCopyDictionary)">
            <summary>
            Copy the <see cref="P:Northwoods.Go.GoMultiTextNode.ListGroup"/> and all of the ports.
            </summary>
            <param name="newgroup"></param>
            <param name="env"></param>
        </member>
        <member name="M:Northwoods.Go.GoMultiTextNode.CreateEndPort(System.Boolean)">
            <summary>
            Create the top or bottom port for this node.
            </summary>
            <param name="top"></param>
            <returns></returns>
            <example>
            If you override this method, you may want the definition to do
            some of the things that the standard definition does:
            <code>
             public virtual GoObject CreateEndPort(bool top) {
               GoPort p = new GoPort();
               p.Size = new SizeF(5, 3);
               p.Style = GoPortStyle.None;
               if (top) {
                 p.FromSpot = MiddleTop;
                 p.ToSpot = MiddleTop;
               } else {
                 p.FromSpot = MiddleBottom;
                 p.ToSpot = MiddleBottom;
               }
               return p;
             }
            </code>
            </example>
        </member>
        <member name="M:Northwoods.Go.GoMultiTextNode.CreatePort(System.Boolean,System.Int32)">
            <summary>
            Create and initialize a port that may go on either the left side or the right side.
            </summary>
            <param name="left"></param>
            <param name="idx"></param>
            <returns>by default, a <see cref="T:Northwoods.Go.GoPort"/></returns>
            <remarks>
            </remarks>
            <example>
            If you override this method, you may want the definition to do
            some of the things that the standard definition does:
            <code>
             public virtual GoObject CreatePort(bool left, int idx) {
               GoPort p = new GoPort();
               p.Size = new SizeF(3, 5);
               p.Style = GoPortStyle.None;
               if (left) {
                 p.FromSpot = MiddleLeft;
                 p.ToSpot = MiddleLeft;
               } else {
                 p.FromSpot = MiddleRight;
                 p.ToSpot = MiddleRight;
               }
               return p;
             }
            </code>
            </example>
        </member>
        <member name="M:Northwoods.Go.GoMultiTextNode.CreateText(System.String,System.Int32)">
            <summary>
            Create and initialize a text item given a string.
            </summary>
            <param name="s"></param>
            <param name="idx"></param>
            <returns></returns>
            <example>
            If you override this method, you may want the definition to do
            some of the things that the standard definition does:
            <code>
             public virtual GoText CreateText(String s, int idx) {
               GoText t = new GoText();
               t.Selectable = false;
               t.Alignment = GoObject.Middle;
               t.Multiline = true;
               t.BackgroundOpaqueWhenSelected = true;
               t.BackgroundColor = Color.LightBlue;
               t.DragsNode = true;
               t.Text = s;
               t.Wrapping = true;
               if (this.ItemWidth > 0) {
                 t.WrappingWidth = this.ItemWidth;
                 t.Width = this.ItemWidth;
               }
               return t;
             }
            </code>
            </example>
        </member>
        <member name="M:Northwoods.Go.GoMultiTextNode.LayoutChildren(Northwoods.Go.GoObject)">
            <summary>
            Position all of the left and right port objects at the sides of each of the items.
            </summary>
            <param name="childchanged"></param>
            <remarks>
            When <see cref="P:Northwoods.Go.GoObject.Initializing"/> is true, this method does nothing.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoMultiTextNode.Pick(Northwoods.Go.PointF,System.Boolean)">
            <summary>
            This override supports picking of this node at all points within the bounding
            rectangle, not just where there are objects.
            </summary>
            <param name="p"></param>
            <param name="selectableOnly"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.GoMultiTextNode.GetString(System.Int32)">
            <summary>
            This convenience method gets the string associated with a given item in the list.
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.GoMultiTextNode.SetString(System.Int32,System.String)">
            <summary>
            This convenience method sets the string associated with a given item in the list.
            </summary>
            <param name="i"></param>
            <param name="s"></param>
        </member>
        <member name="M:Northwoods.Go.GoMultiTextNode.AddString(System.String)">
            <summary>
            This convenience method adds an item containing a string to the end of the list.
            </summary>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.GoMultiTextNode.InsertString(System.Int32,System.String)">
            <summary>
            This convenience method inserts an item containing a string into the list.
            </summary>
            <param name="i"></param>
            <param name="s"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.GoMultiTextNode.GetItem(System.Int32)">
            <summary>
            Gets the item object at a particular index.
            </summary>
            <param name="i"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.GoMultiTextNode.SetItem(System.Int32,Northwoods.Go.GoObject)">
            <summary>
            Replaces an item object at a particular index.
            </summary>
            <param name="i"></param>
            <param name="obj"></param>
        </member>
        <member name="M:Northwoods.Go.GoMultiTextNode.AddItem(Northwoods.Go.GoObject,Northwoods.Go.GoObject,Northwoods.Go.GoObject)">
            <summary>
            Add an item and associated objects at a particular index.
            </summary>
            <param name="item"></param>
            <param name="leftport"></param>
            <param name="rightport"></param>
        </member>
        <member name="M:Northwoods.Go.GoMultiTextNode.InsertItem(System.Int32,Northwoods.Go.GoObject,Northwoods.Go.GoObject,Northwoods.Go.GoObject)">
            <summary>
            Insert an item and its ports to be at a particular position in the list.
            </summary>
            <param name="i"></param>
            <param name="item"></param>
            <param name="leftport"></param>
            <param name="rightport"></param>
        </member>
        <member name="M:Northwoods.Go.GoMultiTextNode.RemoveItem(System.Int32)">
            <summary>
            Remove the item and its ports that are at a given index.
            </summary>
            <param name="i"></param>
        </member>
        <member name="M:Northwoods.Go.GoMultiTextNode.GetLeftPort(System.Int32)">
            <summary>
            Return a port by its index position on the left side of this node.
            </summary>
            <param name="i">a zero-based, non-negative index</param>
            <returns>null if <paramref name="i"/> is greater than or equal to <see cref="P:Northwoods.Go.GoMultiTextNode.ItemCount"/></returns>
        </member>
        <member name="M:Northwoods.Go.GoMultiTextNode.GetRightPort(System.Int32)">
            <summary>
            Return a port by its index position on the right side of this node.
            </summary>
            <param name="i">a zero-based, non-negative index</param>
            <returns>null if <paramref name="i"/> is greater than or equal to <see cref="P:Northwoods.Go.GoMultiTextNode.ItemCount"/></returns>
        </member>
        <member name="M:Northwoods.Go.GoMultiTextNode.SetLeftPort(System.Int32,Northwoods.Go.GoObject)">
            <summary>
            Replace the port at a particular index position on the
            left side of this node.
            </summary>
            <param name="i">a zero-based non-negative index</param>
            <param name="p"></param>
        </member>
        <member name="M:Northwoods.Go.GoMultiTextNode.SetRightPort(System.Int32,Northwoods.Go.GoObject)">
            <summary>
            Replace the port at a particular index position on the
            right side of this node.
            </summary>
            <param name="i">a zero-based non-negative index</param>
            <param name="p"></param>
        </member>
        <member name="M:Northwoods.Go.GoMultiTextNode.Remove(Northwoods.Go.GoObject)">
            <summary>
            When a port is removed, make sure we remove any reference to it.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Northwoods.Go.GoMultiTextNode.ChangeValue(Northwoods.Go.GoChangedEventArgs,System.Boolean)">
            <summary>
            Handle this class's property changes for undo and redo
            </summary>
            <param name="e"></param>
            <param name="undo"></param>
        </member>
        <member name="P:Northwoods.Go.GoMultiTextNode.ItemCount">
            <summary>
            Gets the number of items in the list.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoMultiTextNode.TopPort">
            <summary>
            Gets or sets the object, normally a port, that is located at the middle
            top spot of the node.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoMultiTextNode.BottomPort">
            <summary>
            Gets or sets the object, normally a port, that is located at the middle
            bottom spot of the node.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoMultiTextNode.ItemWidth">
            <summary>
            Gets or sets the standard width for all items, and the wrapping width for all <see cref="T:Northwoods.Go.GoText"/> items.
            </summary>
            <value>
            Setting this to a positive value will set the <see cref="P:Northwoods.Go.GoText.WrappingWidth"/>
            of each <see cref="T:Northwoods.Go.GoText"/> child item, as well as the <see cref="P:Northwoods.Go.GoObject.Width"/>
            of all the child items.
            A non-positive value does not change either <see cref="P:Northwoods.Go.GoObject.Width"/> or
            <see cref="P:Northwoods.Go.GoText.WrappingWidth"/>.
            </value>
        </member>
        <member name="P:Northwoods.Go.GoMultiTextNode.ListGroup">
            <summary>
            Get the <see cref="T:Northwoods.Go.GoListGroup"/> actually holding all of the items and painting
            its separator lines, borders, and background brush.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoMultiTextNode.Shadowed">
            <summary>
            Gets or sets the <see cref="P:Northwoods.Go.GoMultiTextNode.ListGroup"/>'s <see cref="P:Northwoods.Go.GoObject.Shadowed"/> property.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoMultiTextNode.Spacing">
            <summary>
            Gets or sets the <see cref="P:Northwoods.Go.GoMultiTextNode.ListGroup"/>'s <see cref="P:Northwoods.Go.GoListGroup.Spacing"/> property.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoMultiTextNode.Alignment">
            <summary>
            Gets or sets the <see cref="P:Northwoods.Go.GoMultiTextNode.ListGroup"/>'s <see cref="P:Northwoods.Go.GoListGroup.Alignment"/> property.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoMultiTextNode.LinePen">
            <summary>
            Gets or sets the <see cref="P:Northwoods.Go.GoMultiTextNode.ListGroup"/>'s <see cref="P:Northwoods.Go.GoListGroup.LinePen"/> property.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoMultiTextNode.BorderPen">
            <summary>
            Gets or sets the <see cref="P:Northwoods.Go.GoMultiTextNode.ListGroup"/>'s <see cref="P:Northwoods.Go.GoListGroup.BorderPen"/> property.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoMultiTextNode.Brush">
            <summary>
            Gets or sets the <see cref="P:Northwoods.Go.GoMultiTextNode.ListGroup"/>'s <see cref="P:Northwoods.Go.GoListGroup.Brush"/> property.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoMultiTextNode.Corner">
            <summary>
            Gets or sets the <see cref="P:Northwoods.Go.GoMultiTextNode.ListGroup"/>'s <see cref="P:Northwoods.Go.GoListGroup.Corner"/> property.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoMultiTextNode.TopLeftMargin">
            <summary>
            Gets or sets the <see cref="P:Northwoods.Go.GoMultiTextNode.ListGroup"/>'s <see cref="P:Northwoods.Go.GoListGroup.TopLeftMargin"/> property.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoMultiTextNode.BottomRightMargin">
            <summary>
            Gets or sets the <see cref="P:Northwoods.Go.GoMultiTextNode.ListGroup"/>'s <see cref="P:Northwoods.Go.GoListGroup.BottomRightMargin"/> property.
            </summary>
        </member>
        <member name="T:Northwoods.Go.GoNodeLinkEnumerator">
            <summary>
            Iterate over the links (or a subset of the links) connected to this node.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoNodeLinkEnumerator.GetEnumerator">
            <summary>
            Gets an enumerator for iterating over the IGoLinks connected to this node.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoNodeLinkEnumerator.MoveNext">
            <summary>
            Advance the enumerator to the next IGoLink.
            </summary>
            <returns>True if there is a next IGoLink; false if it has finished iterating over the collection.</returns>
        </member>
        <member name="M:Northwoods.Go.GoNodeLinkEnumerator.Reset">
            <summary>
            Reset the enumerator to its original position.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoNodeLinkEnumerator.Current">
            <summary>
             Gets the current link in the collection of links connected to this node.
            </summary>
        </member>
        <member name="T:Northwoods.Go.GoNodeNodeEnumerator">
            <summary>
            Iterate over the nodes (or a subset of the nodes) connected to this node.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoNodeNodeEnumerator.GetEnumerator">
            <summary>
            Gets an enumerator for iterating over the IGoNodes connected to this node.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoNodeNodeEnumerator.MoveNext">
            <summary>
            Advance the enumerator to the next IGoNode.
            </summary>
            <returns>True if there is a next IGoNode; false if it has finished iterating over the collection.</returns>
        </member>
        <member name="M:Northwoods.Go.GoNodeNodeEnumerator.Reset">
            <summary>
            Reset the enumerator to its original position.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoNodeNodeEnumerator.Current">
            <summary>
             Gets the current node in the collection of connected nodes.
            </summary>
        </member>
        <member name="T:Northwoods.Go.GoNodePortEnumerator">
            <summary>
            Iterate over the ports (or a subset of the ports) that are a part of this node.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoNodePortEnumerator.GetEnumerator">
            <summary>
            Gets an enumerator for iterating over the IGoPorts that are part of this node.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoNodePortEnumerator.MoveNext">
            <summary>
            Advance the enumerator to the next IGoPort.
            </summary>
            <returns>True if there is a next IGoPort; false if it has finished iterating over the collection.</returns>
        </member>
        <member name="M:Northwoods.Go.GoNodePortEnumerator.Reset">
            <summary>
            Reset the enumerator to its original position.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoNodePortEnumerator.Current">
            <summary>
             Gets the current port in the collection of ports that are part of this node.
            </summary>
        </member>
        <member name="T:Northwoods.Go.GoNodeIcon">
            <summary>
            A <see cref="T:Northwoods.Go.GoImage"/> whose <see cref="P:Northwoods.Go.GoObject.Bounds"/> and resizing
            are constrained by its parent's implementation of <see cref="T:Northwoods.Go.IGoNodeIconConstraint"/>.
            </summary>
            <remarks>
            This class also implements <see cref="T:Northwoods.Go.IGoNodeIconConstraint"/> by providing
            settable properties <see cref="P:Northwoods.Go.GoNodeIcon.MinimumIconSize"/> and <see cref="P:Northwoods.Go.GoNodeIcon.MaximumIconSize"/>.
            </remarks>
        </member>
        <member name="F:Northwoods.Go.GoNodeIcon.ChangedMinimumIconSize">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoNodeIcon.ChangedMaximumIconSize">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoNodeIcon.#ctor">
            <summary>
            Create an unselectable <see cref="T:Northwoods.Go.GoImage"/> whose size is
            constrained when you set the <see cref="P:Northwoods.Go.GoNodeIcon.Constraint"/> property.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoNodeIcon.DoResize(Northwoods.Go.GoView,System.Drawing.RectangleF,Northwoods.Go.PointF,System.Int32,Northwoods.Go.GoInputState,System.Drawing.SizeF,System.Drawing.SizeF)">
            <summary>
            Prevent user resizing of this image beyond the <see cref="P:Northwoods.Go.GoNodeIcon.MinimumIconSize"/>
            and <see cref="P:Northwoods.Go.GoNodeIcon.MaximumIconSize"/>.
            </summary>
            <param name="view"></param>
            <param name="origRect"></param>
            <param name="newPoint"></param>
            <param name="whichHandle"></param>
            <param name="evttype"></param>
            <param name="min"></param>
            <param name="max"></param>
        </member>
        <member name="M:Northwoods.Go.GoNodeIcon.ChangeValue(Northwoods.Go.GoChangedEventArgs,System.Boolean)">
            <summary>
            Handle this class's property changes for undo and redo
            </summary>
            <param name="e"></param>
            <param name="undo"></param>
        </member>
        <member name="P:Northwoods.Go.GoNodeIcon.Constraint">
            <summary>
            Gets the object that implements the
            <see cref="P:Northwoods.Go.IGoNodeIconConstraint.MinimumIconSize"/> and
            <see cref="P:Northwoods.Go.IGoNodeIconConstraint.MaximumIconSize"/> methods.
            </summary>
            <remarks>
            This returns the <see cref="P:Northwoods.Go.GoObject.Parent"/> if it implements
            <see cref="T:Northwoods.Go.IGoNodeIconConstraint"/>; otherwise this returns itself.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoNodeIcon.MinimumIconSize">
            <summary>
            Gets or sets the minimum size for this image.
            </summary>
            <remarks>
            By default this imposes a minimum of 1x1 on the size.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoNodeIcon.MaximumIconSize">
            <summary>
            Gets or sets the maximum size for this image.
            </summary>
            <remarks>
            By default this imposes a maximum of 9999x9999 on the size.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoNodeIcon.Bounds">
            <summary>
            Force the size of this image to always be within the <see cref="P:Northwoods.Go.GoNodeIcon.MinimumIconSize"/>
            and <see cref="P:Northwoods.Go.GoNodeIcon.MaximumIconSize"/>.
            </summary>
        </member>
        <member name="T:Northwoods.Go.GoPortStyle">
            <summary>
            Specifies the appearance of the port.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoPortStyle.None">
            <summary>
            The <see cref="T:Northwoods.Go.GoPort"/> does not appear, although it may have visible
            links connected and may participate in linking operations.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoPortStyle.Object">
            <summary>
            The <see cref="T:Northwoods.Go.GoPort"/> appears as any <see cref="T:Northwoods.Go.GoObject"/>, as
            provided by the <see cref="P:Northwoods.Go.GoPort.PortObject"/> property.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoPortStyle.Ellipse">
            <summary>
            The <see cref="T:Northwoods.Go.GoPort"/> appears as an ellipse or circle.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoPortStyle.Triangle">
            <summary>
            The <see cref="T:Northwoods.Go.GoPort"/> appears as a triangle, forming an arrow
            in the direction of a link coming in at this port's <see cref="P:Northwoods.Go.GoPort.ToSpot"/>.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoPortStyle.Rectangle">
            <summary>
            The <see cref="T:Northwoods.Go.GoPort"/> appears as a rectangle or square.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoPortStyle.Diamond">
            <summary>
            The <see cref="T:Northwoods.Go.GoPort"/> appears as a diamond or rhombus.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoPortStyle.Plus">
            <summary>
            The <see cref="T:Northwoods.Go.GoPort"/> appears as a plus sign or "+".
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoPortStyle.Times">
            <summary>
            The <see cref="T:Northwoods.Go.GoPort"/> appears as a times sign or "x".
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoPortStyle.PlusTimes">
            <summary>
            The <see cref="T:Northwoods.Go.GoPort"/> appears as a combination of a plus sign and a times sign, like an asterisk or star.
            </summary>
        </member>
        <member name="T:Northwoods.Go.GoPortLinkEnumerator">
            <summary>
            Iterate over all the links connected to this port.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoPortLinkEnumerator.GetEnumerator">
            <summary>
            Gets an enumerator for iterating over the IGoLinks connected to this port.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoPortLinkEnumerator.MoveNext">
            <summary>
            Advance the enumerator to the next IGoLink.
            </summary>
            <returns>True if there is a next IGoLink; false if it has finished iterating over the collection.</returns>
        </member>
        <member name="M:Northwoods.Go.GoPortLinkEnumerator.Reset">
            <summary>
            Reset the enumerator to its original position.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoPortLinkEnumerator.Current">
            <summary>
             Gets the current link in the collection of link connected at this port.
            </summary>
        </member>
        <member name="T:Northwoods.Go.GoPortFilteredLinkEnumerator">
            <summary>
            Iterate over a subset of the links connected to this port,
            those either coming into this port or those leaving this port.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoPortFilteredLinkEnumerator.GetEnumerator">
            <summary>
            Gets an enumerator for iterating over the IGoLinks connected to this port.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoPortFilteredLinkEnumerator.MoveNext">
            <summary>
            Advance the enumerator to the next IGoLink.
            </summary>
            <returns>True if there is a next IGoLink; false if it has finished iterating over the collection.</returns>
        </member>
        <member name="M:Northwoods.Go.GoPortFilteredLinkEnumerator.Reset">
            <summary>
            Reset the enumerator to its original position.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoPortFilteredLinkEnumerator.Current">
            <summary>
             Gets the current port in the collection of links connected at this port.
            </summary>
        </member>
        <member name="T:Northwoods.Go.GoSimpleNode">
            <summary>
            A node with a resizable icon, a label, and a port on each side.
            </summary>
            <remarks>
            Setting the <see cref="P:Northwoods.Go.GoNode.Location"/>, <see cref="P:Northwoods.Go.GoNode.Resizable"/>,
            <see cref="P:Northwoods.Go.GoNode.Reshapable"/> and <see cref="P:Northwoods.Go.GoNode.Shadowed"/>
            properties actually set the same properties on the
            <see cref="P:Northwoods.Go.GoSimpleNode.SelectionObject"/>, which is the <see cref="P:Northwoods.Go.GoSimpleNode.Icon"/>.
            </remarks>
        </member>
        <member name="F:Northwoods.Go.GoSimpleNode.ChangedText">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoSimpleNode.ChangedIcon">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoSimpleNode.ChangedLabel">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoSimpleNode.ChangedInPort">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoSimpleNode.ChangedOutPort">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoSimpleNode.ChangedOrientation">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoSimpleNode.#ctor">
            <summary>
            Create an empty GoSimpleNode--call <see cref="M:Northwoods.Go.GoSimpleNode.Initialize(System.Resources.ResourceManager,System.String,System.String)"/> to
            create an icon, a label, and ports.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoSimpleNode.Initialize(System.Resources.ResourceManager,System.String,System.String)">
            <summary>
            Initialize an empty GoSimpleNode to have an icon, a label, and two ports.
            </summary>
            <param name="res">
            Provides the <c>ResourceManager</c> holding an <c>Image</c> resource named by
            <paramref name="iconname"/>.  If this parameter is null,
            <see cref="P:Northwoods.Go.GoImage.DefaultResourceManager"/> is used instead.
            </param>
            <param name="iconname">
            The name of the <c>Image</c> resource in the <c>ResourceManager</c>
            given by <paramref name="res"/>, or else a file name if no resource manager
            can be used (i.e., when both <paramref name="res"/> is null and
            <see cref="P:Northwoods.Go.GoImage.DefaultResourceManager"/> is null).
            </param>
            <param name="name">
            The initial string value for the <see cref="P:Northwoods.Go.GoSimpleNode.Label"/>.
            If this value is null, no label is created for this node.
            </param>
        </member>
        <member name="M:Northwoods.Go.GoSimpleNode.Initialize(System.Windows.Forms.ImageList,System.Int32,System.String)">
            <summary>
            Initialize an empty GoSimpleNode to have an icon, a label, and two ports.
            </summary>
            <param name="imglist">
            Provide the <c>ImageList</c> whose <paramref name="imgindex"/> specifies
            the actual image to use for the icon.  If this is null, the
            <see cref="P:Northwoods.Go.GoView.ImageList"/> property is used by <see cref="M:Northwoods.Go.GoImage.Paint(System.Drawing.Graphics,Northwoods.Go.GoView)"/>.
            </param>
            <param name="imgindex">
            The zero-based index of the <c>Image</c> contained in an <c>ImageList</c>,
            given either by <paramref name="imglist"/> or by <see cref="P:Northwoods.Go.GoView.ImageList"/>.
            </param>
            <param name="name">
            The initial string value for the <see cref="P:Northwoods.Go.GoSimpleNode.Label"/>.
            If this value is null, no label is created for this node.
            </param>
        </member>
        <member name="M:Northwoods.Go.GoSimpleNode.CreateIcon(System.Resources.ResourceManager,System.String)">
            <summary>
            Create and initialize an image to act as the node's icon.
            </summary>
            <param name="res"></param>
            <param name="iconname"></param>
            <returns>
            a <see cref="T:Northwoods.Go.GoNodeIcon"/> that obeys this node's <see cref="P:Northwoods.Go.GoSimpleNode.MinimumIconSize"/>
            and <see cref="P:Northwoods.Go.GoSimpleNode.MaximumIconSize"/> properties
            </returns>
            <example>
            If you override this method, you may want the definition to do
            some of the things that the standard definition does:
            <code>
             protected virtual GoObject CreateIcon(ResourceManager res, String iconname) {
               GoNodeIcon ni = new GoNodeIcon();
               if (res != null)
                 ni.ResourceManager = res;
               ni.Name = iconname;
               ni.MinimumIconSize = new SizeF(20, 20);
               ni.MaximumIconSize = new SizeF(100, 200);
               ni.Size = ni.MinimumIconSize;
               return ni;
             }
            </code>
            </example>
        </member>
        <member name="M:Northwoods.Go.GoSimpleNode.CreateIcon(System.Windows.Forms.ImageList,System.Int32)">
            <summary>
            Create and initialize an image to act as the node's icon.
            </summary>
            <param name="imglist"></param>
            <param name="imgindex"></param>
            <returns>
            a <see cref="T:Northwoods.Go.GoNodeIcon"/> that obeys this node's <see cref="P:Northwoods.Go.GoSimpleNode.MinimumIconSize"/>
            and <see cref="P:Northwoods.Go.GoSimpleNode.MaximumIconSize"/> properties
            </returns>
            <example>
            If you override this method, you may want the definition to do
            some of the things that the standard definition does:
            <code>
             protected virtual GoObject CreateIcon(ResourceManager res, String iconname) {
               GoNodeIcon ni = new GoNodeIcon();
               ni.ImageList = imglist;
               ni.Index = imgindex;
               ni.MinimumIconSize = new SizeF(20, 20);
               ni.MaximumIconSize = new SizeF(100, 200);
               ni.Size = ni.MinimumIconSize;
               return ni;
             }
            </code>
            </example>
        </member>
        <member name="M:Northwoods.Go.GoSimpleNode.CreateLabel(System.String)">
            <summary>
            Create and initialize a text label.
            </summary>
            <param name="name"></param>
            <returns>a non-editable, non-selectable, middle-aligned, non-rescaling <see cref="T:Northwoods.Go.GoText"/> object</returns>
            <example>
            If you override this method, you may want the definition to do
            some of the things that the standard definition does:
            <code>
             protected virtual GoText CreateLabel(String name) {
               GoText l = null;
               if (name != null) {
                 l = new GoText();
                 l.Text = name;
                 l.Selectable = false;
                 l.Alignment = Middle;
               }
               return l;
             }
            </code>
            </example>
        </member>
        <member name="M:Northwoods.Go.GoSimpleNode.CreatePort(System.Boolean)">
            <summary>
            Create and initialize a port to be either on the left or on the right of this node.
            </summary>
            <param name="input"></param>
            <returns>a <see cref="T:Northwoods.Go.GoPort"/></returns>
            <remarks>
            You may want to override this to return null when you don't want a port
            on a particular side.
            </remarks>
            <example>
            If you override this method, you may want the definition to do
            some of the things that the standard definition does:
            <code>
             protected virtual GoPort CreatePort(bool input) {
               GoPort p = new GoPort();
               p.Size = new SizeF(6, 6);
               p.IsValidFrom = !input;
               p.IsValidTo = input;
               return p;
             }
            </code>
            </example>
        </member>
        <member name="M:Northwoods.Go.GoSimpleNode.CopyChildren(Northwoods.Go.GoGroup,Northwoods.Go.GoCopyDictionary)">
            <summary>
            Make copies of the icon, label and two ports.
            </summary>
            <param name="newgroup"></param>
            <param name="env"></param>
            <remarks>
            Remember to override this to copy any objects you add to this class.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoSimpleNode.LayoutChildren(Northwoods.Go.GoObject)">
            <summary>
            Position the label and two ports relative to the icon.
            </summary>
            <param name="childchanged"></param>
            <remarks>
            When <see cref="P:Northwoods.Go.GoObject.Initializing"/> is true, this method does nothing.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoSimpleNode.Remove(Northwoods.Go.GoObject)">
            <summary>
            If any part is removed from this group,
            be sure to remove any references in local fields.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Northwoods.Go.GoSimpleNode.OnOrientationChanged(System.Windows.Forms.Orientation)">
            <summary>
            Determine how to change the whole node when the <see cref="P:Northwoods.Go.GoSimpleNode.Orientation"/> changes.
            </summary>
            <param name="old">the former <see cref="P:Northwoods.Go.GoSimpleNode.Orientation"/> value</param>
            <remarks>
            A horizontal orientation has the ports positioned on the left and right of the
            node, with the source links coming into the <see cref="P:Northwoods.Go.GoSimpleNode.InPort"/> on the left and
            the destination links going out from the <see cref="P:Northwoods.Go.GoSimpleNode.OutPort"/> on the right.
            A vertical orientation has the <see cref="P:Northwoods.Go.GoSimpleNode.InPort"/> on top, so links come in
            at the top, and the <see cref="P:Northwoods.Go.GoSimpleNode.OutPort"/> is on the bottom of the node, so links
            go out from the bottom.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoSimpleNode.OnObservedChanged(Northwoods.Go.GoObject,System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)">
            <summary>
            When the label changes its text string, change this node's <see cref="P:Northwoods.Go.GoSimpleNode.Text"/> property too.
            </summary>
            <param name="observed"></param>
            <param name="subhint"></param>
            <param name="oldI"></param>
            <param name="oldVal"></param>
            <param name="oldRect"></param>
            <param name="newI"></param>
            <param name="newVal"></param>
            <param name="newRect"></param>
        </member>
        <member name="M:Northwoods.Go.GoSimpleNode.ChangeValue(Northwoods.Go.GoChangedEventArgs,System.Boolean)">
            <summary>
            Handle this class's property changes for undo and redo
            </summary>
            <param name="e"></param>
            <param name="undo"></param>
        </member>
        <member name="P:Northwoods.Go.GoSimpleNode.MinimumIconSize">
            <summary>
            Assume the minimum node size is 20x20.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoSimpleNode.MaximumIconSize">
            <summary>
            Assume the maximum node size is 100x200.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoSimpleNode.Icon">
            <summary>
            Gets the <see cref="T:Northwoods.Go.GoObject"/> acting as the icon for this node.
            </summary>
            <remarks>
            You might want to override the <see cref="M:Northwoods.Go.GoSimpleNode.CreateIcon(System.Resources.ResourceManager,System.String)"/> method(s)
            if you want to create a different kind of <see cref="T:Northwoods.Go.GoImage"/> when
            constructing this kind of node.
            The new shape will have its Center location,
            Selectable, Resizable, Reshapable, ResizesRealtime, and Shadowed
            properties copied from the old shape.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoSimpleNode.Image">
            <summary>
            Gets this node's icon, assuming it is a <see cref="T:Northwoods.Go.GoImage"/>, as it usually is.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoSimpleNode.Text">
            <summary>
            When this node's <see cref="P:Northwoods.Go.GoSimpleNode.Text"/> string changes,
            be sure to update the label's text.
            </summary>
            <remarks>
            This has a Text string that is normally the same as the Label's text string,
            but the Label might not exist or might show a different string.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoSimpleNode.Label">
            <summary>
            Gets or sets the <see cref="T:Northwoods.Go.GoText"/> label.
            </summary>
            <remarks>
            You might want to override the <see cref="M:Northwoods.Go.GoSimpleNode.CreateLabel(System.String)"/> method
            if you want to create a different kind of <see cref="T:Northwoods.Go.GoText"/> when
            constructing this kind of node.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoSimpleNode.InPort">
            <summary>
            Gets or sets the port on the left side of this node, normally acting as the "input".
            </summary>
            <remarks>
            You might want to override the <see cref="M:Northwoods.Go.GoSimpleNode.CreatePort(System.Boolean)"/> method
            if you want to create a different kind of <see cref="T:Northwoods.Go.GoPort"/> when
            constructing this kind of node.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoSimpleNode.OutPort">
            <summary>
            Gets the port on the right side of this node, normally acting as the "output".
            </summary>
            <remarks>
            You might want to override the <see cref="M:Northwoods.Go.GoSimpleNode.CreatePort(System.Boolean)"/> method
            if you want to create a different kind of <see cref="T:Northwoods.Go.GoPort"/> when
            constructing this kind of node.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoSimpleNode.Orientation">
            <summary>
            Gets or sets the general orientation of the node
            </summary>
            <value>
            This defaults to <c>Orientation.Horizontal</c>
            </value>
        </member>
        <member name="P:Northwoods.Go.GoSimpleNode.SelectionObject">
            <summary>
            The selection object, what the user sees as being selected and what the user
            actually resizes, is the icon.
            </summary>
        </member>
        <member name="T:Northwoods.Go.GoSubGraph">
            <summary>
            A GoSubGraph is a <see cref="T:Northwoods.Go.GoNode"/> that supports having a graph inside of it
            that the user can edit, and that the user can collapse and expand.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoSubGraph.ChangedExpanded">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoSubGraph.ChangedLabel">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoSubGraph.ChangedCollapsible">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoSubGraph.ChangedBackgroundColor">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoSubGraph.ChangedOpacity">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoSubGraph.ChangedLabelSpot">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoSubGraph.ChangedMargin">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoSubGraph.ChangedBorderPen">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoSubGraph.ChangedPickableBackground">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoSubGraph.#ctor">
            <summary>
            Create an empty subgraph, with an empty label.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoSubGraph.CreateLabel">
            <summary>
            This creates the initial text label--an editable, bold, single-line
            <see cref="T:Northwoods.Go.GoText"/> that wraps.
            </summary>
            <returns></returns>
            <example>
            If you override this method, you may want the definition to do
            some of the things that the standard definition does:
            <code>
             public virtual GoText CreateLabel() {
               GoText t = new GoText();
               t.Selectable = false;
               t.Alignment = MiddleBottom;
               t.Wrapping = true;
               t.Bold = true;
               t.Editable = true;
               return t;
             }
            </code>
            </example>
        </member>
        <member name="M:Northwoods.Go.GoSubGraph.CreateHandle">
            <summary>
            This method is called to create the "handle" representing the whole subgraph
            that the user can select to drag or click to collapse or expand the subgraph.
            </summary>
            <returns>a <see cref="T:Northwoods.Go.GoSubGraphHandle"/></returns>
            <example>
            If you override this method, you may want the definition to do
            some of the things that the standard definition does:
            <code>
             public virtual GoSubGraphHandle CreateHandle() {
               GoSubGraphHandle h = new GoSubGraphHandle();
               return h;
             }
            </code>
            </example>
        </member>
        <member name="M:Northwoods.Go.GoSubGraph.CopyChildren(Northwoods.Go.GoGroup,Northwoods.Go.GoCopyDictionary)">
            <summary>
            This override is needed to make sure the expanded position information
            is copied correctly when this subgraph is collapsed at the time of the copy.
            </summary>
            <param name="newgroup"></param>
            <param name="env"></param>
        </member>
        <member name="M:Northwoods.Go.GoSubGraph.Add(Northwoods.Go.GoObject)">
            <summary>
            This override of <see cref="M:Northwoods.Go.GoGroup.Add(Northwoods.Go.GoObject)"/> makes sure the <see cref="P:Northwoods.Go.GoSubGraph.Handle"/>
            stays on top.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Northwoods.Go.GoSubGraph.Remove(Northwoods.Go.GoObject)">
            <summary>
            If any part is removed from this group,
            be sure to remove any references in local fields.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Northwoods.Go.GoSubGraph.FindParentSubGraph(Northwoods.Go.GoObject)">
            <summary>
            This is a static/shared method that is convenient for finding if an object
            is part of a <see cref="T:Northwoods.Go.GoSubGraph"/>.
            </summary>
            <param name="obj"></param>
            <returns>the <see cref="T:Northwoods.Go.GoSubGraph"/> that <paramref name="obj"/> is part of,
            or null if it is not a child of a subgraph</returns>
        </member>
        <member name="M:Northwoods.Go.GoSubGraph.Paint(System.Drawing.Graphics,Northwoods.Go.GoView)">
            <summary>
            The background of the group is displayed with a <see cref="P:Northwoods.Go.GoSubGraph.BackgroundColor"/>
            and an <see cref="P:Northwoods.Go.GoSubGraph.Opacity"/>, to make it easier to tell which nodes are part
            of which subgraph.
            </summary>
            <param name="g"></param>
            <param name="view"></param>
            <remarks>
            When the <see cref="P:Northwoods.Go.GoSubGraph.Opacity"/> is zero, the background color is not painted at all.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoSubGraph.PaintDecoration(System.Drawing.Graphics,Northwoods.Go.GoView)">
            <summary>
            Paint the <see cref="P:Northwoods.Go.GoSubGraph.BackgroundColor"/> and <see cref="P:Northwoods.Go.GoSubGraph.BorderPen"/>.
            </summary>
            <param name="g"></param>
            <param name="view"></param>
            <remarks>
            This is called by <see cref="M:Northwoods.Go.GoSubGraph.Paint(System.Drawing.Graphics,Northwoods.Go.GoView)"/> before painting all of the child objects.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoSubGraph.Pick(Northwoods.Go.PointF,System.Boolean)">
            <summary>
            This subgraph is pickable in the normal manner, except when the <see cref="P:Northwoods.Go.GoSubGraph.PickableBackground"/>
            is true, picking in the background of this node will pick this node.
            </summary>
            <param name="p"></param>
            <param name="selectableOnly"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.GoSubGraph.ComputeBounds">
            <summary>
            Computing the bounds for this group ignores the <see cref="P:Northwoods.Go.GoSubGraph.Handle"/>
            and any invisible links, and adds room for a margin all around.
            </summary>
            <returns></returns>
            <remarks>
            This calls <see cref="M:Northwoods.Go.GoSubGraph.ComputeBoundsSkip(Northwoods.Go.GoObject)"/> on each child to see
            if it should be included in the bounding rectangle computation.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoSubGraph.ComputeBoundsSkip(Northwoods.Go.GoObject)">
            <summary>
            This method is called by <see cref="M:Northwoods.Go.GoSubGraph.ComputeBounds"/> to
            see if a given child of this group should be ignored.
            </summary>
            <param name="child"></param>
            <returns>
            false for most objects; true for special objects whose position
            depends on the bounds of all the other children or for those
            objects that should not affect the size of the subgraph.
            </returns>
            <remarks>
            Child objects such as the <see cref="P:Northwoods.Go.GoSubGraph.Handle"/> and
            links that are not visible should not be
            included in the computation of the <see cref="P:Northwoods.Go.GoObject.Bounds"/>,
            because they should always be positioned inside the bounding
            rectangle union of all the other children.
            Any override of this method to return true for additional
            objects should also override <see cref="M:Northwoods.Go.GoSubGraph.LayoutChildren(Northwoods.Go.GoObject)"/>
            to make sure those objects are laid out within the
            computed bounds.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoSubGraph.MoveChildren(System.Drawing.RectangleF)">
            <summary>
            This just moves all the children from the group's former location.
            </summary>
            <param name="prevRect">
            The original bounds, in document coordinates.
            </param>
            <remarks>
            This first moves all <see cref="T:Northwoods.Go.IGoLink"/>s, and then all the other child objects.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoSubGraph.RescaleChildren(System.Drawing.RectangleF)">
            <summary>
            This handles the general case of a resize by scaling and repositioning all the children.
            </summary>
            <param name="prevRect">
            The original bounds, in document coordinates.
            </param>
            <remarks>
            Any children whose <see cref="P:Northwoods.Go.GoObject.AutoRescales"/> property is false is not
            resized and repositioned.
            This first rescales all <see cref="T:Northwoods.Go.IGoLink"/>s, and then all the other child objects.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoSubGraph.LayoutChildren(Northwoods.Go.GoObject)">
            <summary>
            This method does not move any of the children except the
            <see cref="P:Northwoods.Go.GoSubGraph.Label"/> and the <see cref="P:Northwoods.Go.GoSubGraph.Handle"/>, and those only when
            this subgraph is <see cref="P:Northwoods.Go.GoSubGraph.IsExpanded"/>.
            </summary>
            <param name="childchanged"></param>
            <remarks>
            This calls <see cref="M:Northwoods.Go.GoSubGraph.LayoutLabel"/> and <see cref="M:Northwoods.Go.GoSubGraph.LayoutHandle"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoSubGraph.LayoutLabel">
            <summary>
            This positions the label within the group, according to the <see cref="P:Northwoods.Go.GoSubGraph.LabelSpot"/>.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoSubGraph.LayoutHandle">
            <summary>
            This positions the handle within the group.
            </summary>
            <remarks>
            By default this places the handle at the top left corner of the group.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoSubGraph.Collapse">
            <summary>
            Reposition all of the children so that this node takes a minimum amount of space.
            </summary>
            <remarks>
            This method will collapse any subgraphs, and then remember the size and
            relative position of all of the children (besides objects implementing
            <see cref="T:Northwoods.Go.IGoLink"/>) for a later call to <see cref="M:Northwoods.Go.GoSubGraph.Expand"/>.
            All of the children are made invisible and are moved to the center.
            This does nothing if this node is already collapsed or if <see cref="P:Northwoods.Go.GoSubGraph.Collapsible"/>
            is false.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoSubGraph.Expand">
            <summary>
            Restore the position of all of the children so that this subgraph is editable again.
            </summary>
            <remarks>
            The <see cref="M:Northwoods.Go.GoSubGraph.Collapse"/> call saved the original bounds of all of the non-link children.
            These saved relative positions and sizes are used to move all of the children back again,
            and making them all visible too.
            This does nothing if this node is already expanded or if <see cref="P:Northwoods.Go.GoSubGraph.Collapsible"/>
            is false.
            The stroke paths of links will be recalculated, and will thus not necessarily be
            the same as they were before collapsing this subgraph.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoSubGraph.Toggle">
            <summary>
            This convenience method calls either <see cref="M:Northwoods.Go.GoSubGraph.Collapse"/> or <see cref="M:Northwoods.Go.GoSubGraph.Expand"/>
            depending on the value of <see cref="P:Northwoods.Go.GoSubGraph.IsExpanded"/>.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoSubGraph.ExpandAll">
            <summary>
            This method calls <see cref="M:Northwoods.Go.GoSubGraph.Expand"/> on this node and then recursively
            proceeds through all of the children, expanding them.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoSubGraph.SetExpanded(System.Boolean)">
            <summary>
            Call this method to change the flag indicating the expansion state.
            </summary>
            <param name="value"></param>
            <remarks>
            Calling this method does not call either <see cref="M:Northwoods.Go.GoSubGraph.Collapse"/> or
            <see cref="M:Northwoods.Go.GoSubGraph.Expand"/>.
            This is normally only called by those two methods, in order to change
            the <see cref="P:Northwoods.Go.GoSubGraph.IsExpanded"/> property.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoSubGraph.ChangeValue(Northwoods.Go.GoChangedEventArgs,System.Boolean)">
            <summary>
            Handle this class's property changes for undo and redo
            </summary>
            <param name="e"></param>
            <param name="undo"></param>
        </member>
        <member name="P:Northwoods.Go.GoSubGraph.Handle">
            <summary>
            Gets the <see cref="T:Northwoods.Go.GoSubGraphHandle"/> representing and controlling the subgraph.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoSubGraph.Label">
            <summary>
            Gets or sets the standard text label for this node.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoSubGraph.PickableBackground">
            <summary>
            Gets or sets whether <see cref="M:Northwoods.Go.GoSubGraph.Pick(Northwoods.Go.PointF,System.Boolean)"/> returns this node when the tested point
            is in the background of this node, not on any of its child objects.
            </summary>
            <value>
            This defaults to false.
            </value>
        </member>
        <member name="P:Northwoods.Go.GoSubGraph.LabelSpot">
            <summary>
            Gets or sets the spot at which the label, if any, should be positioned
            relative to the rest of the node.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoSubGraph.Margin">
            <summary>
            Gets or sets the margin along the edges of this node when expanded.
            </summary>
            <value>
            This specifies the width of each side margin and the height of top margin and the
            height of the bottom margin, in document coordinates.
            By default the width and height are each <c>4</c>.
            The margin width and height must each be non-negative.
            The margin should be large enough to accomodate any border drawn by the
            <see cref="P:Northwoods.Go.GoSubGraph.BorderPen"/>.
            </value>
        </member>
        <member name="P:Northwoods.Go.GoSubGraph.BorderPen">
            <summary>
            Gets or sets the pen used to draw a rectangular outline just inside the
            edges of this node.
            </summary>
            <value>
            You must not modify the pen after you have assigned it.
            The <c>Pen</c> value may be null, in which case no outline is drawn.
            This value defaults to null.
            </value>
        </member>
        <member name="P:Northwoods.Go.GoSubGraph.IsExpanded">
            <summary>
            Gets whether this subgraph is in an expanded state.
            </summary>
            <value>
            The initial value is true.
            </value>
        </member>
        <member name="P:Northwoods.Go.GoSubGraph.SavedBounds">
            <summary>
            Gets the Hashtable that remembers the sizes and relative positions
            of all of the child objects when the subgraph is collapsed.
            </summary>
            <value>
            The hashtable may be empty when the subgraph is in an expanded state.
            </value>
            <remarks>
            The hashtable maps child non-link objects to RectangleF structures.
            Although the values are in document coordinates,
            the (X,Y) position is not an absolute position
            but a position relative to the <see cref="P:Northwoods.Go.GoSubGraph.Handle"/>'s position.
            Modifications to this hashtable have no effect except upon
            a call to <see cref="M:Northwoods.Go.GoSubGraph.Expand"/>, and are not recorded by the undo manager.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoSubGraph.Collapsible">
            <summary>
            Gets or sets whether the user is allowed to toggle whether this node
            is expanded or collapsed.
            </summary>
            <value>
            The default value is true.
            </value>
            <remarks>
            When the value is true, the handle will be drawn as either a "-" or a "+".
            When this value is false, the handle will be drawn in a different fashion.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoSubGraph.BackgroundColor">
            <summary>
            Gets or sets the background color for the group.
            </summary>
            <value>
            The default color is a <c>LightBlue</c>.
            </value>
        </member>
        <member name="P:Northwoods.Go.GoSubGraph.Opacity">
            <summary>
            Gets or sets the percentage of opaqueness that the background color
            should be painted with.
            </summary>
            <value>
            The default value is 20.  The value must be between zero and 100.
            </value>
            <remarks>
            When the opacity is zero, the <see cref="P:Northwoods.Go.GoSubGraph.BackgroundColor"/> is not
            drawn at all.
            When the opacity is 100, the user cannot see what is behind the group's
            whole area.
            </remarks>
        </member>
        <member name="T:Northwoods.Go.GoSubGraphHandle">
            <summary>
            This small rectangle is drawn with either a "+" or a "-" so that users
            can click on this to expand or collapse the subgraph.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoSubGraphHandle.#ctor">
            <summary>
            The normal subgraph handle is 10x10 and has a Gold fill and Black lines.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoSubGraphHandle.Paint(System.Drawing.Graphics,Northwoods.Go.GoView)">
            <summary>
            Draw a plus/minus/zero inside a rectangle.
            </summary>
            <param name="g"></param>
            <param name="view"></param>
            <remarks>
            This just calls <see cref="M:Northwoods.Go.GoSubGraphHandle.PaintHandle(System.Drawing.Graphics,Northwoods.Go.GoView)"/> after calling
            the base method.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoSubGraphHandle.PaintHandle(System.Drawing.Graphics,Northwoods.Go.GoView)">
            <summary>
            The appearance of this handle depends on the <see cref="P:Northwoods.Go.GoSubGraph.Collapsible"/>
            and <see cref="P:Northwoods.Go.GoSubGraph.IsExpanded"/> properties.
            </summary>
            <param name="g"></param>
            <param name="view"></param>
            <remarks>
            If the <see cref="T:Northwoods.Go.GoSubGraph"/> is not <see cref="P:Northwoods.Go.GoSubGraph.Collapsible"/>,
            this draws a circle inside the rectangle.
            Otherwise, if the subgraph is <see cref="P:Northwoods.Go.GoSubGraph.IsExpanded"/>, this draws a
            "minus" sign.
            If <see cref="P:Northwoods.Go.GoSubGraph.IsExpanded"/> is false, this draws a "plus" sign.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoSubGraphHandle.OnSingleClick(Northwoods.Go.GoInputEventArgs,Northwoods.Go.GoView)">
            <summary>
            Implement the single-click behavior for this handle, to toggle the
            expansion state of the <see cref="T:Northwoods.Go.GoSubGraph"/> that this handle is in.
            </summary>
            <param name="evt"></param>
            <param name="view"></param>
            <returns>true if the parent <see cref="P:Northwoods.Go.GoSubGraph.Collapsible"/> property is true</returns>
            <remarks>
            When expanding, if the user holds down the <c>Control</c> key, this calls
            <see cref="M:Northwoods.Go.GoSubGraph.ExpandAll"/> instead of <see cref="M:Northwoods.Go.GoSubGraph.Expand"/>.
            If the view is non-null, this method calls <see cref="M:Northwoods.Go.GoView.StartTransaction"/>
            and <see cref="M:Northwoods.Go.GoView.FinishTransaction(System.String)"/>.
            </remarks>
        </member>
        <member name="T:Northwoods.Go.GoTextNode">
            <summary>
            A node displaying a string with a background and four ports, one at the
            middle of each side.
            </summary>
            <remarks>
            If you don't need all four ports, you can remove ones you don't want by
            setting the corresponding property to null.
            You can change the background from a light-gray rectangle by setting
            the <see cref="P:Northwoods.Go.GoTextNode.Background"/> property to be some other object.  In order for
            the text to fit nicely within the shape, you may need to set the
            <see cref="P:Northwoods.Go.GoTextNode.TopLeftMargin"/> and <see cref="P:Northwoods.Go.GoTextNode.BottomRightMargin"/> properties
            to larger values.  This is particularly true if the new shape is a
            <see cref="T:Northwoods.Go.GoEllipse"/> or <see cref="T:Northwoods.Go.GoDiamond"/>.
            The text string is normally multiline and not editable, but you can change
            those and other properties by setting the <see cref="P:Northwoods.Go.GoTextNode.Label"/>'s properties.
            Setting the <see cref="P:Northwoods.Go.GoTextNode.Shadowed"/> property for this node actually sets that
            property on the <see cref="P:Northwoods.Go.GoTextNode.Background"/> object.
            </remarks>
        </member>
        <member name="F:Northwoods.Go.GoTextNode.ChangedLabel">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoTextNode.ChangedBackground">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoTextNode.ChangedTopPort">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoTextNode.ChangedRightPort">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoTextNode.ChangedBottomPort">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoTextNode.ChangedLeftPort">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoTextNode.ChangedTopLeftMargin">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoTextNode.ChangedBottomRightMargin">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoTextNode.ChangedAutoResizes">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoTextNode.#ctor">
            <summary>
            Create a GoTextNode displaying an empty text string with a rectangular
            background and a port at each side.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoTextNode.CreateBackground">
            <summary>
            Create and initialize an object that serves as the background for the text.
            </summary>
            <returns>
            a <see cref="T:Northwoods.Go.GoRectangle"/> with a light gray <see cref="P:Northwoods.Go.GoShape.Brush"/>
            </returns>
            <remarks>
            You may wish to override this to use a different kind of background object,
            such as <see cref="T:Northwoods.Go.GoRoundedRectangle"/>.
            </remarks>
            <example>
            If you override this method, you may want the definition to do
            some of the things that the standard definition does:
            <code>
             protected virtual GoObject CreateBackground() {
               GoRectangle r = new GoRectangle();
               r.Selectable = false;
               r.Resizable = false;
               r.Reshapable = false;
               r.Brush = Brushes.LightGray;
               return r;
             }
            </code>
            </example>
        </member>
        <member name="M:Northwoods.Go.GoTextNode.CreateLabel">
            <summary>
            Create and initialize the text object.
            </summary>
            <returns>
            a <see cref="T:Northwoods.Go.GoText"/> object, normally supporting multiple lines but
            that is not resizable or editable.
            </returns>
            <example>
            If you override this method, you may want the definition to do
            some of the things that the standard definition does:
            <code>
             protected virtual GoText CreateLabel() {
               GoText l = new GoText();
               l.Selectable = false;
               l.Multiline = true;
               return l;
             }
            </code>
            </example>
        </member>
        <member name="M:Northwoods.Go.GoTextNode.CreatePort(System.Int32)">
            <summary>
            Create and initialize a port for a side of this node.
            </summary>
            <param name="spot"></param>
            <returns>
            a small <see cref="T:Northwoods.Go.GoPort"/> whose <see cref="P:Northwoods.Go.GoPort.Style"/> is
            <see cref="F:Northwoods.Go.GoPortStyle.None"/> supporting both source and
            destination links
            </returns>
            <example>
            If you override this method, you may want the definition to do
            some of the things that the standard definition does:
            <code>
             protected virtual GoPort CreatePort(int spot) {
               GoPort p = new GoPort();
               p.Style = GoPortStyle.None;
               p.Size = new SizeF(4, 4);
               p.FromSpot = spot;
               p.ToSpot = spot;
               return p;
             }
            </code>
            </example>
        </member>
        <member name="M:Northwoods.Go.GoTextNode.CopyChildren(Northwoods.Go.GoGroup,Northwoods.Go.GoCopyDictionary)">
            <summary>
            Copy the background, text label, and the four ports.
            </summary>
            <param name="newgroup"></param>
            <param name="env"></param>
            <remarks>
            Remember to override this to copy any objects you add to this class.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoTextNode.Remove(Northwoods.Go.GoObject)">
            <summary>
            If any part is removed from this group,
            be sure to remove any references in local fields.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Northwoods.Go.GoTextNode.LayoutChildren(Northwoods.Go.GoObject)">
            <summary>
            Size the background to fit the text, and position the ports at the edges
            of the background object.
            </summary>
            <param name="childchanged"></param>
            <remarks>
            This method uses the <see cref="P:Northwoods.Go.GoTextNode.TopLeftMargin"/> and <see cref="P:Northwoods.Go.GoTextNode.BottomRightMargin"/>
            properties to decide how much bigger the background should be than the text label.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoTextNode.OnAutoResizesChanged(System.Boolean)">
            <summary>
            This method is called when the value of <see cref="P:Northwoods.Go.GoTextNode.AutoResizes"/> changes.
            </summary>
            <remarks>
            This just changes the <see cref="P:Northwoods.Go.GoTextNode.Label"/>'s <see cref="P:Northwoods.Go.GoText.Wrapping"/>
            and <see cref="P:Northwoods.Go.GoText.Clipping"/> properties to be true when the
            <see cref="P:Northwoods.Go.GoTextNode.AutoResizes"/> property is false, and vice-versa.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoTextNode.ChangeValue(Northwoods.Go.GoChangedEventArgs,System.Boolean)">
            <summary>
            Handle this class's property changes for undo and redo
            </summary>
            <param name="e"></param>
            <param name="undo"></param>
        </member>
        <member name="P:Northwoods.Go.GoTextNode.Shadowed">
            <summary>
            Giving this node a shadow really means giving the background a shadow.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoTextNode.TopLeftMargin">
            <summary>
            Gets or sets the space between the top and left sides of the text label
            with the top and left sides of the background.
            </summary>
            <remarks>
            If you change the background to be a different shape by overriding
            <see cref="M:Northwoods.Go.GoTextNode.CreateBackground"/>, you will probably want to set this margin
            and <see cref="P:Northwoods.Go.GoTextNode.BottomRightMargin"/> appropriately so that the text fits.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoTextNode.BottomRightMargin">
            <summary>
            Gets or sets the space between the bottom and right sides of the text label
            with the bottom and right sides of the background.
            </summary>
            <remarks>
            If you change the background to be a different shape by overriding
            <see cref="M:Northwoods.Go.GoTextNode.CreateBackground"/>, you will probably want to set this margin
            and <see cref="P:Northwoods.Go.GoTextNode.TopLeftMargin"/> appropriately so that the text fits.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoTextNode.AutoResizes">
            <summary>
            Gets or sets whether the size of the background is changed as the text label's size changes.
            </summary>
            <value>
            The default value is true.
            </value>
        </member>
        <member name="P:Northwoods.Go.GoTextNode.Label">
            <summary>
            Display a string and participate in standard textual node searches and editing.
            </summary>
            <value>
            The new value may be null, to simply remove the label.
            If non-null, the new text object should have the <see cref="P:Northwoods.Go.GoObject.Selectable"/>
            property set to false.
            </value>
            <remarks>
            Instead of setting the label after creating a node, you may find it
            easier to override the <see cref="M:Northwoods.Go.GoTextNode.CreateLabel"/> method.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoTextNode.Background">
            <summary>
            Gets or sets the background object.
            </summary>
            <value>
            The new value may be null, to simply remove the background object.
            If non-null, the new object should have the <see cref="P:Northwoods.Go.GoObject.Selectable"/>
            property set to false.
            </value>
            <remarks>
            Instead of setting the background after creating a node, you may find it
            easier to override the <see cref="M:Northwoods.Go.GoTextNode.CreateBackground"/> method.
            The new background object will have its
            Selectable and Shadowed properties copied from the old background object.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoTextNode.Pen">
            <summary>
            This convenience property exposes the <c>Pen</c> of the <see cref="P:Northwoods.Go.GoTextNode.Background"/>
            if it is a <see cref="T:Northwoods.Go.GoShape"/>.
            </summary>
            <remarks>
            If the <see cref="P:Northwoods.Go.GoTextNode.Background"/> object is null or is not a <see cref="T:Northwoods.Go.GoShape"/>
            the value will be null and setting the value has no effect.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoTextNode.Brush">
            <summary>
            This convenience property exposes the <c>Brush</c> of the <see cref="P:Northwoods.Go.GoTextNode.Background"/>
            if it is a <see cref="T:Northwoods.Go.GoShape"/>.
            </summary>
            <remarks>
            If the <see cref="P:Northwoods.Go.GoTextNode.Background"/> object is null or is not a <see cref="T:Northwoods.Go.GoShape"/>
            the value will be null and setting the value has no effect.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoTextNode.TopPort">
            <summary>
            Gets or sets the port at the top of the node.
            </summary>
            <value>
            The new value may be null, to simply remove the port.
            If non-null, the port should have the <see cref="P:Northwoods.Go.GoObject.Selectable"/>
            property set to false.
            </value>
            <remarks>
            Instead of setting the port after creating a node, you may find it
            easier to override the <see cref="M:Northwoods.Go.GoTextNode.CreatePort(System.Int32)"/> method.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoTextNode.RightPort">
            <summary>
            Gets or sets the port at the right side of the node.
            </summary>
            <value>
            The new value may be null, to simply remove the port.
            If non-null, the port should have the <see cref="P:Northwoods.Go.GoObject.Selectable"/>
            property set to false.
            </value>
            <remarks>
            Instead of setting the port after creating a node, you may find it
            easier to override the <see cref="M:Northwoods.Go.GoTextNode.CreatePort(System.Int32)"/> method.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoTextNode.BottomPort">
            <summary>
            Gets or sets the port at the bottom of the node.
            </summary>
            <value>
            The new value may be null, to simply remove the port.
            If non-null, the port should have the <see cref="P:Northwoods.Go.GoObject.Selectable"/>
            property set to false.
            </value>
            <remarks>
            Instead of setting the port after creating a node, you may find it
            easier to override the <see cref="M:Northwoods.Go.GoTextNode.CreatePort(System.Int32)"/> method.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoTextNode.LeftPort">
            <summary>
            Gets or sets the port at the left of the node.
            </summary>
            <value>
            The new value may be null, to simply remove the port.
            If non-null, the port should have the <see cref="P:Northwoods.Go.GoObject.Selectable"/>
            property set to false.
            </value>
            <remarks>
            Instead of setting the port after creating a node, you may find it
            easier to override the <see cref="M:Northwoods.Go.GoTextNode.CreatePort(System.Int32)"/> method.
            </remarks>
        </member>
        <member name="T:Northwoods.Go.GoTool">
            <summary>
            This abstract class provides the base for all of the predefined tools.
            </summary>
        </member>
        <member name="T:Northwoods.Go.IGoTool">
            <summary>
            This interface specifies the methods the view uses to control this tool
            and the methods used to handle the canonicalized input events processed through
            the view.
            </summary>
            <remarks>
            All existing tools are actually subclasses of the abstract class <see cref="T:Northwoods.Go.GoTool"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.IGoTool.CanStart">
            <summary>
            This predicate is used by the view to decide if this tool can be started.
            </summary>
            <returns>true if the view can make this tool the current one and call
            the <see cref="M:Northwoods.Go.IGoTool.Start"/> method</returns>
        </member>
        <member name="M:Northwoods.Go.IGoTool.Start">
            <summary>
            This method is called by the view when this tool becomes the currently active tool.
            </summary>
            <remarks>
            Tool implementations should perform their per-use initialization here, such
            as starting a document transaction and setting up internal data structures.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.IGoTool.Stop">
            <summary>
            This method is called by the view when this tool stops being the current tool.
            </summary>
            <remarks>
            Tool implementations should perform their per-use cleanup here, such as
            finishing a document transaction.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.IGoTool.DoMouseDown">
            <summary>
            The view will call this method upon a mouse down event.
            </summary>
        </member>
        <member name="M:Northwoods.Go.IGoTool.DoMouseMove">
            <summary>
            The view will call this method upon a mouse drag event.
            </summary>
        </member>
        <member name="M:Northwoods.Go.IGoTool.DoMouseUp">
            <summary>
            The view will call this method upon a mouse up event.
            </summary>
        </member>
        <member name="M:Northwoods.Go.IGoTool.DoMouseWheel">
            <summary>
            The view will call this method as the mouse wheel is rotated.
            </summary>
        </member>
        <member name="M:Northwoods.Go.IGoTool.DoMouseHover">
            <summary>
            The view will call this method upon a mouse hover event.
            </summary>
        </member>
        <member name="M:Northwoods.Go.IGoTool.DoCancelMouse">
            <summary>
            The view will call this method when the we wish to cancel the
            current tool's operation.
            </summary>
        </member>
        <member name="M:Northwoods.Go.IGoTool.DoKeyDown">
            <summary>
            The view will call this method upon a key down event.
            </summary>
        </member>
        <member name="P:Northwoods.Go.IGoTool.View">
            <summary>
            Gets the view for which this tool is handling canonicalized  input events.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoTool.#ctor(Northwoods.Go.GoView)">
            <summary>
            The constructor associates a view with the tool.
            </summary>
            <param name="v">
            This <see cref="T:Northwoods.Go.GoView"/> must not be null.
            </param>
        </member>
        <member name="M:Northwoods.Go.GoTool.CanStart">
            <summary>
            This predicate should be true if this tool can be activated to be the view's current tool.
            </summary>
            <returns></returns>
            <remarks>
            By default, this returns true.
            This is normally only called by the <see cref="T:Northwoods.Go.GoToolManager"/> to decide whether this tool should be started as a
            mode-less mouse tool.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoTool.Start">
            <summary>
            This method is called when this tool becomes the view's current tool.
            </summary>
            <remarks>
            Typically you will want to put initialization code here for each time the tool is started.
            By default, this does nothing.
            You should not normally be calling this method directly--only the view should.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoTool.Stop">
            <summary>
            This method is called when this tool is about to be replaced as the view's current tool.
            </summary>
            <remarks>
            Typically you will want to put termination code here for each time the tool is stopped.
            By default, this does nothing.
            You should not normally be calling this method directly--only the view should.
            If you want to cause this tool to stop, call <see cref="M:Northwoods.Go.GoTool.StopTool"/> instead,
            which will eventually call this method.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoTool.DoMouseDown">
            <summary>
            The view calls this method upon a mouse down event; all of the event
            information is provided by the <see cref="P:Northwoods.Go.GoTool.LastInput"/> property.
            </summary>
            <remarks>
            By default, this does nothing.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoTool.DoMouseMove">
            <summary>
            The view calls this method upon a mouse move event; all of the event
            information is provided by the <see cref="P:Northwoods.Go.GoTool.LastInput"/> property.
            </summary>
            <remarks>
            By default, this does nothing.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoTool.DoMouseUp">
            <summary>
            The view calls this method upon a mouse up event; all of the event
            information is provided by the <see cref="P:Northwoods.Go.GoTool.LastInput"/> property.
            </summary>
            <remarks>
            By default, this just calls <see cref="M:Northwoods.Go.GoTool.StopTool"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoTool.DoMouseWheel">
            <summary>
            The view calls this method as the mouse wheel rotates; all of the event
            information is provided by the <see cref="P:Northwoods.Go.GoTool.LastInput"/> property.
            </summary>
            <remarks>
            By default this does nothing.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoTool.DoMouseHover">
            <summary>
            The view calls this method after the mouse rests for a while at a point;
            all of the event information is provided by the <see cref="P:Northwoods.Go.GoTool.LastInput"/> property.
            </summary>
            <remarks>
            By default, this does nothing.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoTool.DoCancelMouse">
            <summary>
            The view calls this method when the user cancels the gesture with the mouse;
            all of the event information is provided by the <see cref="P:Northwoods.Go.GoTool.LastInput"/> property.
            </summary>
            <remarks>
            By default, this just calls <see cref="M:Northwoods.Go.GoTool.StopTool"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoTool.DoKeyDown">
            <summary>
            The view calls this method when the user presses a key on the keyboard;
            all of the event information is provided by the <see cref="P:Northwoods.Go.GoTool.LastInput"/> property.
            </summary>
            <remarks>
            By default, this just calls <see cref="M:Northwoods.Go.GoTool.DoCancelMouse"/> if the user pressed
            the <c>Escape</c> key.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoTool.DoSelect(Northwoods.Go.GoInputEventArgs)">
            <summary>
            Any tool can call this method in order to implement the standard selection behavior
            for a user click.
            </summary>
            <param name="evt">a <see cref="T:Northwoods.Go.GoInputEventArgs"/> describing the input event</param>
            <remarks>
            This sets the <see cref="P:Northwoods.Go.GoTool.CurrentObject"/> to be the result of a call
            to the view's <see cref="M:Northwoods.Go.GoView.PickObject(System.Boolean,System.Boolean,Northwoods.Go.PointF,System.Boolean)"/> to pick the selectable
            document object at the current point.
            If an object is found, what happens to the selection depends on any
            modifiers to the event:
            if <see cref="P:Northwoods.Go.GoInputEventArgs.Control"/> is true,
            we toggle the selectedness of the current object;
            if <see cref="P:Northwoods.Go.GoInputEventArgs.Shift"/> is true,
            we add the current object to the selection;
            otherwise we just make the current object the only selection.
            If no object is found and neither <see cref="P:Northwoods.Go.GoInputEventArgs.Control"/>
            nor <see cref="P:Northwoods.Go.GoInputEventArgs.Shift"/> are true, we empty the selection.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoTool.DoClick(Northwoods.Go.GoInputEventArgs)">
            <summary>
            Any tool can call this method in order to implement the standard click behavior.
            </summary>
            <param name="evt">a <see cref="T:Northwoods.Go.GoInputEventArgs"/> describing the input event</param>
            <returns></returns>
            <remarks>
            By default, this just calls either <see cref="M:Northwoods.Go.GoView.DoDoubleClick(Northwoods.Go.GoInputEventArgs)"/>
            or <see cref="M:Northwoods.Go.GoView.DoSingleClick(Northwoods.Go.GoInputEventArgs)"/>, depending on whether
            <see cref="P:Northwoods.Go.GoInputEventArgs.DoubleClick"/> is true.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoTool.StopTool">
            <summary>
            This method just causes the view's current tool to be stopped
            and to start the view's default tool instead as the current tool.
            </summary>
            <remarks>
            Call this method when this tool is finished its task.
            When the view replaces this tool with the default one, it will
            call the <see cref="M:Northwoods.Go.GoTool.Stop"/> method on this tool.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoTool.StartTransaction">
            <summary>
            Start a transaction on the view.
            </summary>
            <returns></returns>
            <remarks>
            This is typically called in overrides of <see cref="M:Northwoods.Go.GoTool.Start"/>.
            This method also sets the <see cref="P:Northwoods.Go.GoTool.TransactionResult"/> to null,
            so that a call to <see cref="M:Northwoods.Go.GoTool.StopTransaction"/> will abort the
            transaction rather than finishing it normally.
            Not all tools involve changes to the view's document, and thus not
            all tools need to start and stop transactions.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoTool.StopTransaction">
            <summary>
            Stop the current transaction, aborting it if <see cref="P:Northwoods.Go.GoTool.TransactionResult"/> is null.
            </summary>
            <returns></returns>
            <remarks>
            This is typically called in overrides of <see cref="M:Northwoods.Go.GoTool.Stop"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoTool.SubtractPoints(Northwoods.Go.PointF,Northwoods.Go.PointF)">
            <summary>
            This shared method helps do subtraction of <c>PointF</c> values.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.GoTool.SubtractPoints(Northwoods.Go.PointF,System.Drawing.SizeF)">
            <summary>
            This shared method helps do subtraction of <c>PointF</c> and <c>SizeF</c> values.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.GoTool.SubtractPoints(System.Drawing.SizeF,Northwoods.Go.PointF)">
            <summary>
            This shared method helps do subtraction of <c>PointF</c> and <c>SizeF</c> values.
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="P:Northwoods.Go.GoTool.View">
            <summary>
            Gets the view for which this tool is handling canonicalized input events.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoTool.FirstInput">
            <summary>
            Gets this view's FirstInput property.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoTool.LastInput">
            <summary>
            Gets this view's LastInput property.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoTool.Selection">
            <summary>
            Gets this view's Selection property.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoTool.CurrentObject">
            <summary>
            Gets or sets this tool's CurrentObject property.
            </summary>
            <remarks>
            Often different methods of a tool will need to deal with the "current"
            <see cref="T:Northwoods.Go.GoObject"/> that the user is working with.  This property
            is provided so each tool doesn't need to define it.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoTool.TransactionResult">
            <summary>
            Gets or sets whether to abort the current transaction if this tool is stopped;
            if set to a string, the string specifies the name of the transaction that will
            be finished when the tool stops.
            </summary>
            <remarks>
            This determines whether <see cref="M:Northwoods.Go.GoTool.StopTransaction"/> calls
            <see cref="M:Northwoods.Go.GoView.AbortTransaction"/> or <see cref="M:Northwoods.Go.GoView.FinishTransaction(System.String)"/>,
            depending on whether the value is null or a <c>String</c>.
            </remarks>
        </member>
        <member name="T:Northwoods.Go.GoToolAction">
            <summary>
            This tool is used to handle objects like buttons or knobs that
            implement the <see cref="T:Northwoods.Go.IGoActionObject"/> interface.
            </summary>
            <remarks>
            A mouse down activates the <see cref="T:Northwoods.Go.IGoActionObject"/>
            under that mouse point.  The object can use the setting of this
            property to true to render differently.  For example, 
            a <see cref="T:Northwoods.Go.GoButton"/> will appear "pressed".
            A mouse move will invoke <see cref="M:Northwoods.Go.IGoActionObject.OnActionAdjusted(Northwoods.Go.GoView,Northwoods.Go.GoInputEventArgs)"/>.
            The object can use this notificaton to track the user's mouse
            in adjusting the state of the object.  For example, a knob's
            direction and value can follow the mouse over a range of values.
            A mouse up will invoke <see cref="M:Northwoods.Go.IGoActionObject.OnAction(Northwoods.Go.GoView,Northwoods.Go.GoInputEventArgs)"/>.
            The object can use this notification to perform some action.
            A button can actually do some work; a knob could actually set the
            new value in the document.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoToolAction.#ctor(Northwoods.Go.GoView)">
            <summary>
            The standard tool constructor.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Northwoods.Go.GoToolAction.CanStart">
            <summary>
            This tool is appropriate when the last input event is over an object
            that implements <see cref="T:Northwoods.Go.IGoActionObject"/>, or is over a part of
            an <see cref="T:Northwoods.Go.IGoActionObject"/>.
            </summary>
            <returns></returns>
            <remarks>
            This tool is not runnable when the user uses the context button.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoToolAction.Start">
            <summary>
            Get the <see cref="T:Northwoods.Go.IGoActionObject"/> that the mouse is over, and activate it.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoToolAction.PickActionObject">
            <summary>
            Find an <see cref="T:Northwoods.Go.IGoActionObject"/> that the last input event is over.
            </summary>
            <returns>an <see cref="T:Northwoods.Go.IGoActionObject"/>, or null if none</returns>
            <remarks>
            This proceeds up the chain of <see cref="P:Northwoods.Go.GoObject.Parent"/>s to find an
            object that implements <see cref="T:Northwoods.Go.IGoActionObject"/> and whose
            <see cref="P:Northwoods.Go.IGoActionObject.ActionEnabled"/> property is true.
            The result is remembered as the value of the <see cref="P:Northwoods.Go.GoToolAction.ActionObject"/> property.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoToolAction.Stop">
            <summary>
            Make sure any <see cref="T:Northwoods.Go.IGoActionObject"/> is deactivated
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoToolAction.DoMouseMove">
            <summary>
            Invoke the <see cref="M:Northwoods.Go.IGoActionObject.OnActionAdjusted(Northwoods.Go.GoView,Northwoods.Go.GoInputEventArgs)"/> method.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoToolAction.DoMouseUp">
            <summary>
            Invoke the <see cref="M:Northwoods.Go.IGoActionObject.OnAction(Northwoods.Go.GoView,Northwoods.Go.GoInputEventArgs)"/> method.
            </summary>
            <remarks>
            If the mouse up does not occur over the same action object as where
            it started, no Action is invoked.
            This stops the tool.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoToolAction.ActionObject">
            <summary>
            Gets or sets the <see cref="T:Northwoods.Go.IGoActionObject"/> being manipulated.
            </summary>
            <value>
            This is normally set to the value returned by <see cref="M:Northwoods.Go.GoToolAction.PickActionObject"/>.
            Typically this value will refer to the same object as <see cref="P:Northwoods.Go.GoTool.CurrentObject"/>.
            </value>
        </member>
        <member name="T:Northwoods.Go.GoToolContext">
            <summary>
            The "mode-less" tool used to handle the user's mouse click to invoke a context menu.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoToolContext.#ctor(Northwoods.Go.GoView)">
            <summary>
            The standard tool constructor.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Northwoods.Go.GoToolContext.CanStart">
            <summary>
            The context menu tool can be started when the last input event is a context menu button.
            </summary>
            <returns>true if <see cref="P:Northwoods.Go.GoInputEventArgs.IsContextButton"/> is true for the
            <see cref="P:Northwoods.Go.GoTool.LastInput"/></returns>
        </member>
        <member name="M:Northwoods.Go.GoToolContext.DoMouseUp">
            <summary>
            When there is a selectable document object under the last input event point,
            select it if it isn't already in the selection and call <see cref="M:Northwoods.Go.GoView.DoContextClick(Northwoods.Go.GoInputEventArgs)"/>.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoToolContext.DoSelect(Northwoods.Go.GoInputEventArgs)">
            <summary>
            When <see cref="P:Northwoods.Go.GoToolContext.SingleSelection"/> is false, the user's context-click on a selected
            object does not modify the selection, thereby allowing the context-click action to
            apply to a multiple selection.
            </summary>
            <param name="evt"></param>
            <remarks>
            If the user holds down the Control and/or Shift keys, or when <see cref="P:Northwoods.Go.GoToolContext.SingleSelection"/>
            is true, the standard <see cref="M:Northwoods.Go.GoTool.DoSelect(Northwoods.Go.GoInputEventArgs)"/> behavior occurs.
            When the user context-clicks over an object that is not selected, it becomes
            the single selection.
            When the user context-clicks over no object, the selection is cleared.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoToolContext.Start">
            <summary>
            If the view has a context menu, remember it and set it to null if there
            is an object at the last input event point.
            </summary>
            <remarks>
            This disables the default context menu behavior for <c>Control</c>s when there
            is a selectable document object under the mouse.  The object is free to bring
            up its own context menu as part of the <see cref="M:Northwoods.Go.GoObject.OnContextClick(Northwoods.Go.GoInputEventArgs,Northwoods.Go.GoView)"/>
            method.
            When there is no object under the mouse, the view's context menu pops
            up normally.
            We recommend not using the view's <c>Control.ContextMenu</c> property, but bringing
            up a context menu explicitly when handling the <see cref="E:Northwoods.Go.GoView.BackgroundContextClicked"/>
            event.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoToolContext.Stop">
            <summary>
            Restore the original context menu for the view, if any.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoToolContext.SingleSelection">
            <summary>
            Gets or sets whether the <see cref="P:Northwoods.Go.GoTool.CurrentObject"/> becomes
            the one and only selected object even if there are other already-selected objects.
            </summary>
            <value>
            The default value is true.
            </value>
        </member>
        <member name="P:Northwoods.Go.GoToolContext.BackgroundContextMenu">
            <summary>
            Gets the view's original ContextMenu, before being temporarily reset by this tool.
            </summary>
            <remarks>
            This is set by <see cref="M:Northwoods.Go.GoToolContext.Start"/> and is restored by <see cref="M:Northwoods.Go.GoToolContext.Stop"/>.
            The view's <c>ContextMenu</c> property has to be set to null temporarily to avoid
            being invoked as well as an object specific context menu.
            We recommend not using the view's <c>Control.ContextMenu</c> property, but bringing
            up a context menu explicitly when handling the <see cref="E:Northwoods.Go.GoView.BackgroundContextClicked"/>
            event.
            </remarks>
        </member>
        <member name="T:Northwoods.Go.GoToolDragging">
            <summary>
            The tool used to implement dragging behavior, for moving and copying objects.
            </summary>
            <remarks>
            This tool is expected to be invoked upon a mouse move.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoToolDragging.#ctor(Northwoods.Go.GoView)">
            <summary>
            The standard tool constructor.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Northwoods.Go.GoToolDragging.CanStart">
            <summary>
            The dragging tool is applicable when the user can move or copy one or more objects.
            </summary>
            <returns>
            This predicate returns true when:
            <list type="bullet">
            <item>the user has started moving the mouse with a mouse button down</item>
            <item>the view allows objects to be moved or copied or dragged out of the window</item>
            <item>the mouse button is not the context menu button</item>
            <item>there is a selectable object under the mouse</item>
            <item>and that object can be moved or copied</item>
            </list>
            </returns>
        </member>
        <member name="M:Northwoods.Go.GoToolDragging.Start">
            <summary>
            Start a drag-and-drop operation.
            </summary>
            <remarks>
            This first remembers the <see cref="P:Northwoods.Go.GoToolDragging.MoveOffset"/> between the <see cref="P:Northwoods.Go.GoTool.CurrentObject"/>'s
            position and the mouse point (the first input event point).
            It removes any selection handles, so those do not need to be dragged along.
            It also starts a transaction.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoToolDragging.Stop">
            <summary>
            Clean up after any drag.
            </summary>
            <remarks>
            This restores any hidden selection handles, removes any
            drag selection objects, and stops the current transaction.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoToolDragging.DoMouseMove">
            <summary>
            Mouse drags just call <see cref="M:Northwoods.Go.GoToolDragging.DoDragging(Northwoods.Go.GoInputState)"/> and <see cref="M:Northwoods.Go.GoView.DoAutoScroll(System.Drawing.Point)"/>.
            </summary>
            <remarks>
            By default this sets the <c>Effect</c> according to the
            values of <see cref="M:Northwoods.Go.GoToolDragging.MayBeCopying"/>, <see cref="M:Northwoods.Go.GoToolDragging.MayBeMoving"/>,
            <see cref="M:Northwoods.Go.GoToolDragging.MustBeCopying"/>, <see cref="M:Northwoods.Go.GoToolDragging.MustBeMoving"/>
            and whether all of the objects in the selection can be copied or moved.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoToolDragging.DoMouseUp">
            <summary>
            The release of the mouse makes a final call to <see cref="M:Northwoods.Go.GoToolDragging.DoDragging(Northwoods.Go.GoInputState)"/> before
            finishing the transaction.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoToolDragging.DoCancelMouse">
            <summary>
            Cancelling a drag involves moving the selection back to the original position
            before aborting the transaction.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoToolDragging.MayBeCopying">
            <summary>
            This predicate is true when both the Shift modifier is false and the
            view allows objects to be inserted, and some object in the Selection is copyable.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.GoToolDragging.MustBeCopying">
            <summary>
            This predicate is true when both the Control modifier is true and the
            view allows objects to be inserted.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.GoToolDragging.MayBeMoving">
            <summary>
            This predicate is true when the Control modifier is false and the
            view allows objects to be moved, and some object in the Selection is movable.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.GoToolDragging.MustBeMoving">
            <summary>
            This predicate is true when both the Shift modifier is true and the
            view allows objects to be moved.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.GoToolDragging.DoDragging(Northwoods.Go.GoInputState)">
            <summary>
            Perform the drag, for both moving and copying, including the final move or copy
            on a mouse up event.
            </summary>
            <param name="evttype"></param>
            <remarks>
            Whether the drag is performing a move or a copy is determined by the
            value of the <see cref="M:Northwoods.Go.GoToolDragging.MustBeCopying"/> predicate.
            This method is sensitive to the <see cref="P:Northwoods.Go.GoView.DragsRealtime"/> property.
            When this property is false, dragging uses the <see cref="P:Northwoods.Go.GoToolDragging.DragSelection"/>
            selection instead of the normal <see cref="P:Northwoods.Go.GoView.Selection"/> collection.
            It calls <see cref="M:Northwoods.Go.GoToolDragging.MakeDragSelection"/> to create the drag selection if needed
            and then moves the drag selection.
            When not copying and when <see cref="P:Northwoods.Go.GoView.DragsRealtime"/> is true, it calls
            <see cref="M:Northwoods.Go.GoToolDragging.ClearDragSelection"/> to stop using any drag selection and then it
            moves the regular <see cref="P:Northwoods.Go.GoView.Selection"/>.
            This method also heeds the <see cref="P:Northwoods.Go.GoView.GridSnapDrag"/> property, which
            determines the value for the "grid" parameter of <see cref="M:Northwoods.Go.GoView.MoveSelection(Northwoods.Go.GoSelection,System.Drawing.SizeF,System.Boolean)"/>
            and <see cref="M:Northwoods.Go.GoView.CopySelection(Northwoods.Go.GoSelection,System.Drawing.SizeF,System.Boolean)"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoToolDragging.ComputeEffectiveSelection(Northwoods.Go.IGoCollection,System.Boolean)">
            <summary>
            Produce a new <see cref="T:Northwoods.Go.GoSelection"/> that is the real set of objects
            to be moved by <see cref="M:Northwoods.Go.GoView.MoveSelection(Northwoods.Go.GoSelection,System.Drawing.SizeF,System.Boolean)"/> or copied by
            <see cref="M:Northwoods.Go.GoView.CopySelection(Northwoods.Go.GoSelection,System.Drawing.SizeF,System.Boolean)"/>.
            </summary>
            <param name="coll"></param>
            <param name="move"></param>
            <returns>a <see cref="T:Northwoods.Go.GoSelection"/> that is cached as <see cref="P:Northwoods.Go.GoToolDragging.EffectiveSelection"/></returns>
            <remarks>
            This method is used to try to avoid problems with double-moving
            due to duplicate entries or both a parent and its child being in
            the argument collection.
            This also removes objects whose <see cref="P:Northwoods.Go.GoObject.DraggingObject"/>
            is null or has a false value for <see cref="M:Northwoods.Go.GoObject.CanMove"/> (if
            <paramref name="move"/> is true) or a false value for <see cref="M:Northwoods.Go.GoObject.CanCopy"/>
            (if <paramref name="move"/> is false).
            Furthermore this adds to the collection all links that have both
            ports in the selection.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoToolDragging.CreateDragSelection">
            <summary>
            Create a new selection object containing an image of all of the real selected objects.
            </summary>
            <returns>a new <see cref="T:Northwoods.Go.GoSelection"/> holding view objects that represent the
            objects in the <see cref="P:Northwoods.Go.GoView.Selection"/></returns>
            <remarks>
            This creates a new <see cref="T:Northwoods.Go.GoSelection"/> for this view.
            The objects that are in this selection have been added to the default
            layer of the view.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoToolDragging.MakeDragSelection">
            <summary>
            Start using a <see cref="P:Northwoods.Go.GoToolDragging.DragSelection"/>, creating it if needed, and moving the
            originally selected objects back to their original position.
            </summary>
            <remarks>
            This also sets <see cref="P:Northwoods.Go.GoTool.CurrentObject"/> to a corresponding
            outline object in the drag selection, and remembers the original current
            object in the <see cref="P:Northwoods.Go.GoToolDragging.DragSelectionOriginalObject"/> property.  This
            allows <see cref="M:Northwoods.Go.GoToolDragging.DoDragging(Northwoods.Go.GoInputState)"/>to continue calculating move offsets based
            on the position of the <see cref="P:Northwoods.Go.GoTool.CurrentObject"/>, even though 
            the objects are part of the drag selection instead of the
            original selected objects.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoToolDragging.ClearDragSelection">
            <summary>
            Stop using the <see cref="P:Northwoods.Go.GoToolDragging.DragSelection"/>.
            </summary>
            <remarks>
            Remove all of the objects from the <see cref="P:Northwoods.Go.GoToolDragging.DragSelection"/> from the view,
            clear the <see cref="P:Northwoods.Go.GoToolDragging.DragSelection"/> property, and
            set the <see cref="P:Northwoods.Go.GoTool.CurrentObject"/> back to the original current object.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoToolDragging.DragSelection">
            <summary>
            Gets or sets the alternative selection collection, holding an image
            of the view's selection.
            </summary>
            <remarks>
            This is created by <see cref="M:Northwoods.Go.GoToolDragging.CreateDragSelection"/>, and is reset by
            <see cref="M:Northwoods.Go.GoToolDragging.ClearDragSelection"/>.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoToolDragging.MakeDragSelection"/>
        </member>
        <member name="P:Northwoods.Go.GoToolDragging.DragSelectionOriginalObject">
            <summary>
            Gets or sets what had been the <see cref="P:Northwoods.Go.GoTool.CurrentObject"/> before the drag
            selection substituted its own.
            </summary>
            <seealso cref="P:Northwoods.Go.GoToolDragging.DragSelection"/>
        </member>
        <member name="P:Northwoods.Go.GoToolDragging.EffectiveSelection">
            <summary>
            Gets the cached result of a call to <see cref="M:Northwoods.Go.GoToolDragging.ComputeEffectiveSelection(Northwoods.Go.IGoCollection,System.Boolean)"/>.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoToolDragging.MoveOffset">
            <summary>
            Gets or sets the offset of the mouse point within the current object.
            </summary>
            <value>
            This <c>SizeF</c> value is in document coordinates.
            </value>
            <remarks>
            The mouse is normally inside the current object, which is just one
            of the selected objects being dragged.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoToolDragging.CopiesEffectiveSelection">
            <summary>
            Gets or sets whether for a copying operation the <see cref="P:Northwoods.Go.GoView.Selection"/>
            <see cref="P:Northwoods.Go.GoToolDragging.EffectiveSelection"/> is copied.
            </summary>
            <value>
            The default value is false.
            </value>
            <remarks>
            Basically this controls whether <see cref="M:Northwoods.Go.GoView.CopySelection(Northwoods.Go.GoSelection,System.Drawing.SizeF,System.Boolean)"/> is
            called with the view's <see cref="P:Northwoods.Go.GoView.Selection"/> or with the possibly
            augmented <see cref="P:Northwoods.Go.GoToolDragging.EffectiveSelection"/>.  The latter collection typically
            will hold all of the links that connect selected nodes.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoToolDragging.ComputeEffectiveSelection(Northwoods.Go.IGoCollection,System.Boolean)"/>
        </member>
        <member name="P:Northwoods.Go.GoToolDragging.HidesSelectionHandles">
            <summary>
            Gets or sets whether selection handles should be removed as the drag starts.
            </summary>
            <value>
            The default value is true.
            </value>
        </member>
        <member name="T:Northwoods.Go.GoToolLinking">
            <summary>
            The tool used to implement the user's drawing a new link or reconnecting an existing link.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoToolLinking.#ctor(Northwoods.Go.GoView)">
            <summary>
            The standard tool constructor.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Northwoods.Go.GoToolLinking.Stop">
            <summary>
            Cleaning up from any kind of linking operation involves
            removing any temporary ports or link from the view and
            stopping the current transaction.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoToolLinking.DoMouseMove">
            <summary>
            A mouse move during a linking operation involves
            calling <see cref="M:Northwoods.Go.GoToolLinking.DoLinking(Northwoods.Go.PointF)"/> and autoscrolling the view.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoToolLinking.DoMouseUp">
            <summary>
            A mouse up event ends the linking operation.
            </summary>
            <remarks>
            Depending on whether the user is drawing a new link or relinking,
            whether the user is drawing <see cref="P:Northwoods.Go.GoToolLinking.Forwards"/> or not, and
            whether <see cref="M:Northwoods.Go.GoToolLinking.PickNearestPort(Northwoods.Go.PointF)"/> found a valid port at
            a reasonable distance, this method will call either
            <see cref="M:Northwoods.Go.GoToolLinking.DoNewLink(Northwoods.Go.IGoPort,Northwoods.Go.IGoPort)"/>, <see cref="M:Northwoods.Go.GoToolLinking.DoRelink(Northwoods.Go.IGoLink,Northwoods.Go.IGoPort,Northwoods.Go.IGoPort)"/>,
            <see cref="M:Northwoods.Go.GoToolLinking.DoNoNewLink(Northwoods.Go.IGoPort,Northwoods.Go.IGoPort)"/>, or <see cref="M:Northwoods.Go.GoToolLinking.DoNoRelink(Northwoods.Go.IGoLink,Northwoods.Go.IGoPort,Northwoods.Go.IGoPort)"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoToolLinking.DoCancelMouse">
            <summary>
            Clean up the link state before stopping this tool.
            </summary>
            <remarks>
            Depending on whether the user is drawing a new link or relinking,
            whether the user is drawing <see cref="P:Northwoods.Go.GoToolLinking.Forwards"/> or not,
            this method will call either
            <see cref="M:Northwoods.Go.GoToolLinking.DoNoNewLink(Northwoods.Go.IGoPort,Northwoods.Go.IGoPort)"/>, <see cref="M:Northwoods.Go.GoToolLinking.DoNoRelink(Northwoods.Go.IGoLink,Northwoods.Go.IGoPort,Northwoods.Go.IGoPort)"/>,
            or <see cref="M:Northwoods.Go.GoToolLinking.DoCancelRelink(Northwoods.Go.IGoLink,Northwoods.Go.IGoPort,Northwoods.Go.IGoPort)"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoToolLinking.PickPort(Northwoods.Go.PointF)">
            <summary>
            Find a port in the document at the given point.
            </summary>
            <param name="dc">a <c>PointF</c> in document coordinates</param>
            <returns>an <see cref="T:Northwoods.Go.IGoPort"/>, or null if none was found at <paramref name="dc"/></returns>
        </member>
        <member name="M:Northwoods.Go.GoToolLinking.StartNewLink(Northwoods.Go.IGoPort,Northwoods.Go.PointF)">
            <summary>
            Start the process of drawing a new link from a given port.
            </summary>
            <param name="port"></param>
            <param name="dc"></param>
            <remarks>
            If <see cref="M:Northwoods.Go.GoToolLinking.IsValidFromPort(Northwoods.Go.IGoPort)"/> is true, the user will be
            linking in the <see cref="P:Northwoods.Go.GoToolLinking.Forwards"/> direction--i.e. from the
            source to the destination.
            This method calls <see cref="M:Northwoods.Go.GoToolLinking.CreateTemporaryPort(Northwoods.Go.IGoPort,Northwoods.Go.PointF,System.Boolean,System.Boolean)"/> to create both
            the <see cref="P:Northwoods.Go.GoToolLinking.StartPort"/> and the <see cref="P:Northwoods.Go.GoToolLinking.EndPort"/>, and
            it calls <see cref="M:Northwoods.Go.GoToolLinking.CreateTemporaryLink(Northwoods.Go.IGoPort,Northwoods.Go.IGoPort)"/> to create the <see cref="P:Northwoods.Go.GoToolLinking.Link"/>.
            This starts a transaction.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoToolLinking.IsValidFromPort(Northwoods.Go.IGoPort)">
            <summary>
            This predicate is called to decide if it is OK for a user to start
            drawing a link from a given port.
            </summary>
            <param name="fromPort"></param>
            <returns>By default this returns the result of calling <see cref="M:Northwoods.Go.IGoPort.CanLinkFrom"/></returns>
        </member>
        <member name="M:Northwoods.Go.GoToolLinking.IsValidToPort(Northwoods.Go.IGoPort)">
            <summary>
            This predicate is called to decide if it is OK for a user to start
            drawing a link backwards at a given port that will be the destination
            for the link.
            </summary>
            <param name="toPort"></param>
            <returns>By default this is true if <see cref="P:Northwoods.Go.GoToolLinking.ForwardsOnly"/> is false
            <see cref="M:Northwoods.Go.IGoPort.CanLinkTo"/> is true</returns>
        </member>
        <member name="M:Northwoods.Go.GoToolLinking.StartRelink(Northwoods.Go.IGoLink,Northwoods.Go.IGoPort,Northwoods.Go.PointF)">
            <summary>
            Start the process of reconnecting an existing link at a given port.
            </summary>
            <param name="oldlink"></param>
            <param name="oldport"></param>
            <param name="dc"></param>
            <remarks>
            This starts a transaction.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoToolLinking.CreateTemporaryPort(Northwoods.Go.IGoPort,Northwoods.Go.PointF,System.Boolean,System.Boolean)">
            <summary>
            This is responsible for creating a temporary port for the linking process.
            </summary>
            <param name="port">an existing port that the temporary port should be like; this may be null</param>
            <param name="pnt">the <c>PointF</c> in document coordinates for where the temporary port should be</param>
            <param name="forToPort">true if this is meant to be the <see cref="P:Northwoods.Go.IGoLink.ToPort"/>
            instead of the <see cref="P:Northwoods.Go.IGoLink.FromPort"/></param>
            <param name="atEnd">true if this is meant to be the <see cref="P:Northwoods.Go.GoToolLinking.EndPort"/>
            instead of <see cref="P:Northwoods.Go.GoToolLinking.StartPort"/></param>
            <returns>a <see cref="T:Northwoods.Go.GoPort"/> in the view at <paramref name="pnt"/></returns>
            <remarks>
            This creates a new <see cref="T:Northwoods.Go.GoPort"/> that is similar to the <paramref name="port"/>.
            By default the temporary port's <see cref="P:Northwoods.Go.GoPort.Style"/> is <see cref="F:Northwoods.Go.GoPortStyle.None"/>,
            so that it is not seen by the user.
            It is added to the default layer of the view.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoToolLinking.CreateTemporaryLink(Northwoods.Go.IGoPort,Northwoods.Go.IGoPort)">
            <summary>
            This is responsible for creating a temporary link when the user is drawing a new link.
            </summary>
            <param name="fromPort"></param>
            <param name="toPort"></param>
            <returns>a <see cref="T:Northwoods.Go.GoLink"/> in the view</returns>
            <remarks>
            By default this just creates a <see cref="P:Northwoods.Go.GoView.NewLinkClass"/> instance
            using <paramref name="fromPort"/> and <paramref name="toPort"/> as the ends of the link.
            The temporary link is added to the default layer of the view, but unlike
            temporary ports, is visible.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoToolLinking.DoLinking(Northwoods.Go.PointF)">
            <summary>
            This method is called by <see cref="M:Northwoods.Go.GoToolLinking.DoMouseMove"/> to find the nearest
            valid port and adjust the temporary link according to where the given point is.
            </summary>
            <param name="dc">a <c>PointF</c> in document coordinates, the mouse position</param>
            <remarks>
            This calls <see cref="M:Northwoods.Go.GoToolLinking.PickNearestPort(Northwoods.Go.PointF)"/> to find the closest valid port
            that we might link to.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoToolLinking.IsValidLink(Northwoods.Go.IGoPort,Northwoods.Go.IGoPort)">
            <summary>
            This predicate is called during the process of finding the nearest port
            that the user can link to.
            </summary>
            <param name="fromPort"></param>
            <param name="toPort"></param>
            <returns>By default this is implemented as <c>fromPort.IsValidLink(toPort)</c></returns>
            <remarks>
            The results of these calls are stored in the <see cref="P:Northwoods.Go.GoToolLinking.ValidPortsCache"/>
            hash table.  The ports are associated with <see cref="F:Northwoods.Go.GoToolLinking.Valid"/> or <see cref="F:Northwoods.Go.GoToolLinking.Invalid"/>
            values depending on whether this predicate returned true or false.
            Note that to check for links from a port to itself, this predicate may
            be called with the same value for both arguments.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoToolLinking.PickNearestPort(Northwoods.Go.PointF)">
            <summary>
            Find the valid document port nearest to a given point.
            </summary>
            <param name="dc">a <c>PointF</c> in document coordinates</param>
            <returns></returns>
            <remarks>
            A nearby port (as determined by the distance between <paramref name="dc"/>
            and the result of <see cref="M:Northwoods.Go.GoToolLinking.PortPoint(Northwoods.Go.IGoPort,Northwoods.Go.PointF)"/>) must be within
            the <see cref="P:Northwoods.Go.GoView.PortGravity"/> distance for it to qualify,
            and it must be in a <see cref="T:Northwoods.Go.GoLayer"/> that is visible.
            This uses the <see cref="M:Northwoods.Go.GoToolLinking.IsValidLink(Northwoods.Go.IGoPort,Northwoods.Go.IGoPort)"/> predicate, passing it the
            <see cref="P:Northwoods.Go.GoToolLinking.OriginalStartPort"/> along with each port to be considered.
            The results of <see cref="M:Northwoods.Go.GoToolLinking.IsValidLink(Northwoods.Go.IGoPort,Northwoods.Go.IGoPort)"/> are cached in <see cref="P:Northwoods.Go.GoToolLinking.ValidPortsCache"/>,
            for the cases where determining valid links is computationally expensive.
            This cache is valid only for the duration of this linking tool as the
            current tool; it is cleared each time this tool is stopped.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoToolLinking.PortPoint(Northwoods.Go.IGoPort,Northwoods.Go.PointF)">
            <summary>
            Return a <c>PointF</c> representing the position of the port.
            </summary>
            <param name="port">an <see cref="T:Northwoods.Go.IGoPort"/> whose distance is being considered</param>
            <param name="dc">the point nearest which we are searching for a port</param>
            <returns>normally, <c>port.GoObject.Center</c></returns>
            <remarks>
            This is called by <see cref="M:Northwoods.Go.GoToolLinking.PickNearestPort(Northwoods.Go.PointF)"/> for each
            port in the document.
            For large ports, if the <paramref name="port"/> is a <see cref="T:Northwoods.Go.GoPort"/>,
            this uses the result of <see cref="M:Northwoods.Go.GoPort.GetLinkPointFromPoint(Northwoods.Go.PointF)"/>, which should
            be more accurate than the center of the port.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoToolLinking.DoNewLink(Northwoods.Go.IGoPort,Northwoods.Go.IGoPort)">
            <summary>
            This is called by <see cref="M:Northwoods.Go.GoToolLinking.DoMouseUp"/> in order to create a new link.
            </summary>
            <param name="fromPort"></param>
            <param name="toPort"></param>
            <remarks>
            This just calls <see cref="M:Northwoods.Go.GoView.CreateLink(Northwoods.Go.IGoPort,Northwoods.Go.IGoPort)"/> and <see cref="M:Northwoods.Go.GoView.RaiseLinkCreated(Northwoods.Go.GoObject)"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoToolLinking.DoNoNewLink(Northwoods.Go.IGoPort,Northwoods.Go.IGoPort)">
            <summary>
            This is called by <see cref="M:Northwoods.Go.GoToolLinking.DoMouseUp"/> or <see cref="M:Northwoods.Go.GoToolLinking.DoCancelMouse"/>
            when no new link was drawn by the user.
            </summary>
            <param name="fromPort"></param>
            <param name="toPort"></param>
        </member>
        <member name="M:Northwoods.Go.GoToolLinking.DoRelink(Northwoods.Go.IGoLink,Northwoods.Go.IGoPort,Northwoods.Go.IGoPort)">
            <summary>
            This is called by <see cref="M:Northwoods.Go.GoToolLinking.DoMouseUp"/> in order to reconnect the existing link.
            </summary>
            <param name="oldlink"></param>
            <param name="fromPort"></param>
            <param name="toPort"></param>
            <remarks>
            This makes sure <paramref name="oldlink"/> refers to <paramref name="fromPort"/>
            and <paramref name="toPort"/> and then calls <see cref="M:Northwoods.Go.GoView.RaiseLinkRelinked(Northwoods.Go.GoObject)"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoToolLinking.DoNoRelink(Northwoods.Go.IGoLink,Northwoods.Go.IGoPort,Northwoods.Go.IGoPort)">
            <summary>
            This is called by <see cref="M:Northwoods.Go.GoToolLinking.DoMouseUp"/> or <see cref="M:Northwoods.Go.GoToolLinking.DoCancelMouse"/>
            when an existing link was purposely not reconnected by the user to any port.
            </summary>
            <param name="oldlink"></param>
            <param name="fromPort"></param>
            <param name="toPort"></param>
            <remarks>
            Because this case effectively results in an object being removed from the
            document, this method calls <see cref="M:Northwoods.Go.GoView.RaiseSelectionDeleting(System.ComponentModel.CancelEventArgs)"/>
            and <see cref="M:Northwoods.Go.GoView.RaiseSelectionDeleted"/>.
            If the <see cref="M:Northwoods.Go.GoView.RaiseSelectionDeleting(System.ComponentModel.CancelEventArgs)"/> event results in
            a cancellation, this calls <see cref="M:Northwoods.Go.GoToolLinking.DoCancelMouse"/> instead of
            removing the link.
            This method does not remove the link if <see cref="M:Northwoods.Go.GoObject.CanDelete"/>
            is false.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoToolLinking.DoCancelRelink(Northwoods.Go.IGoLink,Northwoods.Go.IGoPort,Northwoods.Go.IGoPort)">
            <summary>
            This is called by <see cref="M:Northwoods.Go.GoToolLinking.DoCancelMouse"/> when a relinking was cancelled
            by the user.
            </summary>
            <param name="oldlink"></param>
            <param name="fromPort"></param>
            <param name="toPort"></param>
        </member>
        <member name="F:Northwoods.Go.GoToolLinking.Valid">
            <summary>
            This value associated with a port in the <see cref="P:Northwoods.Go.GoToolLinking.ValidPortsCache"/>
            indicates that it is valid to make a link between <see cref="P:Northwoods.Go.GoToolLinking.OriginalStartPort"/>
            and that port.
            </summary>
            <value>
            <see cref="M:Northwoods.Go.GoToolLinking.PickNearestPort(Northwoods.Go.PointF)"/> calls <see cref="M:Northwoods.Go.GoToolLinking.IsValidLink(Northwoods.Go.IGoPort,Northwoods.Go.IGoPort)"/> with
            <see cref="P:Northwoods.Go.GoToolLinking.OriginalStartPort"/> and each visible port in the document.
            If the predicate returned true, the port is associated with this Valid
            value in the <see cref="P:Northwoods.Go.GoToolLinking.ValidPortsCache"/> hash table.
            </value>
        </member>
        <member name="F:Northwoods.Go.GoToolLinking.Invalid">
            <summary>
            This value associated with a port in the <see cref="P:Northwoods.Go.GoToolLinking.ValidPortsCache"/>
            indicates that it is not valid to make a link between <see cref="P:Northwoods.Go.GoToolLinking.OriginalStartPort"/>
            and that port.
            </summary>
            <value>
            <see cref="M:Northwoods.Go.GoToolLinking.PickNearestPort(Northwoods.Go.PointF)"/> calls <see cref="M:Northwoods.Go.GoToolLinking.IsValidLink(Northwoods.Go.IGoPort,Northwoods.Go.IGoPort)"/> with
            <see cref="P:Northwoods.Go.GoToolLinking.OriginalStartPort"/> and each visible port in the document.
            If the predicate returned false, the port is associated with this Invalid
            value in the <see cref="P:Northwoods.Go.GoToolLinking.ValidPortsCache"/> hash table.
            </value>
        </member>
        <member name="P:Northwoods.Go.GoToolLinking.Forwards">
            <summary>
            Gets or sets whether the user's linking operation started at the "From" port.
            </summary>
            <remarks>
            When this property is true, the <see cref="P:Northwoods.Go.GoToolLinking.OriginalStartPort"/> and
            <see cref="P:Northwoods.Go.GoToolLinking.StartPort"/> ports were or are at the "From" end of the
            <see cref="P:Northwoods.Go.GoToolLinking.Link"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoToolLinking.OriginalStartPort">
            <summary>
            Gets or sets the port from which the user is starting or modifying a link.
            </summary>
            <remarks>
            When creating a new link, the <see cref="T:Northwoods.Go.GoToolLinkingNew"/> tool sets this
            property to the port under the initial mouse point.
            When reconnecting an existing link, the <see cref="T:Northwoods.Go.GoToolRelinking"/> tool
            sets this property to the port at the other end of the link from the resize
            handle that the user is moving.
            This will be a port that already existed in the document prior to the
            linking operation.
            </remarks>
            <seealso cref="P:Northwoods.Go.GoToolLinking.OriginalEndPort"/>
            <seealso cref="P:Northwoods.Go.GoToolLinking.StartPort"/>
            <seealso cref="P:Northwoods.Go.GoToolLinking.Link"/>
        </member>
        <member name="P:Northwoods.Go.GoToolLinking.OriginalEndPort">
            <summary>
            Gets or sets the port at the end of an existing link that is being reconnected.
            </summary>
            <remarks>
            When creating a new link, this property is not relevant.
            When reconnecting an existing link, the <see cref="T:Northwoods.Go.GoToolRelinking"/> tool
            sets this property to the port at the end of the existing link that the
            user is disconnecting from.
            This will be a port that already existed in the document prior to the
            linking operation.
            </remarks>
            <seealso cref="P:Northwoods.Go.GoToolLinking.OriginalStartPort"/>
            <seealso cref="P:Northwoods.Go.GoToolLinking.EndPort"/>
            <seealso cref="P:Northwoods.Go.GoToolLinking.Link"/>
        </member>
        <member name="P:Northwoods.Go.GoToolLinking.StartPort">
            <summary>
            Gets or sets the temporary starting port.
            </summary>
            <remarks>
            When creating a new link or when reconnecting an existing link, the tool
            sets this property to the value of <see cref="M:Northwoods.Go.GoToolLinking.CreateTemporaryPort(Northwoods.Go.IGoPort,Northwoods.Go.PointF,System.Boolean,System.Boolean)"/>.
            This will be a new port that only exists in this view.
            If <see cref="P:Northwoods.Go.GoToolLinking.Forwards"/> is true, this port will correspond to
            the <see cref="P:Northwoods.Go.IGoLink.FromPort"/> of the link; otherwise it will
            correspond to the <see cref="P:Northwoods.Go.IGoLink.ToPort"/>
            </remarks>
            <seealso cref="P:Northwoods.Go.GoToolLinking.EndPort"/>
            <seealso cref="P:Northwoods.Go.GoToolLinking.OriginalStartPort"/>
            <seealso cref="P:Northwoods.Go.GoToolLinking.Link"/>
        </member>
        <member name="P:Northwoods.Go.GoToolLinking.EndPort">
            <summary>
            Gets or sets the temporary ending port.
            </summary>
            <remarks>
            When creating a new link or when reconnecting an existing link, the tool
            sets this property to the value of <see cref="M:Northwoods.Go.GoToolLinking.CreateTemporaryPort(Northwoods.Go.IGoPort,Northwoods.Go.PointF,System.Boolean,System.Boolean)"/>.
            This will be a new port that only exists in this view.
            If <see cref="P:Northwoods.Go.GoToolLinking.Forwards"/> is true, this port will correspond to
            the <see cref="P:Northwoods.Go.IGoLink.ToPort"/> of the link; otherwise it will
            correspond to the <see cref="P:Northwoods.Go.IGoLink.FromPort"/>
            </remarks>
            <seealso cref="P:Northwoods.Go.GoToolLinking.StartPort"/>
            <seealso cref="P:Northwoods.Go.GoToolLinking.OriginalEndPort"/>
            <seealso cref="P:Northwoods.Go.GoToolLinking.Link"/>
        </member>
        <member name="P:Northwoods.Go.GoToolLinking.Link">
            <summary>
            Gets or sets the link that the user is manipulating for this linking operation.
            </summary>
            <remarks>
            When creating a new link, the <see cref="T:Northwoods.Go.GoToolLinkingNew"/> tool sets this
            property to the value of <see cref="M:Northwoods.Go.GoToolLinking.CreateTemporaryLink(Northwoods.Go.IGoPort,Northwoods.Go.IGoPort)"/>, a new link that
            only exists in this view.
            When reconnecting an existing link, the <see cref="T:Northwoods.Go.GoToolRelinking"/> tool
            sets this property to the existing link in the document.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoToolLinking.ValidPortsCache">
            <summary>
            Gets the hashtable of all known ports that are valid for this particular linking operation.
            </summary>
            <remarks>
            This collection is initially empty for each linking operation.
            As the <see cref="M:Northwoods.Go.GoToolLinking.PickNearestPort(Northwoods.Go.PointF)"/> method is called,
            the port is added to this collection, with a value depending on
            whether <see cref="M:Northwoods.Go.GoToolLinking.IsValidLink(Northwoods.Go.IGoPort,Northwoods.Go.IGoPort)"/> returns true.
            The value is <see cref="F:Northwoods.Go.GoToolLinking.Valid"/> if it returned true,
            <see cref="F:Northwoods.Go.GoToolLinking.Invalid"/> if it returned false.
            The cacheing is done because the computation to determine valid links can
            be expensive.
            You can turn off the cacheing by setting this property to null.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoToolLinking.ForwardsOnly">
            <summary>
            Gets or sets whether users must draw their new links starting at the "from" port
            and going to the "to" port.
            </summary>
            <value>
            This value defaults to false, which will allow users to draw links "backwards".
            </value>
        </member>
        <member name="P:Northwoods.Go.GoToolLinking.Orthogonal">
            <summary>
            Gets or sets whether the temporary link is drawn orthogonally.
            </summary>
            <value>
            The default value is false.
            </value>
            <remarks>
            This property is used to initialize the link created by the default
            implementation of <see cref="M:Northwoods.Go.GoToolLinking.CreateTemporaryLink(Northwoods.Go.IGoPort,Northwoods.Go.IGoPort)"/>.
            </remarks>
        </member>
        <member name="T:Northwoods.Go.GoToolLinkingNew">
            <summary>
            The tool used to handle a user's drawing a new link between two ports.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoToolLinkingNew.#ctor(Northwoods.Go.GoView)">
            <summary>
            The standard tool constructor.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Northwoods.Go.GoToolLinkingNew.CanStart">
            <summary>
            The user can draw a new link if the view allows it
            and if the port at the input event point is a valid
            source port or a valid destination port.
            </summary>
            <returns></returns>
            <remarks>
            This calls <see cref="M:Northwoods.Go.GoToolLinking.PickPort(Northwoods.Go.PointF)"/> to find a port
            at the mouse down point.  At least one of the
            <see cref="M:Northwoods.Go.GoToolLinking.IsValidFromPort(Northwoods.Go.IGoPort)"/> and
            <see cref="M:Northwoods.Go.GoToolLinking.IsValidToPort(Northwoods.Go.IGoPort)"/> predicates
            must be true for the linking to start.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoToolLinkingNew.Start">
            <summary>
            This is just a matter of calling <see cref="M:Northwoods.Go.GoToolLinking.StartNewLink(Northwoods.Go.IGoPort,Northwoods.Go.PointF)"/>.
            </summary>
        </member>
        <member name="T:Northwoods.Go.GoToolRelinking">
            <summary>
            The tool used to handle the user's dragging one end of a link in order
            to connect it up to another port.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoToolRelinking.#ctor(Northwoods.Go.GoView)">
            <summary>
            The standard tool constructor.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Northwoods.Go.GoToolRelinking.CanStart">
            <summary>
            The user can relink if the view allows it and if the handle
            found at the input event point has an ID that indicates it
            is relinkable.
            </summary>
            <returns></returns>
            <remarks>
            This calls <see cref="M:Northwoods.Go.GoToolRelinking.PickRelinkHandle(Northwoods.Go.PointF)"/> to find a handle.
            The <see cref="P:Northwoods.Go.IGoHandle.HandleID"/> should be either
            <see cref="F:Northwoods.Go.GoLink.RelinkableFromHandle"/> or
            <see cref="F:Northwoods.Go.GoLink.RelinkableToHandle"/>.  The ID also
            determines which end of the link is disconnected; the
            original port at the disconnected end is remembered as
            the <see cref="P:Northwoods.Go.GoToolLinking.OriginalEndPort"/> property.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoToolRelinking.Start">
            <summary>
            Start relinking by by calling <see cref="M:Northwoods.Go.GoToolLinking.StartRelink(Northwoods.Go.IGoLink,Northwoods.Go.IGoPort,Northwoods.Go.PointF)"/>
            and hiding any selection handles for the link.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoToolRelinking.PickRelinkHandle(Northwoods.Go.PointF)">
            <summary>
            Find a resize handle at the given point.
            </summary>
            <param name="dc">a <c>PointF</c> in document coordinates</param>
            <returns>an <see cref="T:Northwoods.Go.IGoHandle"/> resize handle</returns>
        </member>
        <member name="M:Northwoods.Go.GoToolRelinking.Stop">
            <summary>
            Restore the selection handles on the link.
            </summary>
        </member>
        <member name="T:Northwoods.Go.GoToolManager">
            <summary>
            The tool, normally the default tool for a view, used to handle input and
            decide if any other tools would be appropriate as the view's current tool.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoToolManager.#ctor(Northwoods.Go.GoView)">
            <summary>
            The standard tool constructor.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Northwoods.Go.GoToolManager.Stop">
            <summary>
            Set the <see cref="P:Northwoods.Go.GoToolManager.Started"/> property to false.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoToolManager.DoMouseDown">
            <summary>
            Search <see cref="P:Northwoods.Go.GoView.MouseDownTools"/> for the first tool that we can start;
            if we find one, we start it by making it the view's current <see cref="P:Northwoods.Go.GoView.Tool"/>.
            </summary>
            <remarks>
            This sets the <see cref="P:Northwoods.Go.GoToolManager.Started"/> property to true if we did not find a startable
            tool, so that later searches for tools in the <see cref="M:Northwoods.Go.GoToolManager.DoMouseMove"/> and
            <see cref="M:Northwoods.Go.GoToolManager.DoMouseUp"/> methods can proceed.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoToolManager.DoMouseMove">
            <summary>
            Search <see cref="P:Northwoods.Go.GoView.MouseMoveTools"/> for the first tool that we can start;
            if we find one, we start it by making it the view's current <see cref="P:Northwoods.Go.GoView.Tool"/>.
            </summary>
            <remarks>
            This implementation does not do the search when <see cref="P:Northwoods.Go.GoToolManager.Started"/> is false,
            presumably because of a mouse motion without a mouse down in this view.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoToolManager.DoMouseUp">
            <summary>
            Search <see cref="P:Northwoods.Go.GoView.MouseUpTools"/> for the first tool that we can start;
            if we find one, we start it by making it the view's current <see cref="P:Northwoods.Go.GoView.Tool"/>.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoToolManager.DoMouseWheel">
            <summary>
            When there are no other tools running, a mouse wheel event scrolls or zooms
            the view by calling <see cref="M:Northwoods.Go.GoView.DoWheel(Northwoods.Go.GoInputEventArgs)"/>.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoToolManager.DoKeyDown">
            <summary>
            Provide default behavior, when not running some other tool.
            </summary>
            <remarks>
            By default this handles:
            <list type="bullet">
            <item>Delete: the Delete key deletes the current selection</item>
            <item>Select All: Ctrl-A selects all selectable document objects</item>
            <item>Copy, Cut, Paste: The Ctrl-C, Ctrl-X, and Ctrl-V keys do the standard clipboard operations</item>
            <item>Edit: the F2 key starts in-place editing of the current node's text label</item>
            <item>PageDown, PageUp: The PageDown and PageUp keys scroll vertically; Shift-PageDown and Shift-PageUp
            scroll horizontally</item>
            <item>Home, End: the Home and End keys scroll to the left side and right sides of the document;
            Ctrl-Home and Ctrl-End scroll to the top-left and bottom-right corners of the document, respectively</item>
            <item>Undo, Redo: Ctrl-Z and Ctrl-Y perform undo and redo</item>
            <item>Escape: the Escape key cancels the current input operation</item>
            <item>letters and digits: selects the next node whose text starts with that character</item>
            </list>
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoToolManager.Started">
            <summary>
            Gets or sets whether we have performed a mouse down as part of a mouse down-move-up gesture.
            </summary>
            <remarks>
            This property is initially false.
            It is set to true after all of the <see cref="P:Northwoods.Go.GoView.MouseDownTools"/> have had 
            <see cref="M:Northwoods.Go.IGoTool.CanStart"/> return false.
            This property helps avoid any tool behavior where the mouse down actually occurred
            in a different window.
            </remarks>
        </member>
        <member name="T:Northwoods.Go.GoToolPanning">
            <summary>
            This tool manages panning in a view by remembering an initial
            panning point and autoscrolling the view in the direction of the
            current mouse point relative to the original panning point.
            </summary>
            <remarks>
            This tool can be used in either a modal or a mode-less manner.
            To use modally, where the first mouse click will establish the
            panning origin, mouse moves determine autopanning direction
            and speed, and the second mouse up will stop the tool:
            <code>
              aView.Tool = new GoToolPanning(aView);
            </code>
            If you set the <see cref="P:Northwoods.Go.GoToolPanning.Origin"/> before the tool starts,
            the first mouse click is not needed.
            <code>
              GoToolPanning tool = new GoToolPanning(aView);
              tool.Origin = aView.LastInput.ViewPoint;  // or another point in the view
              aView.Tool = tool;
            </code>
            <para>
            It is started mode-lessly when the user presses the middle
            mouse button, which is normally the mouse wheel.  An instance
            of this tool is in the <see cref="P:Northwoods.Go.GoView.MouseDownTools"/> list.
            </para>
            <para>
            However, in ASP.NET WebForms, the panning gesture consists of
            only a single mouse-down, drag, mouse-up.  Since mouse moves
            are only simulated on WebForms, and auto-panning is not
            possible with no mouse time information,
            a simpler gesture is easier to use.  This results in just a
            single scroll, according to the distance and direction
            between the <c>FirstInput.ViewPoint</c> and <c>LastInput.ViewPoint</c>.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoToolPanning.#ctor(Northwoods.Go.GoView)">
            <summary>
            The standard tool constructor.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Northwoods.Go.GoToolPanning.CanStart">
            <summary>
            This tool can start when the middle mouse button is pressed.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.GoToolPanning.Start">
            <summary>
            Initialize this tool.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoToolPanning.Stop">
            <summary>
            Stop any auto-panning in the view and remove the original panning point marker.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoToolPanning.DoMouseMove">
            <summary>
            Call <see cref="M:Northwoods.Go.GoView.DoAutoPan(System.Drawing.Point,System.Drawing.Point)"/> to pan the view according to
            the current mouse point relative to the <see cref="P:Northwoods.Go.GoToolPanning.Origin"/>.
            </summary>
            <remarks>
            Until the <see cref="P:Northwoods.Go.GoToolPanning.Origin"/> panning point is set, this method
            does nothing.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoToolPanning.DoMouseUp">
            <summary>
            On the first mouse up, set the <see cref="P:Northwoods.Go.GoToolPanning.Origin"/> point and display
            the panning origin marker; on the second second mouse up, stop this tool.
            </summary>
            <remarks>
            If the <see cref="P:Northwoods.Go.GoToolPanning.Origin"/> has already been set, a mouse up just
            stops this tool.
            For WebForms, the behavior is different--this method always sets
            the <see cref="P:Northwoods.Go.GoToolPanning.Origin"/> to the <c>FirstInput.ViewPoint</c>,
            scrolls the view according to <see cref="M:Northwoods.Go.GoView.ComputeAutoPanDocPosition(System.Drawing.Point,System.Drawing.Point)"/>,
            and then stops this tool.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoToolPanning.DoMouseWheel">
            <summary>
            Stop panning whenever the mouse wheel turns.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoToolPanning.DoKeyDown">
            <summary>
            Stop panning whenever any key is pressed.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoToolPanning.Origin">
            <summary>
            Gets or sets the original panning point.
            </summary>
            <value>
            This is a point in view coordinates.
            It is set on the first mouse up.
            Once this value is set, mouse moves cause
            </value>
        </member>
        <member name="T:Northwoods.Go.GoToolResizing">
            <summary>
            The tool used to handle the user's resize operation.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoToolResizing.#ctor(Northwoods.Go.GoView)">
            <summary>
            The standard tool constructor.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Northwoods.Go.GoToolResizing.CanStart">
            <summary>
            We can start the resize tool when there is a resize handle
            under the mouse and the user may resize it.
            </summary>
            <returns></returns>
            <remarks>
            The view must permit user resizing.
            <see cref="M:Northwoods.Go.GoToolResizing.PickResizeHandle(Northwoods.Go.PointF)"/> is called to determine if there
            is a handle at the first input event point.  If there is such
            a handle, and if its <see cref="P:Northwoods.Go.IGoHandle.HandledObject"/>'s
            <see cref="M:Northwoods.Go.GoObject.CanResize"/> predicate returns true, then
            we can start resizing.
            The user cannot resize using the context menu mouse button.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoToolResizing.Start">
            <summary>
            Start up the resize tool, assuming <see cref="M:Northwoods.Go.GoToolResizing.CanStart"/> returned true.
            </summary>
            <remarks>
            This sets the <see cref="P:Northwoods.Go.GoTool.CurrentObject"/> to be the
            <see cref="P:Northwoods.Go.IGoHandle.HandledObject"/> of the handle returned by
            <see cref="M:Northwoods.Go.GoToolResizing.PickResizeHandle(Northwoods.Go.PointF)"/>.
            It starts a transaction, hides any selection handles for the current
            object, and remembers the object's <see cref="P:Northwoods.Go.GoToolResizing.OriginalBounds"/> and
            the handle's <see cref="P:Northwoods.Go.GoToolResizing.OriginalPoint"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoToolResizing.Stop">
            <summary>
            Clean up this resizing tool's state.
            </summary>
            <remarks>
            This removes any visible resize box, restores the selection handles if needed,
            and stops the transaction (either aborting or finishing it).
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoToolResizing.DoMouseMove">
            <summary>
            Just call <see cref="M:Northwoods.Go.GoToolResizing.DoResizing(Northwoods.Go.GoInputState)"/>.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoToolResizing.DoMouseUp">
            <summary>
            Just call <see cref="M:Northwoods.Go.GoToolResizing.DoResizing(Northwoods.Go.GoInputState)"/> for the last time and finish the resize transaction.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoToolResizing.DoCancelMouse">
            <summary>
            Cancelling a resize operation causes the current object's <see cref="M:Northwoods.Go.GoObject.DoResize(Northwoods.Go.GoView,System.Drawing.RectangleF,Northwoods.Go.PointF,System.Int32,Northwoods.Go.GoInputState,System.Drawing.SizeF,System.Drawing.SizeF)"/>
            method to be called with the <see cref="P:Northwoods.Go.GoToolResizing.OriginalBounds"/> and <see cref="P:Northwoods.Go.GoToolResizing.OriginalPoint"/>.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoToolResizing.PickResizeHandle(Northwoods.Go.PointF)">
            <summary>
            Find a resize handle in the view at the given point.
            </summary>
            <param name="dc">a <c>PointF</c> in document coordinates</param>
            <returns>an <see cref="T:Northwoods.Go.IGoHandle"/>, usually a <see cref="T:Northwoods.Go.GoHandle"/></returns>
        </member>
        <member name="M:Northwoods.Go.GoToolResizing.DoResizing(Northwoods.Go.GoInputState)">
            <summary>
            This is called while the user is dragging the mouse and when the user releases the mouse.
            </summary>
            <param name="evttype"></param>
            <remarks>
            Basically this just calls <see cref="M:Northwoods.Go.GoObject.DoResize(Northwoods.Go.GoView,System.Drawing.RectangleF,Northwoods.Go.PointF,System.Int32,Northwoods.Go.GoInputState,System.Drawing.SizeF,System.Drawing.SizeF)"/> on the
            <see cref="P:Northwoods.Go.GoTool.CurrentObject"/>.  Objects are responsible for their
            own resize behavior.
            However, this takes <see cref="P:Northwoods.Go.GoView.GridSnapResize"/> into account,
            adjusting the input event point as needed to the value of
            <see cref="M:Northwoods.Go.GoView.FindNearestGridPoint(Northwoods.Go.PointF)"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoToolResizing.ResizeHandle">
            <summary>
            Gets or sets the handle with which the user is performing a resize.
            </summary>
            <seealso cref="T:Northwoods.Go.GoHandle"/>
        </member>
        <member name="P:Northwoods.Go.GoToolResizing.OriginalBounds">
            <summary>
            Gets or sets the initial bounding rectangle of the resize handle's handled object.
            </summary>
            <value>
            This <c>RectangleF</c> value is in document coordinates.
            </value>
            <remarks>
            <see cref="M:Northwoods.Go.GoToolResizing.DoCancelMouse"/> uses this information to invoke
            <see cref="M:Northwoods.Go.GoObject.DoResize(Northwoods.Go.GoView,System.Drawing.RectangleF,Northwoods.Go.PointF,System.Int32,Northwoods.Go.GoInputState,System.Drawing.SizeF,System.Drawing.SizeF)"/> with the original bounds.
            </remarks>
            <seealso cref="P:Northwoods.Go.GoToolResizing.ResizeHandle"/>
            <seealso cref="P:Northwoods.Go.GoToolResizing.OriginalPoint"/>
            <seealso cref="P:Northwoods.Go.GoHandle.HandledObject"/>
        </member>
        <member name="P:Northwoods.Go.GoToolResizing.OriginalPoint">
            <summary>
            Gets or sets the initial center of the resize handle.
            </summary>
            <value>
            This <c>PointF</c> value is in document coordinates.
            </value>
            <remarks>
            <see cref="M:Northwoods.Go.GoToolResizing.DoCancelMouse"/> uses this information to invoke
            <see cref="M:Northwoods.Go.GoObject.DoResize(Northwoods.Go.GoView,System.Drawing.RectangleF,Northwoods.Go.PointF,System.Int32,Northwoods.Go.GoInputState,System.Drawing.SizeF,System.Drawing.SizeF)"/> with the original point.
            </remarks>
            <seealso cref="P:Northwoods.Go.GoToolResizing.ResizeHandle"/>
            <seealso cref="P:Northwoods.Go.GoToolResizing.OriginalBounds"/>
            <seealso cref="T:Northwoods.Go.GoHandle"/>
        </member>
        <member name="P:Northwoods.Go.GoToolResizing.MinimumSize">
            <summary>
            Gets or sets the minimum size that the user may resize to.
            </summary>
            <value>
            This is initially a 1x1 <c>SizeF</c> value, thus preventing the user from
            making zero either the width or the height.
            </value>
            <remarks>
            This minimum size is passed to <see cref="M:Northwoods.Go.GoObject.DoResize(Northwoods.Go.GoView,System.Drawing.RectangleF,Northwoods.Go.PointF,System.Int32,Northwoods.Go.GoInputState,System.Drawing.SizeF,System.Drawing.SizeF)"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoToolResizing.MaximumSize">
            <summary>
            Gets or sets the maximum size that the user may resize to.
            </summary>
            <value>
            This is initially a huge value, which should place no constraint on the user.
            </value>
            <remarks>
            This maximum size is passed to <see cref="M:Northwoods.Go.GoObject.DoResize(Northwoods.Go.GoView,System.Drawing.RectangleF,Northwoods.Go.PointF,System.Int32,Northwoods.Go.GoInputState,System.Drawing.SizeF,System.Drawing.SizeF)"/>.
            </remarks>
        </member>
        <member name="T:Northwoods.Go.GoToolRubberBanding">
            <summary>
            The tool used to handle a user's background drag to do a multiple selection.
            </summary>
            <remarks>
            No transaction is performed by this tool, although it is possible
            (but unconventional) that <see cref="M:Northwoods.Go.GoToolRubberBanding.DoRubberBand(System.Drawing.Rectangle)"/> might be
            overridden to perform one.
            This tool is normally used as a modeless tool, one of the view's mouse tools,
            that can be started upon a mouse move (<see cref="P:Northwoods.Go.GoView.MouseMoveTools"/>).
            When the <see cref="P:Northwoods.Go.GoToolRubberBanding.Modal"/> property is set to true,
            this tool waits for a mouse down at which <see cref="M:Northwoods.Go.GoToolRubberBanding.CanStart"/>
            returns true before drawing the rubber-band box.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoToolRubberBanding.#ctor(Northwoods.Go.GoView)">
            <summary>
            The standard tool constructor.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Northwoods.Go.GoToolRubberBanding.CanStart">
            <summary>
            This tool can start if the user can select objects in this view and the
            input event point is not over a selectable document object.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.GoToolRubberBanding.Stop">
            <summary>
            Remove the rubber band box from the view.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoToolRubberBanding.DoMouseDown">
            <summary>
            This starts keeping track of the <see cref="P:Northwoods.Go.GoToolRubberBanding.Box"/>'s bounds.
            </summary>
            <remarks>
            Unless the <see cref="P:Northwoods.Go.GoInputEventArgs.Shift"/> modifier is true,
            we also clear the view's selection.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoToolRubberBanding.DoMouseMove">
            <summary>
            As the mouse is dragged, we display the rubber band box.
            </summary>
            <remarks>
            If <see cref="P:Northwoods.Go.GoToolRubberBanding.Modal"/> is true, we skip all mouse moves and mouse ups
            until a mouse down occurs when <see cref="M:Northwoods.Go.GoToolRubberBanding.CanStart"/> returns true.
            If <see cref="P:Northwoods.Go.GoToolRubberBanding.Modal"/> is false, a mouse move starts keeping track
            of the rubber-band <see cref="P:Northwoods.Go.GoToolRubberBanding.Box"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoToolRubberBanding.DoMouseUp">
            <summary>
            When the mouse is released, we remove the rubber band box, call <see cref="M:Northwoods.Go.GoToolRubberBanding.DoRubberBand(System.Drawing.Rectangle)"/>,
            and stop this tool if <see cref="P:Northwoods.Go.GoToolRubberBanding.Modal"/> is false.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoToolRubberBanding.ComputeRubberBandBox">
            <summary>
            This method is called to compute the latest bounds of the <see cref="P:Northwoods.Go.GoToolRubberBanding.Box"/>.
            </summary>
            <returns>a <c>Rectangle</c> in view coordinates</returns>
        </member>
        <member name="M:Northwoods.Go.GoToolRubberBanding.DoRubberBand(System.Drawing.Rectangle)">
            <summary>
            This method is called as part of the mouse up event, normally to select
            the objects within the <paramref name="box"/>.
            </summary>
            <param name="box">a <c>Rectangle</c> describing what the user outlined, in view coordinates</param>
            <remarks>
            By default this will call <see cref="M:Northwoods.Go.GoView.SelectInRectangle(System.Drawing.RectangleF)"/>, after converting
            the <paramref name="box"/> into document coordinates.
            If the box is too small in width and height, this acts like a normal mouse click instead.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoToolRubberBanding.Box">
            <summary>
            Gets or sets the rectangle that the user has drawn so far.
            </summary>
            <value>
            This <c>Rectangle</c> is in view coordinates.
            You should call <see cref="M:Northwoods.Go.GoView.ConvertViewToDoc(System.Drawing.Point)"/> to convert
            these view coordinates into document coordinates so that you can
            select any objects within the rectangle corresponding to this box.
            It is initially a zero size rectangle at the mouse down point.
            </value>
            <remarks>
            This is normally set to the value last computed by <see cref="M:Northwoods.Go.GoToolRubberBanding.ComputeRubberBandBox"/>.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoToolRubberBanding.DoRubberBand(System.Drawing.Rectangle)"/>
        </member>
        <member name="P:Northwoods.Go.GoToolRubberBanding.Modal">
            <summary>
            Gets or sets whether this tool should wait for a mouse-down before
            drawing a rubber-band box.
            </summary>
            <value>
            The default value is false.
            </value>
        </member>
        <member name="T:Northwoods.Go.GoToolSelecting">
            <summary>
            This tool, normally the last tool considered by the tool manager,
            handles a possible change of selection by the user.
            </summary>
            <remarks>
            This tool assumes it is being invoked due to a mouse up, so
            it need not expect any additional mouse events.
            In other words, it is expected to be used modelessly, as one of the
            <see cref="P:Northwoods.Go.GoView.MouseUpTools"/>.
            No transaction is performed by this tool, although it is possible
            (but unconventional) that selecting an object or clicking on it
            might perform one.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoToolSelecting.#ctor(Northwoods.Go.GoView)">
            <summary>
            The standard tool constructor.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Northwoods.Go.GoToolSelecting.Start">
            <summary>
            This very simple tool just tries to select something at the last mouse point
            and tries to click on it.
            </summary>
            <remarks>
            This assumes the last mouse input state is such that calling <see cref="M:Northwoods.Go.GoTool.DoSelect(Northwoods.Go.GoInputEventArgs)"/>
            is appropriate--this would normally be on mouse up, when no other tool was applicable.
            </remarks>
        </member>
        <member name="T:Northwoods.Go.GoToolZooming">
            <summary>
            This tool handles a user's drag in the background to draw a rubber-band box
            to specify a new document position and scale for a view.
            </summary>
            <remarks>
            The <see cref="P:Northwoods.Go.GoToolZooming.ZoomedView"/> value is the <see cref="T:Northwoods.Go.GoView"/> that is
            manipulated by this tool.  The rubber-band box that the user can draw is
            constrained to have the same aspect ratio as the <see cref="P:Northwoods.Go.GoToolZooming.ZoomedView"/>'s
            <see cref="P:Northwoods.Go.GoView.DisplayRectangle"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoToolZooming.#ctor(Northwoods.Go.GoView)">
            <summary>
            The standard tool constructor.
            </summary>
            <param name="v"></param>
        </member>
        <member name="M:Northwoods.Go.GoToolZooming.CanStart">
            <summary>
            Allow this tool to start if the user isn't using the context button
            and if the mouse isn't over an object in the document.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.GoToolZooming.ComputeRubberBandBox">
            <summary>
            Make the box keep the aspect ratio of the observed view.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.GoToolZooming.DoRubberBand(System.Drawing.Rectangle)">
            <summary>
            Instead of selecting objects within a rectangle, change the <see cref="P:Northwoods.Go.GoToolZooming.ZoomedView"/>'s
            <see cref="P:Northwoods.Go.GoView.DocPosition"/> and <see cref="P:Northwoods.Go.GoView.DocScale"/> to match the
            given <paramref name="box"/> within this view.
            </summary>
            <param name="box">a rectangle whose aspect ratio matches the
            <see cref="P:Northwoods.Go.GoToolZooming.ZoomedView"/>'s, and whose width and height are at least 4.</param>
        </member>
        <member name="P:Northwoods.Go.GoToolZooming.ZoomedView">
            <summary>
            Gets the view whose aspect ratio we want to maintain when drawing a zoom region,
            and whose document position and scale will be adjusted on a mouse up.
            </summary>
            <value>
            The initial value is the same as <see cref="P:Northwoods.Go.GoTool.View"/>.
            </value>
        </member>
        <member name="T:Northwoods.Go.GoChangedEventHandler">
            <summary>
            Represents methods that handle <see cref="T:Northwoods.Go.GoChangedEventArgs"/>.
            </summary>
        </member>
        <member name="T:Northwoods.Go.GoChangedEventArgs">
            <summary>
            Holds information both for <see cref="E:Northwoods.Go.GoDocument.Changed"/> events and 
            for undo and redo handling in the undo manager.
            </summary>
            <seealso cref="E:Northwoods.Go.GoView.DocumentChanged"/>
        </member>
        <member name="T:Northwoods.Go.IGoUndoableEdit">
            <summary>
            This interface specifies how a document change (an edit) can be
            managed by the UndoManager.
            </summary>
        </member>
        <member name="M:Northwoods.Go.IGoUndoableEdit.Clear">
            <summary>
            Forget about any state remembered in this edit.
            </summary>
        </member>
        <member name="M:Northwoods.Go.IGoUndoableEdit.CanUndo">
            <summary>
            Determine if this edit is ready to be and can be undone.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.IGoUndoableEdit.Undo">
            <summary>
            Restore the previous state of this edit.
            </summary>
        </member>
        <member name="M:Northwoods.Go.IGoUndoableEdit.CanRedo">
            <summary>
            Determine if this edit is ready to be and can be redone.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.IGoUndoableEdit.Redo">
            <summary>
            Restore the new state of this edit after having been undone.
            </summary>
        </member>
        <member name="P:Northwoods.Go.IGoUndoableEdit.PresentationName">
            <summary>
            Gets the user-visible string description of this undoable edit.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoChangedEventArgs.#ctor">
            <summary>
            The constructor produces an empty object, describing no event.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoChangedEventArgs.#ctor(Northwoods.Go.GoChangedEventArgs)">
            <summary>
            This copy constructor makes a copy of the argument object.
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:Northwoods.Go.GoChangedEventArgs.ToString">
            <summary>
            Produce a description that may be useful in debugging event handling and the undo manager.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.GoChangedEventArgs.Clear">
            <summary>
            Forget any references that this object may have.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoChangedEventArgs.CanUndo">
            <summary>
            This predicate returns true if you can call <see cref="M:Northwoods.Go.GoChangedEventArgs.Undo"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.GoChangedEventArgs.Undo">
            <summary>
            Reverse the effects of this document change
            by calling <see cref="M:Northwoods.Go.GoDocument.ChangeValue(Northwoods.Go.GoChangedEventArgs,System.Boolean)"/>.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoChangedEventArgs.CanRedo">
            <summary>
            This predicate returns true if you can call <see cref="M:Northwoods.Go.GoChangedEventArgs.Redo"/>.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.GoChangedEventArgs.Redo">
            <summary>
            Re-perform the document change after an <see cref="M:Northwoods.Go.GoChangedEventArgs.Undo"/>
            by calling <see cref="M:Northwoods.Go.GoDocument.ChangeValue(Northwoods.Go.GoChangedEventArgs,System.Boolean)"/>.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoChangedEventArgs.FindBeforeChangingEdit">
            <summary>
            Search for a <see cref="T:Northwoods.Go.GoChangedEventArgs"/> that matches this
            one's <see cref="P:Northwoods.Go.GoChangedEventArgs.Document"/>, <see cref="P:Northwoods.Go.GoChangedEventArgs.Hint"/>, <see cref="P:Northwoods.Go.GoChangedEventArgs.SubHint"/>,
            and <see cref="P:Northwoods.Go.GoChangedEventArgs.Object"/>, and whose <see cref="P:Northwoods.Go.GoChangedEventArgs.IsBeforeChanging"/>
            property is true.
            </summary>
            <returns></returns>
            <remarks>
            The assumption is that there are always pairs of calls to
            <see cref="M:Northwoods.Go.GoDocument.RaiseChanging(System.Int32,System.Int32,System.Object)"/> and <see cref="M:Northwoods.Go.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/>,
            resulting in pairs of <see cref="T:Northwoods.Go.GoChangedEventArgs"/>.
            This method is not called except when <see cref="M:Northwoods.Go.GoDocument.RaiseChanging(System.Int32,System.Int32,System.Object)"/>
            should have produced recently a <see cref="P:Northwoods.Go.GoChangedEventArgs.IsBeforeChanging"/> event args.
            This searches <see cref="P:Northwoods.Go.GoUndoManager.CurrentEdit"/> backwards.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoChangedEventArgs.GetInt(System.Boolean)">
            <summary>
            If <paramref name="undo"/> is true, this returns <see cref="P:Northwoods.Go.GoChangedEventArgs.OldInt"/>,
            otherwise it returns <see cref="P:Northwoods.Go.GoChangedEventArgs.NewInt"/>.
            </summary>
            <param name="undo"></param>
            <returns>An <c>int</c></returns>
        </member>
        <member name="M:Northwoods.Go.GoChangedEventArgs.GetValue(System.Boolean)">
            <summary>
            If <paramref name="undo"/> is true, this returns <see cref="P:Northwoods.Go.GoChangedEventArgs.OldValue"/>,
            otherwise it returns <see cref="P:Northwoods.Go.GoChangedEventArgs.NewValue"/>.
            </summary>
            <param name="undo"></param>
            <returns>An <c>Object</c></returns>
        </member>
        <member name="M:Northwoods.Go.GoChangedEventArgs.GetRect(System.Boolean)">
            <summary>
            If <paramref name="undo"/> is true, this returns <see cref="P:Northwoods.Go.GoChangedEventArgs.OldRect"/>,
            otherwise it returns <see cref="P:Northwoods.Go.GoChangedEventArgs.NewRect"/>.
            </summary>
            <param name="undo"></param>
            <returns>A <c>RectangleF</c></returns>
        </member>
        <member name="M:Northwoods.Go.GoChangedEventArgs.GetFloat(System.Boolean)">
            <summary>
            If <paramref name="undo"/> is true, this returns the <c>X</c> part of <see cref="P:Northwoods.Go.GoChangedEventArgs.OldRect"/>,
            otherwise it returns the <c>X</c> part of <see cref="P:Northwoods.Go.GoChangedEventArgs.NewRect"/>.
            </summary>
            <param name="undo"></param>
            <returns>A <c>float</c></returns>
        </member>
        <member name="M:Northwoods.Go.GoChangedEventArgs.GetPoint(System.Boolean)">
            <summary>
            If <paramref name="undo"/> is true, this returns the <c>Location</c> part of <see cref="P:Northwoods.Go.GoChangedEventArgs.OldRect"/>,
            otherwise it returns the <c>Location</c> part of <see cref="P:Northwoods.Go.GoChangedEventArgs.NewRect"/>.
            </summary>
            <param name="undo"></param>
            <returns>A <c>PointF</c></returns>
        </member>
        <member name="M:Northwoods.Go.GoChangedEventArgs.GetSize(System.Boolean)">
            <summary>
            If <paramref name="undo"/> is true, this returns the <c>Size</c> part of <see cref="P:Northwoods.Go.GoChangedEventArgs.OldRect"/>,
            otherwise it returns the <c>Size</c> part of <see cref="P:Northwoods.Go.GoChangedEventArgs.NewRect"/>.
            </summary>
            <param name="undo"></param>
            <returns>A <c>SizeF</c></returns>
        </member>
        <member name="P:Northwoods.Go.GoChangedEventArgs.PresentationName">
            <summary>
            Gets the user-visible string description of this undoable edit.
            </summary>
            <remarks>
            Currently this is just the hint number, as a string.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoChangedEventArgs.IsBeforeChanging">
            <summary>
            Gets or sets whether this event args/undoable edit was created by 
            a document Changed event that represents a call to
            <see cref="M:Northwoods.Go.GoDocument.RaiseChanging(System.Int32,System.Int32,System.Object)"/> or by a call to
            <see cref="M:Northwoods.Go.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/>.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoChangedEventArgs.Document">
            <summary>
            Gets or sets the document that raised the Changed event described
            by this <c>EventArgs</c>.
            </summary>
            <remarks>
            This value must be the same as the <see cref="T:Northwoods.Go.GoDocument"/> <c>sender</c>
            of a <see cref="E:Northwoods.Go.GoDocument.Changed"/> event.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoChangedEventArgs.Hint">
            <summary>
            Gets or sets the general category of document Changed event.
            </summary>
            <remarks>
            Predefined GoDocument, GoLayerCollection, and GoLayer hints
            range from zero to one thousand.
            One frequently used hint is <see cref="F:Northwoods.Go.GoLayer.ChangedObject"/>,
            which uses many different subhints describing the individual
            <see cref="P:Northwoods.Go.GoChangedEventArgs.GoObject"/> changes.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoChangedEventArgs.SubHint">
            <summary>
            Gets or sets the more detailed kind of document Changed event, depending
            on the particular <see cref="P:Northwoods.Go.GoChangedEventArgs.Hint"/> value.
            </summary>
            <remarks>
            This property is commonly used to describe changes to individual objects,
            for example, <see cref="!:GoObject.ChangedBounds"/>.  However other
            <see cref="P:Northwoods.Go.GoChangedEventArgs.Hint"/> values may use this <c>SubHint</c> property for
            additional disambiguation too.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoChangedEventArgs.Object">
            <summary>
            Gets or sets the object that was changed by the document Changed event.
            </summary>
            <remarks>
            This may be null when the <see cref="P:Northwoods.Go.GoChangedEventArgs.Hint"/> implies the object, such
            as for property changes on the document itself.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoChangedEventArgs.GoObject">
            <summary>
            Gets the <see cref="P:Northwoods.Go.GoChangedEventArgs.Object"/> as a <see cref="P:Northwoods.Go.GoChangedEventArgs.GoObject"/>.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoChangedEventArgs.OldInt">
            <summary>
            Gets or sets the previous or old integer value information for a change.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoChangedEventArgs.OldValue">
            <summary>
            Gets or sets the previous or old arbitrary object value information
            for a change.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoChangedEventArgs.OldRect">
            <summary>
            Gets or sets the previous or old float, PositionF, SizeF, or RectangleF
            value information for a change.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoChangedEventArgs.NewInt">
            <summary>
            Gets or sets the new integer value information for a change.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoChangedEventArgs.NewValue">
            <summary>
            Gets or sets the new arbitrary object value information for a change.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoChangedEventArgs.NewRect">
            <summary>
            Gets or sets the new float, PositionF, SizeF, or RectangleF value
            information for a change.
            </summary>
        </member>
        <member name="T:Northwoods.Go.GoCollection">
            <summary>
            This default implementation of <see cref="T:Northwoods.Go.IGoCollection"/> just
            uses an <c>ArrayList</c>.
            </summary>
            <remarks>
            This is a generic implementation of a collection of <see cref="T:Northwoods.Go.GoObject"/>s.
            It does not raise any <see cref="T:Northwoods.Go.GoDocument"/> <c>Changed</c> events as
            objects are added or removed from this collection.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoCollection.#ctor">
            <summary>
            Create an empty collection of <see cref="T:Northwoods.Go.GoObject"/>s.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoCollection.Add(Northwoods.Go.GoObject)">
            <summary>
            Add an object to this collection.
            </summary>
            <param name="obj"></param>
            <remarks>
            Duplicates are not allowed.
            </remarks>
            <seealso cref="M:Northwoods.Go.IGoCollection.Add(Northwoods.Go.GoObject)"/>
        </member>
        <member name="M:Northwoods.Go.GoCollection.Remove(Northwoods.Go.GoObject)">
            <summary>
            Remove any occurrence of an object from this collection.
            </summary>
            <param name="obj"></param>
            <remarks>
            If this collection does not contain the object, nothing happens.
            </remarks>
            <seealso cref="M:Northwoods.Go.IGoCollection.Remove(Northwoods.Go.GoObject)"/>
        </member>
        <member name="M:Northwoods.Go.GoCollection.Contains(Northwoods.Go.GoObject)">
            <summary>
            Determine if the given object is present in this collection.
            </summary>
            <param name="obj"></param>
            <returns></returns>
            <seealso cref="M:Northwoods.Go.IGoCollection.Contains(Northwoods.Go.GoObject)"/>
        </member>
        <member name="M:Northwoods.Go.GoCollection.Clear">
            <summary>
            Remove all of the objects in this collection.
            </summary>
            <seealso cref="M:Northwoods.Go.IGoCollection.Clear"/>
        </member>
        <member name="M:Northwoods.Go.GoCollection.CopyArray">
            <summary>
            Returns a newly allocated array of all of the GoObjects in the collection.
            </summary>
            <seealso cref="M:Northwoods.Go.IGoCollection.CopyArray"/>
        </member>
        <member name="M:Northwoods.Go.GoCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copy references to all of the objects in this collection into an array.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Northwoods.Go.GoCollection.CopyTo(Northwoods.Go.GoObject[],System.Int32)">
            <summary>
            Copy references to all of the objects in this collection into an array.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Northwoods.Go.GoCollection.GetEnumerator">
            <summary>
            Gets an enumerator for iterating over the GoObjects in this collection.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoCollection.IsEmpty">
            <summary>
            This predicate is true when there are no objects in this collection.
            </summary>
            <seealso cref="P:Northwoods.Go.IGoCollection.IsEmpty"/>
        </member>
        <member name="P:Northwoods.Go.GoCollection.Count">
            <summary>
            Gets the number of objects in this collection.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoCollection.IsSynchronized">
            <summary>
            Gets whether this collection of objects is thread-safe.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoCollection.SyncRoot">
            <summary>
            Gets an object to be used for synchronizing access to this collection.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoCollection.Backwards">
            <summary>
            Gets an enumerable whose enumerator will iterate over the GoObjects in reverse order.
            </summary>
            <seealso cref="P:Northwoods.Go.IGoCollection.Backwards"/>
        </member>
        <member name="P:Northwoods.Go.GoCollection.First">
            <summary>
            Gets the first object in this collection.
            </summary>
            <value>
            If this collection is empty, this value is null.
            </value>
        </member>
        <member name="P:Northwoods.Go.GoCollection.Last">
            <summary>
            Gets the last object in this collection.
            </summary>
            <value>
            If this collection is empty, this value is null.
            </value>
        </member>
        <member name="T:Northwoods.Go.GoCollectionEnumerator">
            <summary>
            Iterate over all of the GoObjects in this collection, either forwards or backwards.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoCollectionEnumerator.#ctor(System.Collections.ArrayList,System.Boolean)">
            <summary>
            Construct an IEnumerator for iterating either forwards or backwards over an ArrayList
            of <see cref="T:Northwoods.Go.GoObject"/>s.
            </summary>
            <param name="a"></param>
            <param name="forward"></param>
        </member>
        <member name="F:Northwoods.Go.GoCollectionEnumerator.Empty">
            <summary>
            Return an enumerator that doesn't iterate at all.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoCollectionEnumerator.GetEnumerator">
            <summary>
            Gets an enumerator for iterating over the GoObjects.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoCollectionEnumerator.MoveNext">
            <summary>
            Advance the enumerator to the next GoObject.
            </summary>
            <returns>True if there is a next GoObject; false if it has finished iterating over the collection.</returns>
        </member>
        <member name="M:Northwoods.Go.GoCollectionEnumerator.Reset">
            <summary>
            Reset the enumerator to its original position.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoCollectionEnumerator.Current">
            <summary>
             Gets the current object in the collection for this enumerator.
            </summary>
        </member>
        <member name="T:Northwoods.Go.GoContextMenu">
            <summary>
            GoContextMenu is just a <c>ContextMenu</c> that provides an easy way to 
            get the GoView in which a context menu <c>MenuItem.Click</c> event handler
            was invoked.
            </summary>
            <example>
            Adding a context menu to a particular node class:
            <code>
             public override bool OnContextClick(GoInputEventArgs evt, GoView view) {
               GoContextMenu cm = new GoContextMenu(view);
               cm.MenuItems.Add(new MenuItem("Copy", new EventHandler(this.Copy_Command)));
               cm.Show(view, evt.ViewPoint);
               return true;
             }
             private void Copy_Command(Object sender, EventArgs e) {
               GoView v = GoContextMenu.FindView(sender as MenuItem);
               if (v != null)
                 v.EditCopy();
             }
            </code>
            </example>
        </member>
        <member name="M:Northwoods.Go.GoContextMenu.#ctor(Northwoods.Go.GoView)">
            <summary>
            This <c>ContextMenu</c> subclass remembers the <see cref="T:Northwoods.Go.GoView"/> in which the
            <c>MenuItem</c>s commands should operate.
            </summary>
            <param name="view">The <see cref="T:Northwoods.Go.GoView"/> in which this <c>ContextMenu</c> is being invoked.</param>
        </member>
        <member name="M:Northwoods.Go.GoContextMenu.FindView(System.Windows.Forms.MenuItem)">
            <summary>
            For a MenuItem in a GoContextMenu, this static method gets the GoView in which
            the menu item command should be operating.
            </summary>
            <param name="m"></param>
            <returns></returns>
            <remarks>
            Sometimes an object specific context menu item command will need access to the
            view in which the context menu was invoked.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoContextMenu.View">
            <summary>
            Gets the GoView that this GoContextMenu was created for.
            </summary>
        </member>
        <member name="T:Northwoods.Go.GoCopyDictionary">
            <summary>
            This class is used to remember the mapping of original objects to copied
            objects in <see cref="M:Northwoods.Go.GoDocument.CopyFromCollection(Northwoods.Go.IGoCollection)"/>.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoCopyDictionary.#ctor">
            <summary>
            Create an empty mapping of objects to copied objects.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoCopyDictionary.Copy(Northwoods.Go.GoObject)">
            <summary>
            Return a copied object for an object.
            </summary>
            <param name="obj"></param>
            <returns></returns>
            <remarks>
            First this method looks up <paramref name="obj"/> in its mapping
            table--if it finds an object, it returns it, because presumably it
            has already been copied.
            Otherwise it calls <see cref="M:Northwoods.Go.GoObject.CopyObject(Northwoods.Go.GoCopyDictionary)"/> in order to
            make a copy of <paramref name="obj"/>.
            If <paramref name="obj"/> is null, this returns null.
            This is typically called within a <see cref="M:Northwoods.Go.GoObject.CopyObject(Northwoods.Go.GoCopyDictionary)"/>
            override method to make a copy of a field that is an object for
            a newly cloned object.
            </remarks>
            <example>
            This code might be part of the definition of <c>MyNode</c> which has
            two fields that are <see cref="T:Northwoods.Go.GoObject"/>s.  The <see cref="M:Northwoods.Go.GoGroup.CopyChildren(Northwoods.Go.GoGroup,Northwoods.Go.GoCopyDictionary)"/>
            method is called from <see cref="M:Northwoods.Go.GoGroup.CopyObject(Northwoods.Go.GoCopyDictionary)"/>.
            <code>
              protected override void CopyChildren(GoGroup newgroup, GoCopyDictionary env) {
                MyNode newnode = (MyNode)newgroup;
                newnode.myIcon = env.Copy(myIcon);
                newnode.Add(newnode.myIcon);
                newnode.myTopLabel = (GoText)env.Copy(myTopLabel);
                newnode.Add(newnode.myTopLabel);
              }
            </code>
            </example>
        </member>
        <member name="P:Northwoods.Go.GoCopyDictionary.SourceCollection">
            <summary>
            Gets or sets the collection from which we are copying.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoCopyDictionary.DestinationDocument">
            <summary>
            Gets or sets the document collection into which we are making copies.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoCopyDictionary.Item(System.Object)">
            <summary>
            Gets or sets the copied object in the destination for an object in the source.
            </summary>
            <remarks>
            This is an indexed property.
            If the key is null, getting this property returns null;
            When setting, if the key is null, nothing happens.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoCopyDictionary.Delayeds">
            <summary>
            Get the collection that holds objects that need attention
            after the first phase of copying.
            </summary>
        </member>
        <member name="T:Northwoods.Go.GoCopyDelayedsCollection">
            <summary>
            This class is used as part of a <see cref="T:Northwoods.Go.GoCopyDictionary"/> to
            remember objects that were not completely copied during the first
            pass of the copying process in <see cref="M:Northwoods.Go.GoDocument.CopyFromCollection(Northwoods.Go.IGoCollection)"/>.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoCopyDelayedsCollection.#ctor">
            <summary>
            Create a collection of delayed objects, used by <see cref="T:Northwoods.Go.GoCopyDictionary"/>.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoCopyDelayedsCollection.Add(System.Object)">
            <summary>
            Make sure a delayed object is present in this collection.
            </summary>
            <param name="obj"></param>
            <remarks>
            Null is ignored.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoCopyDelayedsCollection.Remove(System.Object)">
            <summary>
            Remove an object from this collection.
            </summary>
            <param name="obj"></param>
            <remarks>
            Null is ignored.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoCopyDelayedsCollection.Contains(System.Object)">
            <summary>
            Return true if a particular object is in this collection.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.GoCopyDelayedsCollection.Clear">
            <summary>
            Remove all objects from this collection.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoCopyDelayedsCollection.CopyArray">
            <summary>
            Fill a newly allocated array with references to the source objects that were delayed.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoCopyDelayedsCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Fill an array with references to the source objects that were copied but
            need additional work.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Northwoods.Go.GoCopyDelayedsCollection.CopyTo(Northwoods.Go.GoObject[],System.Int32)">
            <summary>
            Provide a type-specific overload for <see cref="T:Northwoods.Go.GoObject"/> arrays.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Northwoods.Go.GoCopyDelayedsCollection.GetEnumerator">
            <summary>
            Return an iterator over all of the delayed objects.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Northwoods.Go.GoCopyDelayedsCollection.IsEmpty">
            <summary>
            Returns true if the <see cref="P:Northwoods.Go.GoCopyDelayedsCollection.Count"/> is zero.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoCopyDelayedsCollection.Count">
            <summary>
            The number of objects whose copying needs additional work.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoCopyDelayedsCollection.IsSynchronized">
            <summary>
            Gets whether this collection is thread-safe.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoCopyDelayedsCollection.SyncRoot">
            <summary>
            Gets an object to be used for synchronizing access to this collection.
            </summary>
        </member>
        <member name="T:Northwoods.Go.GoDocumentValidCycle">
            <summary>
            Specifies what kinds of cycles may be made by a valid link from a port.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoDocumentValidCycle.All">
            <summary>
            No restrictions on cycles, except when imposed by <see cref="P:Northwoods.Go.GoPort.IsValidSelfNode"/>
            or <see cref="P:Northwoods.Go.GoPort.IsValidDuplicateLinks"/>.
            </summary>
            <remarks>
            This is the default for <see cref="P:Northwoods.Go.GoDocument.ValidCycle"/>.
            </remarks>
        </member>
        <member name="F:Northwoods.Go.GoDocumentValidCycle.NotDirected">
            <summary>
            A valid link from a port will not produce a directed cycle in the graph.
            </summary>
            <remarks>
            This option uses <see cref="M:Northwoods.Go.GoDocument.MakesDirectedCycle(Northwoods.Go.IGoNode,Northwoods.Go.IGoNode)"/> in the
            implementation of <see cref="M:Northwoods.Go.GoPort.IsValidLink(Northwoods.Go.IGoPort)"/>.
            </remarks>
        </member>
        <member name="F:Northwoods.Go.GoDocumentValidCycle.NotDirectedFast">
            <summary>
            A valid link from a port will not produce a directed cycle in the graph,
            assuming there are no directed cycles anywhere accessible from either port.
            </summary>
            <remarks>
            This option uses <see cref="M:Northwoods.Go.GoDocument.MakesDirectedCycleFast(Northwoods.Go.IGoNode,Northwoods.Go.IGoNode)"/> in the
            implementation of <see cref="M:Northwoods.Go.GoPort.IsValidLink(Northwoods.Go.IGoPort)"/>.
            </remarks>
        </member>
        <member name="F:Northwoods.Go.GoDocumentValidCycle.NotUndirected">
            <summary>
            A valid link from a port will not produce an undirected cycle in the graph.
            </summary>
            <remarks>
            Traversal of all links during the check for any undirected cycles ignores
            the implicit direction of each link.
            This option uses <see cref="M:Northwoods.Go.GoDocument.MakesUndirectedCycle(Northwoods.Go.IGoNode,Northwoods.Go.IGoNode)"/> in the
            implementation of <see cref="M:Northwoods.Go.GoPort.IsValidLink(Northwoods.Go.IGoPort)"/>.
            </remarks>
        </member>
        <member name="F:Northwoods.Go.GoDocumentValidCycle.DestinationTree">
            <summary>
            Any number of destination links may go out of a port, but at most one
            source link may come into a port, and there are no directed cycles.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoDocumentValidCycle.SourceTree">
            <summary>
            Any number of source links may come into a port, but at most one
            destination link may go out of a port, and there are no directed cycles.
            </summary>
        </member>
        <member name="T:Northwoods.Go.GoDocument">
            <summary>
            This class represents a model for a view, holding objects to be displayed,
            organized into layers.
            </summary>
        </member>
        <member name="T:Northwoods.Go.IGoLayerCollectionContainer">
            <summary>
            GoDocument and GoView implement this interface for holding a GoLayerCollection collection.
            </summary>
        </member>
        <member name="T:Northwoods.Go.IGoLayerAbilities">
            <summary>
            This interface specifies the properties used by <see cref="T:Northwoods.Go.GoLayer"/>,
            <see cref="T:Northwoods.Go.GoDocument"/>, and <see cref="T:Northwoods.Go.GoView"/> for describing what
            kinds of actions the user is allowed to do.
            </summary>
        </member>
        <member name="M:Northwoods.Go.IGoLayerAbilities.CanSelectObjects">
            <summary>
            Called to see if the user can select objects in this layer, document or view.
            </summary>
        </member>
        <member name="M:Northwoods.Go.IGoLayerAbilities.CanMoveObjects">
            <summary>
            Called to see if the user can move selected objects in this layer, document or view.
            </summary>
        </member>
        <member name="M:Northwoods.Go.IGoLayerAbilities.CanCopyObjects">
            <summary>
            Called to see if the user can copy selected objects in this layer, document or view.
            </summary>
        </member>
        <member name="M:Northwoods.Go.IGoLayerAbilities.CanResizeObjects">
            <summary>
            Called to see if the user can resize selected objects in this layer, document or view.
            </summary>
        </member>
        <member name="M:Northwoods.Go.IGoLayerAbilities.CanReshapeObjects">
            <summary>
            Called to see if the user can reshape resizable selected objects in this layer, document or view.
            </summary>
        </member>
        <member name="M:Northwoods.Go.IGoLayerAbilities.CanDeleteObjects">
            <summary>
            Called to see if the user can delete selected objects in this layer, document or view.
            </summary>
        </member>
        <member name="M:Northwoods.Go.IGoLayerAbilities.CanInsertObjects">
            <summary>
            Called to see if the user can insert objects in this layer, document or view.
            </summary>
        </member>
        <member name="M:Northwoods.Go.IGoLayerAbilities.CanLinkObjects">
            <summary>
            Called to see if the user can link objects in this layer, document or view.
            </summary>
        </member>
        <member name="M:Northwoods.Go.IGoLayerAbilities.CanEditObjects">
            <summary>
            Called to see if the user can edit objects in this layer, document or view.
            </summary>
        </member>
        <member name="M:Northwoods.Go.IGoLayerAbilities.SetModifiable(System.Boolean)">
            <summary>
            Set the <c>AllowMove</c>, <c>AllowResize</c>, <c>AllowReshape</c>,
            <c>AllowDelete</c>, <c>AllowInsert</c>, <c>AllowLink</c>, and
            <c>AllowEdit</c> properties.
            </summary>
            <param name="b"></param>
        </member>
        <member name="P:Northwoods.Go.IGoLayerAbilities.AllowSelect">
            <summary>
            Gets or sets whether the user can select objects in this layer, document or view.
            </summary>
        </member>
        <member name="P:Northwoods.Go.IGoLayerAbilities.AllowMove">
            <summary>
            Gets or sets whether the user can move selected objects in this layer, document or view.
            </summary>
        </member>
        <member name="P:Northwoods.Go.IGoLayerAbilities.AllowCopy">
            <summary>
            Gets or sets whether the user can copy selected objects in this layer, document or view.
            </summary>
        </member>
        <member name="P:Northwoods.Go.IGoLayerAbilities.AllowResize">
            <summary>
            Gets or sets whether the user can resize selected objects in this layer, document or view.
            </summary>
        </member>
        <member name="P:Northwoods.Go.IGoLayerAbilities.AllowReshape">
            <summary>
            Gets or sets whether the user can reshape resizable selected objects in this layer, document or view.
            </summary>
        </member>
        <member name="P:Northwoods.Go.IGoLayerAbilities.AllowDelete">
            <summary>
            Gets or sets whether the user can delete selected objects in this layer, document or view.
            </summary>
        </member>
        <member name="P:Northwoods.Go.IGoLayerAbilities.AllowInsert">
            <summary>
            Gets or sets whether the user can insert objects in this layer, document or view.
            </summary>
        </member>
        <member name="P:Northwoods.Go.IGoLayerAbilities.AllowLink">
            <summary>
            Gets or sets whether the user can link objects in this layer, document or view.
            </summary>
        </member>
        <member name="P:Northwoods.Go.IGoLayerAbilities.AllowEdit">
            <summary>
            Gets or sets whether the user can edit objects in this layer, document or view.
            </summary>
        </member>
        <member name="M:Northwoods.Go.IGoLayerCollectionContainer.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)">
            <summary>
            This method is called when one of a document's or a view's
            layer collection, layer, or object is modified.
            </summary>
            <param name="hint">identifies the kind of change</param>
            <param name="subhint">identifies a particular kind of change for the <paramref name="hint"/></param>
            <param name="obj">helps identify the change</param>
            <param name="oldI">specifies an old/previous integer value</param>
            <param name="oldVal">specifies an old/previous object value</param>
            <param name="oldRect">specifies an old/previous float, <c>PointF</c>, <c>SizeF</c>, or <c>RectangleF</c> value</param>
            <param name="newI">specifies a new integer value</param>
            <param name="newVal">specifies a new object value</param>
            <param name="newRect">specifies a new float, <c>PointF</c>, <c>SizeF</c>, or <c>RectangleF</c> value</param>
        </member>
        <member name="P:Northwoods.Go.IGoLayerCollectionContainer.Layers">
            <summary>
            Gets the collection of layers.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoDocument.RepaintAll">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoDocument.BeginUpdateAllViews">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoDocument.EndUpdateAllViews">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoDocument.UpdateAllViews">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoDocument.ChangedName">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoDocument.ChangedSize">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoDocument.ChangedTopLeft">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoDocument.ChangedFixedSize">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoDocument.ChangedPaperColor">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoDocument.ChangedDataFormat">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoDocument.ChangedAllowSelect">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoDocument.ChangedAllowMove">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoDocument.ChangedAllowCopy">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoDocument.ChangedAllowResize">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoDocument.ChangedAllowReshape">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoDocument.ChangedAllowDelete">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoDocument.ChangedAllowInsert">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoDocument.ChangedAllowLink">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoDocument.ChangedAllowEdit">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoDocument.AllArranged">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoDocument.ChangedUserFlags">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoDocument.ChangedUserObject">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoDocument.ChangedLinksLayer">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoDocument.ChangedMaintainsPartID">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoDocument.ChangedValidCycle">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoDocument.LastHint">
            <summary>
            This is the last system-defined <see cref="M:Northwoods.Go.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
            <remarks>
            Subclasses of GoDocument should use values larger than this one
            to identify document, layer collection, and layer change events.
            GoLayerCollection hints are 800-899.
            GoLayer hints are 900-999.
            GoObject hints are 1000-9999, even though they are stored as subhints and thus cannot conflict.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoDocument.#ctor">
            <summary>
            Create a document containing one empty layer.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoDocument.Add(Northwoods.Go.GoObject)">
            <summary>
            Add an object to the <see cref="P:Northwoods.Go.GoDocument.DefaultLayer"/>.
            </summary>
            <param name="obj"></param>
            <remarks>
            It is an error if the <paramref name="obj"/> belongs to a different document
            or to a <see cref="T:Northwoods.Go.GoGroup"/>.
            If the object already belongs to this document, nothing happens.
            If the object is a link, it is conventional to add the link to
            the <see cref="P:Northwoods.Go.GoDocument.LinksLayer"/> rather than to the <see cref="P:Northwoods.Go.GoDocument.DefaultLayer"/>.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoDocument.AddCopy(Northwoods.Go.GoObject,Northwoods.Go.PointF)"/>
        </member>
        <member name="M:Northwoods.Go.GoDocument.Remove(Northwoods.Go.GoObject)">
            <summary>
            Remove an object from this document.
            </summary>
            <param name="obj"></param>
            <remarks>
            It is an error if the <paramref name="obj"/> belongs to a different document.
            If it already has been removed from this document, this method does nothing.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoDocument.Contains(Northwoods.Go.GoObject)">
            <summary>
            Determine if an object belongs to this document.
            </summary>
            <param name="obj"></param>
            <returns></returns>
            <remarks>
            This implementation currently depends on the object's <see cref="P:Northwoods.Go.GoObject.Layer"/>
            property to see if it is part of this document.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoDocument.Clear">
            <summary>
            Remove all objects from all layers in this document.
            </summary>
            <remarks>
            All layers remain in the <see cref="P:Northwoods.Go.GoDocument.Layers"/> collection, but
            each layer will be <see cref="M:Northwoods.Go.GoLayer.Clear"/>ed.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoDocument.CopyArray">
            <summary>
            Gets a newly allocated array of all of the GoObjects in this collection.
            </summary>
            <seealso cref="M:Northwoods.Go.IGoCollection.CopyArray"/>
        </member>
        <member name="M:Northwoods.Go.GoDocument.CopyTo(System.Array,System.Int32)">
            <summary>
            Copy references to all of the document objects into the given Array.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Northwoods.Go.GoDocument.CopyTo(Northwoods.Go.GoObject[],System.Int32)">
            <summary>
            Copy references to all of the document objects into the given array of <see cref="T:Northwoods.Go.GoObject"/>s.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Northwoods.Go.GoDocument.GetEnumerator">
            <summary>
            Get an Enumerator that iterates over all layers to include all document objects.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.GoDocument.PickObject(Northwoods.Go.PointF,System.Boolean)">
            <summary>
            Find the top-most (front-most) document object at a given point.
            </summary>
            <param name="p">A <c>PointF</c> location in document coordinates.</param>
            <param name="selectableOnly"></param>
            <returns></returns>
            <remarks>
            This iterates over the collection of layers, backwards from top to bottom,
            calling <see cref="M:Northwoods.Go.GoLayer.PickObject(Northwoods.Go.PointF,System.Boolean)"/>.
            If <paramref name="selectableOnly"/> is true but <see cref="M:Northwoods.Go.GoDocument.CanSelectObjects"/>
            is false, this method returns null.
            Please note that if an object is found, it might not be a top-level object.
            In fact, when <paramref name="selectableOnly"/> is false, it is very likely
            that if any object is found at the given point, it will be a child of some
            group.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoDocument.UpdateDocumentBounds(Northwoods.Go.GoObject)">
            <summary>
            Called when a document object's bounds changes to possibly update the document's bounds.
            </summary>
            <param name="obj"></param>
            <remarks>
            This method does nothing if <see cref="P:Northwoods.Go.GoDocument.FixedSize"/> is true.
            Otherwise it increases the <see cref="P:Northwoods.Go.GoDocument.Size"/> property and moves
            the <see cref="P:Northwoods.Go.GoDocument.TopLeft"/> point farther towards negative coordinates
            as needed to include the <paramref name="obj"/>'s bounds.
            By default this method never shrinks the document.
            Note also that this method is not called while <see cref="P:Northwoods.Go.GoDocument.SuspendsUpdates"/> is true.
            If you do add objects or modify their bounds while <see cref="P:Northwoods.Go.GoDocument.SuspendsUpdates"/>
            is true, afterwards you can explicitly set <see cref="P:Northwoods.Go.GoDocument.TopLeft"/> and <see cref="P:Northwoods.Go.GoDocument.Size"/>
            to accommodate the new or modified document objects.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoDocument.FindNode(System.String,System.Boolean,System.Boolean)">
            <summary>
            Search this document for a node whose <see cref="P:Northwoods.Go.IGoLabeledNode.Text"/>
            property matches a given string, possibly considering the initial part of
            the node's text string and possibly comparing in a case-insensitive manner.
            </summary>
            <param name="s">the <c>String</c> to search for</param>
            <param name="prefix">
            true to just find nodes beginning with <paramref name="s"/>;
            false to compare the whole string
            </param>
            <param name="ignorecase">
            true to upcase both the <paramref name="s"/> search string as well
            as each node's text string;
            false to do a case-sensitive comparison
            </param>
            <returns>
            A <see cref="T:Northwoods.Go.GoObject"/> that implements <see cref="T:Northwoods.Go.IGoLabeledNode"/>
            with a matching text string, or null if no such node exists in this document.
            </returns>
        </member>
        <member name="M:Northwoods.Go.GoDocument.FindNode(System.String)">
            <summary>
            Find a node whose <see cref="P:Northwoods.Go.IGoLabeledNode.Text"/> property value is
            exactly the same as a given string.
            </summary>
            <param name="s">the <c>String</c> to search for</param>
            <returns>
            The result of <c>FindNode(s, false, false)</c>.
            </returns>
        </member>
        <member name="M:Northwoods.Go.GoDocument.ComputeBounds(Northwoods.Go.IGoCollection,Northwoods.Go.GoView)">
            <summary>
            Get the smallest rectangle that includes the bounds of all of the
            objects in a collection.
            </summary>
            <param name="coll"></param>
            <param name="view">May be null.</param>
            <returns>
            A <c>RectangleF</c> that encloses all of the objects in the
            collection, which might not include the (0, 0) origin point
            </returns>
            <remarks>
            This method uses <see cref="M:Northwoods.Go.GoObject.ExpandPaintBounds(System.Drawing.RectangleF,Northwoods.Go.GoView)"/> to include
            areas beyond the immediate <see cref="P:Northwoods.Go.GoObject.Bounds"/>, perhaps
            affected by the <paramref name="view"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoDocument.ComputeBounds">
            <summary>
            Call <see cref="M:Northwoods.Go.GoDocument.ComputeBounds(Northwoods.Go.IGoCollection,Northwoods.Go.GoView)"/>
            on this document but with no view.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.GoDocument.CanSelectObjects">
            <summary>
            Called to see if the user can select objects in this document.
            </summary>
            <remarks>
            By default this just returns <c>AllowSelect</c>,
            This property is used by methods such as <see cref="M:Northwoods.Go.GoView.SelectInRectangle(System.Drawing.RectangleF)"/>
            and <see cref="M:Northwoods.Go.GoDocument.PickObject(Northwoods.Go.PointF,System.Boolean)"/>.
            </remarks>
            <seealso cref="P:Northwoods.Go.GoDocument.AllowSelect"/>
            <seealso cref="M:Northwoods.Go.GoLayer.CanSelectObjects"/>
            <seealso cref="M:Northwoods.Go.GoObject.CanSelect"/>
        </member>
        <member name="M:Northwoods.Go.GoDocument.CanMoveObjects">
            <summary>
            Called to see if the user can move selected objects in this document.
            </summary>
            <remarks>
            By default this just returns <c>AllowMove</c>,
            This property is used by methods such as <see cref="M:Northwoods.Go.GoView.MoveSelection(Northwoods.Go.GoSelection,System.Drawing.SizeF,System.Boolean)"/>.
            </remarks>
            <seealso cref="P:Northwoods.Go.GoDocument.AllowMove"/>
            <seealso cref="M:Northwoods.Go.GoLayer.CanMoveObjects"/>
            <seealso cref="M:Northwoods.Go.GoObject.CanMove"/>
        </member>
        <member name="M:Northwoods.Go.GoDocument.CanCopyObjects">
            <summary>
            Called to see if the user can copy selected objects in this document.
            </summary>
            <remarks>
            By default this just returns <c>AllowCopy</c>,
            This property is used by methods such as <see cref="M:Northwoods.Go.GoView.CopySelection(Northwoods.Go.GoSelection,System.Drawing.SizeF,System.Boolean)"/>.
            </remarks>
            <seealso cref="P:Northwoods.Go.GoDocument.AllowCopy"/>
            <seealso cref="M:Northwoods.Go.GoLayer.CanCopyObjects"/>
            <seealso cref="M:Northwoods.Go.GoObject.CanCopy"/>
        </member>
        <member name="M:Northwoods.Go.GoDocument.CanResizeObjects">
            <summary>
            Called to see if the user can resize selected objects in this document.
            </summary>
            <remarks>
            By default this just returns <c>AllowResize</c>,
            This property is used by <see cref="T:Northwoods.Go.GoToolResizing"/>.
            </remarks>
            <seealso cref="P:Northwoods.Go.GoDocument.AllowResize"/>
            <seealso cref="M:Northwoods.Go.GoLayer.CanResizeObjects"/>
            <seealso cref="M:Northwoods.Go.GoObject.CanResize"/>
        </member>
        <member name="M:Northwoods.Go.GoDocument.CanReshapeObjects">
            <summary>
            Called to see if the user can reshape resizable objects in this document.
            </summary>
            <remarks>
            By default this just returns <c>AllowReshape</c>,
            This property is used by <see cref="T:Northwoods.Go.GoToolResizing"/>.
            </remarks>
            <seealso cref="P:Northwoods.Go.GoDocument.AllowReshape"/>
            <seealso cref="M:Northwoods.Go.GoLayer.CanReshapeObjects"/>
            <seealso cref="M:Northwoods.Go.GoObject.CanReshape"/>
        </member>
        <member name="M:Northwoods.Go.GoDocument.CanDeleteObjects">
            <summary>
            Called to see if the user can delete selected objects in this document.
            </summary>
            <remarks>
            By default this just returns <c>AllowDelete</c>,
            This property is used by methods such as <see cref="M:Northwoods.Go.GoView.DeleteSelection(Northwoods.Go.GoSelection)"/>.
            </remarks>
            <seealso cref="P:Northwoods.Go.GoDocument.AllowDelete"/>
            <seealso cref="M:Northwoods.Go.GoLayer.CanDeleteObjects"/>
            <seealso cref="M:Northwoods.Go.GoObject.CanDelete"/>
        </member>
        <member name="M:Northwoods.Go.GoDocument.CanInsertObjects">
            <summary>
            Called to see if the user can insert objects in this document.
            </summary>
            <remarks>
            By default this just returns <c>AllowInsert</c>,
            This property is used by methods such as <see cref="M:Northwoods.Go.GoView.EditPaste"/> and by
            <see cref="T:Northwoods.Go.GoToolDragging"/>.
            </remarks>
            <seealso cref="P:Northwoods.Go.GoDocument.AllowInsert"/>
            <seealso cref="M:Northwoods.Go.GoLayer.CanInsertObjects"/>
        </member>
        <member name="M:Northwoods.Go.GoDocument.CanLinkObjects">
            <summary>
            Called to see if the user can link objects in this document.
            </summary>
            <remarks>
            This just returns <c>AllowLink</c>.
            This property is used by <see cref="T:Northwoods.Go.GoToolLinking"/>.
            </remarks>
            <seealso cref="P:Northwoods.Go.GoDocument.AllowLink"/>
            <seealso cref="M:Northwoods.Go.GoPort.CanLinkFrom"/>
            <seealso cref="M:Northwoods.Go.GoPort.CanLinkTo"/>
        </member>
        <member name="M:Northwoods.Go.GoDocument.CanEditObjects">
            <summary>
            Called to see if the user can edit objects in this document.
            </summary>
            <remarks>
            By default this just returns <c>AllowEdit</c>,
            This property is used by methods such as <see cref="M:Northwoods.Go.GoText.OnSingleClick(Northwoods.Go.GoInputEventArgs,Northwoods.Go.GoView)"/>.
            </remarks>
            <seealso cref="P:Northwoods.Go.GoDocument.AllowEdit"/>
            <seealso cref="M:Northwoods.Go.GoLayer.CanEditObjects"/>
            <seealso cref="M:Northwoods.Go.GoObject.CanEdit"/>
        </member>
        <member name="M:Northwoods.Go.GoDocument.SetModifiable(System.Boolean)">
            <summary>
            This method sets some properties that determine whether the user can
            modify the document from any view.
            </summary>
            <param name="b"></param>
            <remarks>
            By default this just sets the <see cref="P:Northwoods.Go.GoDocument.AllowMove"/>, <see cref="P:Northwoods.Go.GoDocument.AllowResize"/>, 
            <see cref="P:Northwoods.Go.GoDocument.AllowReshape"/>, <see cref="P:Northwoods.Go.GoDocument.AllowDelete"/>, <see cref="P:Northwoods.Go.GoDocument.AllowInsert"/>, 
            <see cref="P:Northwoods.Go.GoDocument.AllowLink"/>, and <see cref="P:Northwoods.Go.GoDocument.AllowEdit"/> properties.
            You may want to override this in order to also control other properties you
            may have defined that govern the user's ability to modify this document.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoDocument.OnChanged(Northwoods.Go.GoChangedEventArgs)">
            <summary>
            Called when any part of this document has changed, to invoke all Changed event handlers.
            </summary>
            <param name="evt"></param>
            <remarks>
            This method is called after this document of a part of this document has been modified.
            To avoid confusion, this method and any method that it calls should not modify the
            document.
            Besides invoking all Changed event handlers, this also calls
            <see cref="M:Northwoods.Go.GoUndoManager.DocumentChanged(System.Object,Northwoods.Go.GoChangedEventArgs)"/> if there is an <see cref="P:Northwoods.Go.GoDocument.UndoManager"/>
            and sets <see cref="P:Northwoods.Go.GoDocument.IsModified"/> to true, unless <see cref="P:Northwoods.Go.GoDocument.SkipsUndoManager"/> is true.
            Furthermore by default this method calls <see cref="M:Northwoods.Go.GoDocument.UpdateDocumentBounds(Northwoods.Go.GoObject)"/> if
            an object is inserted into a layer or it its bounds change.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)">
            <summary>
            Any change to a document or to a part of a document may call this method
            to invoke the <see cref="M:Northwoods.Go.GoDocument.OnChanged(Northwoods.Go.GoChangedEventArgs)"/> method, after the change has occurred.
            </summary>
            <param name="hint"></param>
            <param name="subhint"></param>
            <param name="obj"></param>
            <param name="oldI"></param>
            <param name="oldVal"></param>
            <param name="oldRect"></param>
            <param name="newI"></param>
            <param name="newVal"></param>
            <param name="newRect"></param>
            <remarks>
            <para>
            This implementation tries to reuse a <see cref="T:Northwoods.Go.GoChangedEventArgs"/> instance
            that it initializes with the information in the parameters before calling
            <see cref="M:Northwoods.Go.GoDocument.OnChanged(Northwoods.Go.GoChangedEventArgs)"/>.
            This method is often called by <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/>.
            </para>
            <para>
            <list type="table">
            <listheader><term><see cref="T:Northwoods.Go.GoDocument"/></term></listheader>
            <item> <term><see cref="F:Northwoods.Go.GoDocument.RepaintAll"/></term> <term>100</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoDocument.BeginUpdateAllViews"/></term> <term>101</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoDocument.EndUpdateAllViews"/></term> <term>102</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoDocument.UpdateAllViews"/></term> <term>103</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoDocument.ChangedName"/></term> <term>201</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoDocument.ChangedSize"/></term> <term>202</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoDocument.ChangedTopLeft"/></term> <term>203</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoDocument.ChangedFixedSize"/></term> <term>204</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoDocument.ChangedPaperColor"/></term> <term>205</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoDocument.ChangedDataFormat"/></term> <term>206</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoDocument.ChangedAllowSelect"/></term> <term>207</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoDocument.ChangedAllowMove"/></term> <term>208</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoDocument.ChangedAllowCopy"/></term> <term>209</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoDocument.ChangedAllowResize"/></term> <term>210</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoDocument.ChangedAllowReshape"/></term> <term>211</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoDocument.ChangedAllowDelete"/></term> <term>212</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoDocument.ChangedAllowInsert"/></term> <term>213</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoDocument.ChangedAllowLink"/></term> <term>214</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoDocument.ChangedAllowEdit"/></term> <term>215</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoDocument.AllArranged"/></term> <term>220</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoDocument.ChangedUserFlags"/></term> <term>221</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoDocument.ChangedUserObject"/></term> <term>222</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoDocument.ChangedLinksLayer"/></term> <term>223</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoDocument.ChangedMaintainsPartID"/></term> <term>223</term> </item>
            <item> <term><see cref="F:Northwoods.Go.GoDocument.LastHint"/></term> <term>10000</term> </item>
            </list>
            Please note that this list may not be complete--in fact you are encouraged to
            add new subhints for your own properties and other changes.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoDocument.RaiseChanging(System.Int32,System.Int32,System.Object)">
            <summary>
            Call this method to invoke the <see cref="M:Northwoods.Go.GoDocument.OnChanged(Northwoods.Go.GoChangedEventArgs)"/> method before
            any change occurs.
            </summary>
            <param name="hint"></param>
            <param name="subhint"></param>
            <param name="obj"></param>
            <remarks>
            You should call this method before making any changes for which the
            call to <see cref="M:Northwoods.Go.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> does not have the complete previous
            (old) state.
            You should also implement <see cref="M:Northwoods.Go.GoDocument.CopyOldValueForUndo(Northwoods.Go.GoChangedEventArgs)"/> and
            <see cref="M:Northwoods.Go.GoDocument.CopyNewValueForRedo(Northwoods.Go.GoChangedEventArgs)"/> to record the state information for
            the particular hint passed to this method.
            When the call to <see cref="M:Northwoods.Go.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> has the complete before-and-after
            state as arguments, calling this method is not necessary.
            You will typically call <see cref="M:Northwoods.Go.GoDocument.RaiseChanging(System.Int32,System.Int32,System.Object)"/> followed by a call
            to <see cref="M:Northwoods.Go.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> when making a bunch of changes while
            <see cref="P:Northwoods.Go.GoDocument.SuspendsUpdates"/> is true, if you still want to maintain
            the ability to undo and redo all of those changes.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoDocument.InvalidateViews">
            <summary>
            Cause all views to completely repaint sometime in the future.
            </summary>
            <remarks>
            This uses the <see cref="F:Northwoods.Go.GoDocument.RepaintAll"/> hint.
            This is only useful for Windows Forms.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoDocument.BeginUpdateViews">
            <summary>
            Cause all views to stop painting.
            </summary>
            <remarks>
            This uses the <see cref="F:Northwoods.Go.GoDocument.BeginUpdateAllViews"/> hint.
            <see cref="M:Northwoods.Go.GoView.OnDocumentChanged(System.Object,Northwoods.Go.GoChangedEventArgs)"/> will detect this hint and
            call <c>GoView.BeginUpdate</c>.
            Note that preventing views from painting does not keep them from
            receiving and handling <see cref="E:Northwoods.Go.GoDocument.Changed"/> events,
            nor does it interfere with any other event handlers or with any
            <see cref="P:Northwoods.Go.GoDocument.UndoManager"/>.
            This is only useful for Windows Forms.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoDocument.EndUpdateViews"/>
        </member>
        <member name="M:Northwoods.Go.GoDocument.EndUpdateViews">
            <summary>
            Cause all views to continue painting normally.
            </summary>
            <remarks>
            This uses the <see cref="F:Northwoods.Go.GoDocument.EndUpdateAllViews"/> hint.
            <see cref="M:Northwoods.Go.GoView.OnDocumentChanged(System.Object,Northwoods.Go.GoChangedEventArgs)"/> will detect this hint and
            call <c>GoView.EndUpdate</c>.
            This is only useful for Windows Forms.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoDocument.BeginUpdateViews"/>
        </member>
        <member name="M:Northwoods.Go.GoDocument.UpdateViews">
            <summary>
            Cause all views to repaint their invalidated parts.
            </summary>
            <remarks>
            This uses the <see cref="F:Northwoods.Go.GoDocument.UpdateAllViews"/> hint.
            <see cref="M:Northwoods.Go.GoView.OnDocumentChanged(System.Object,Northwoods.Go.GoChangedEventArgs)"/> will detect this hint and
            call <c>Control.Update</c>.
            This is only useful for Windows Forms.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoDocument.CreateCopyDictionary">
            <summary>
            Allocate a <see cref="T:Northwoods.Go.GoCopyDictionary"/> for use in a call to
            <see cref="M:Northwoods.Go.GoDocument.CopyFromCollection(Northwoods.Go.IGoCollection,System.Boolean,System.Boolean,System.Drawing.SizeF,Northwoods.Go.GoCopyDictionary)"/>
            </summary>
            <returns></returns>
            <remarks>
            This also sets the <see cref="P:Northwoods.Go.GoCopyDictionary.DestinationDocument"/> to
            this document.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoDocument.AddCopy(Northwoods.Go.GoObject,Northwoods.Go.PointF)">
            <summary>
            Add a copy of an object into this document at the given point.
            </summary>
            <param name="obj"></param>
            <param name="loc"></param>
            <returns>The newly inserted object.</returns>
            <remarks>
            This creates a singleton collection and calls <see cref="M:Northwoods.Go.GoDocument.CopyFromCollection(Northwoods.Go.IGoCollection)"/>
            with the appropriate offset.
            This method is different from <see cref="M:Northwoods.Go.GoDocument.Add(Northwoods.Go.GoObject)"/> in that the latter method
            causes the document to own the object; i.e., the object's <see cref="P:Northwoods.Go.GoObject.Layer"/>
            property is modified to be this document's default layer.
            But this method does not modify the <paramref name="obj"/> and may add the
            copy to a different layer, if <paramref name="obj"/> belongs to a layer and
            <see cref="M:Northwoods.Go.GoDocument.CopyFromCollection(Northwoods.Go.IGoCollection)"/> can find a matching layer in this document.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoDocument.CopyFromCollection(Northwoods.Go.IGoCollection)">
            <summary>
            Make copies of a collection of objects in this document.
            </summary>
            <param name="coll"></param>
            <returns>A <see cref="T:Northwoods.Go.GoCopyDictionary"/> describing the results of the copy.</returns>
        </member>
        <member name="M:Northwoods.Go.GoDocument.CopyFromCollection(Northwoods.Go.IGoCollection,System.Boolean,System.Boolean,System.Drawing.SizeF,Northwoods.Go.GoCopyDictionary)">
            <summary>
            Add a copy of the objects in the given collection into this document, with locations
            offset from their existing locations.
            </summary>
            <param name="coll">the <see cref="T:Northwoods.Go.IGoCollection"/> of <see cref="T:Northwoods.Go.GoObject"/>s</param>
            <param name="copyableOnly">whether to heed the <see cref="M:Northwoods.Go.GoObject.CanCopy"/>
            property for each object that might be copied, and whether to heed the
            <see cref="M:Northwoods.Go.GoLayer.CanInsertObjects"/> predicate for the corresponding destination layer</param>
            <param name="dragging">whether to copy the <see cref="P:Northwoods.Go.GoObject.DraggingObject"/> instead
            of the object itself</param>
            <param name="offset">the <c>SizeF</c> offset in document coordinates</param>
            <param name="env">
            the copy dictionary which can control and record the results of the copy;
            if null it calls <see cref="M:Northwoods.Go.GoDocument.CreateCopyDictionary"/> to get one
            </param>
            <returns>the <see cref="T:Northwoods.Go.GoCopyDictionary"/> holding the results of the copy</returns>
            <remarks>
            This is a two-pass process.
            In the first pass, this method copies everything, by calling
            <see cref="M:Northwoods.Go.GoCopyDictionary.Copy(Northwoods.Go.GoObject)"/> on each object and then adding the
            object to the appropriate layer in this document.
            The layer is chosen to be one that matches the layer of the original object,
            by calling <see cref="M:Northwoods.Go.GoLayerCollection.Find(System.Object)"/>.  If no such layer is found,
            it adds the new object to the default layer.
            The second pass checks for any objects that were delayed during the copy.
            Any such objects have their <see cref="M:Northwoods.Go.GoObject.CopyObjectDelayed(Northwoods.Go.GoCopyDictionary,Northwoods.Go.GoObject)"/>
            method called to fix up whatever is needed.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoDocument.MergeLayersFrom(Northwoods.Go.GoDocument)">
            <summary>
            Make sure this document has all of the identified layers of another document.
            </summary>
            <param name="other"></param>
            <remarks>
            Only non-null <see cref="P:Northwoods.Go.GoLayer.Identifier"/>s of the layers of the
            <paramref name="other"/> document are checked for presence in this document.
            No <see cref="T:Northwoods.Go.GoObject"/>s are inserted or removed from any layer.
            No pre-existing layers are removed or reordered.
            The <see cref="P:Northwoods.Go.GoDocument.DefaultLayer"/> property is changed to match that of
            the other document too, if its <see cref="P:Northwoods.Go.GoDocument.DefaultLayer"/> has an identifier.
            The principal use of this method is to initialize a clipboard document--
            <see cref="M:Northwoods.Go.GoView.CopyToClipboard(Northwoods.Go.IGoCollection)"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoDocument.CanUndo">
            <summary>
            This predicate is true if this document has an UndoManager whose CanUndo predicate is true.
            </summary>
            <returns><see cref="M:Northwoods.Go.GoUndoManager.CanUndo"/></returns>
        </member>
        <member name="M:Northwoods.Go.GoDocument.Undo">
            <summary>
            Call the UndoManager's <see cref="M:Northwoods.Go.GoUndoManager.Undo"/> method if <see cref="M:Northwoods.Go.GoDocument.CanUndo"/> is true.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoDocument.CanRedo">
            <summary>
            This predicate is true if this document has an UndoManager whose CanRedo predicate is true.
            </summary>
            <returns><see cref="M:Northwoods.Go.GoUndoManager.CanRedo"/></returns>
        </member>
        <member name="M:Northwoods.Go.GoDocument.Redo">
            <summary>
            Call the UndoManager's <see cref="M:Northwoods.Go.GoUndoManager.Redo"/> method if <see cref="M:Northwoods.Go.GoDocument.CanRedo"/> is true.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoDocument.StartTransaction">
            <summary>
            Call the UndoManager's <see cref="M:Northwoods.Go.GoUndoManager.StartTransaction"/> method.
            </summary>
            <returns><see cref="M:Northwoods.Go.GoUndoManager.StartTransaction"/></returns>
        </member>
        <member name="M:Northwoods.Go.GoDocument.FinishTransaction(System.String)">
            <summary>
            Call the UndoManager's <see cref="M:Northwoods.Go.GoUndoManager.FinishTransaction(System.String)"/> method.
            </summary>
            <param name="tname"></param>
            <returns><see cref="M:Northwoods.Go.GoUndoManager.FinishTransaction(System.String)"/></returns>
        </member>
        <member name="M:Northwoods.Go.GoDocument.AbortTransaction">
            <summary>
            Call the UndoManager's <see cref="M:Northwoods.Go.GoUndoManager.AbortTransaction"/> method.
            </summary>
            <returns><see cref="M:Northwoods.Go.GoUndoManager.AbortTransaction"/></returns>
        </member>
        <member name="M:Northwoods.Go.GoDocument.CopyOldValueForUndo(Northwoods.Go.GoChangedEventArgs)">
            <summary>
            This is called during the construction of a <see cref="T:Northwoods.Go.GoChangedEventArgs"/> in
            order to record the older/previous value for a document change.
            </summary>
            <param name="e"></param>
            <remarks>
            This method needs to be overridden for a particular kind of changed event only
            when the previous value state is not held in arguments to the call to
            <see cref="M:Northwoods.Go.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/>, or when those arguments are actually references to
            objects containing the real previous state that might be overwritten or lost by
            subsequent changes.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoDocument.CopyNewValueForRedo(Northwoods.Go.GoChangedEventArgs)">
            <summary>
            This is called during the construction of a <see cref="T:Northwoods.Go.GoChangedEventArgs"/> in
            order to record the newer/next value for a document change.
            </summary>
            <param name="e"></param>
            <remarks>
            This method needs to be overridden for a particular kind of changed event only
            when the next value state is not held in arguments to the call to
            <see cref="M:Northwoods.Go.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/>, or when those arguments are actually references to
            objects containing the real newer state that might be overwritten or lost by
            subsequent changes.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoDocument.ChangeValue(Northwoods.Go.GoChangedEventArgs,System.Boolean)">
            <summary>
            This method is called by <see cref="T:Northwoods.Go.GoChangedEventArgs"/> in order to perform
            the Undo or Redo or a particular document change.
            </summary>
            <param name="e">this value's <see cref="P:Northwoods.Go.GoChangedEventArgs.Hint"/> property
            identifies the kind of document change</param>
            <param name="undo">true if this method should restore the older/previous state
            from before the change event; false if this method should restore the newer/next
            state from after the change event</param>
            <remarks>
            This handles changes to the document, such as <see cref="F:Northwoods.Go.GoDocument.ChangedAllowMove"/>;
            to the collection of document layers, such as <see cref="F:Northwoods.Go.GoLayerCollection.InsertedLayer"/>;
            and to any document layer, such as <see cref="F:Northwoods.Go.GoLayer.InsertedObject"/>.
            For a <see cref="F:Northwoods.Go.GoLayer.ChangedObject"/> event hint, this just calls
            <see cref="M:Northwoods.Go.GoObject.ChangeValue(Northwoods.Go.GoChangedEventArgs,System.Boolean)"/> on the <see cref="P:Northwoods.Go.GoChangedEventArgs.GoObject"/>,
            to handle all the changes for objects such as <see cref="F:Northwoods.Go.GoObject.ChangedMovable"/>.
            This method will raise an <c>ArgumentOutOfRangeException</c> if the argument
            <paramref name="e"/>'s <see cref="P:Northwoods.Go.GoChangedEventArgs.Hint"/> value is not recognized.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoDocument.MakesDirectedCycleFast(Northwoods.Go.IGoNode,Northwoods.Go.IGoNode)">
            <summary>
            This method returns true if adding a link from <paramref name="a"/> to <paramref name="b"/>
            would result in a cycle of directed links going through the node <paramref name="a"/>.
            </summary>
            <param name="a">the node to start from</param>
            <param name="b">the node that the proposed link would connect to</param>
            <returns></returns>
            <remarks>
            This method ignores any reflexive links--i.e. links whose ports are both part of the same node.
            This assumes that there are no directed cycles already present in the graph.
            If there are any such cycles, this recursive method may cause stack overflows or
            infinite recursion.
            However, this method is faster than <see cref="M:Northwoods.Go.GoDocument.MakesDirectedCycle(Northwoods.Go.IGoNode,Northwoods.Go.IGoNode)"/>.
            Set <see cref="P:Northwoods.Go.GoDocument.ValidCycle"/> to <see cref="F:Northwoods.Go.GoDocumentValidCycle.NotDirectedFast"/>
            when you can be sure there are never any cycles in the graph; otherwise set it
            to <see cref="F:Northwoods.Go.GoDocumentValidCycle.NotDirected"/>, which is slower but can handle
            existing cycles in the graph.
            </remarks>
            <seealso cref="P:Northwoods.Go.GoDocument.ValidCycle"/>
            <seealso cref="M:Northwoods.Go.GoDocument.MakesDirectedCycle(Northwoods.Go.IGoNode,Northwoods.Go.IGoNode)"/>
            <seealso cref="M:Northwoods.Go.GoDocument.MakesUndirectedCycle(Northwoods.Go.IGoNode,Northwoods.Go.IGoNode)"/>
            <seealso cref="M:Northwoods.Go.GoPort.IsValidLink(Northwoods.Go.IGoPort)"/>
        </member>
        <member name="M:Northwoods.Go.GoDocument.MakesDirectedCycle(Northwoods.Go.IGoNode,Northwoods.Go.IGoNode)">
            <summary>
            This method returns true if adding a link from <paramref name="a"/> to <paramref name="b"/>
            would result in a cycle of directed links going through the node <paramref name="a"/>.
            </summary>
            <param name="a">the node to start from</param>
            <param name="b">the node that the proposed link would connect to</param>
            <returns></returns>
            <remarks>
            This method ignores any reflexive links--i.e. links whose ports are both part of the same node.
            </remarks>
            <seealso cref="P:Northwoods.Go.GoDocument.ValidCycle"/>
            <seealso cref="M:Northwoods.Go.GoDocument.MakesDirectedCycleFast(Northwoods.Go.IGoNode,Northwoods.Go.IGoNode)"/>
            <seealso cref="M:Northwoods.Go.GoDocument.MakesUndirectedCycle(Northwoods.Go.IGoNode,Northwoods.Go.IGoNode)"/>
            <seealso cref="M:Northwoods.Go.GoPort.IsValidLink(Northwoods.Go.IGoPort)"/>
        </member>
        <member name="M:Northwoods.Go.GoDocument.MakesUndirectedCycle(Northwoods.Go.IGoNode,Northwoods.Go.IGoNode)">
            <summary>
            This method returns true if adding a link from <paramref name="a"/> to <paramref name="b"/>
            would result in a cycle or loop of links, regardless of link direction,
            going through the node <paramref name="a"/>.
            </summary>
            <param name="a">the node to start from</param>
            <param name="b">the node that the proposed link would connect to</param>
            <returns></returns>
            <remarks>
            This method ignores any reflexive links--i.e. links whose ports are both part of the same node.
            </remarks>
            <seealso cref="P:Northwoods.Go.GoDocument.ValidCycle"/>
            <seealso cref="M:Northwoods.Go.GoDocument.MakesDirectedCycle(Northwoods.Go.IGoNode,Northwoods.Go.IGoNode)"/>
            <seealso cref="M:Northwoods.Go.GoDocument.MakesDirectedCycleFast(Northwoods.Go.IGoNode,Northwoods.Go.IGoNode)"/>
            <seealso cref="M:Northwoods.Go.GoPort.IsValidLink(Northwoods.Go.IGoPort)"/>
        </member>
        <member name="M:Northwoods.Go.GoDocument.IsAvoidable(Northwoods.Go.GoObject)">
            <summary>
            This predicate determines whether the given object is considered when
            trying to route links whose <see cref="P:Northwoods.Go.GoLink.AvoidsNodes"/> property
            is true.
            </summary>
            <param name="obj"></param>
            <returns>
            By default this returns true when the <paramref name="obj"/> is an <see cref="T:Northwoods.Go.IGoNode"/>.
            </returns>
            <remarks>
            This is called on all top-level objects in the document.
            If the top-level object is a <see cref="T:Northwoods.Go.GoSubGraph"/>,
            it is called on its non-subgraph children.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoDocument.GetAvoidableRectangle(Northwoods.Go.GoObject)">
            <summary>
            Return the effective bounds of an object that should be avoided when
            routing links whose <see cref="P:Northwoods.Go.GoLink.AvoidsNodes"/> property is true.
            </summary>
            <param name="obj"></param>
            <returns>
            By default this returns the bounds of the <paramref name="obj"/>.
            </returns>
        </member>
        <member name="M:Northwoods.Go.GoDocument.FindPart(System.Int32)">
            <summary>
            Returns an <see cref="T:Northwoods.Go.IGoIdentifiablePart"/> in this document with the given ID.
            </summary>
            <param name="id"></param>
            <returns>null if no such part exists or if <see cref="P:Northwoods.Go.GoDocument.MaintainsPartID"/> is false</returns>
        </member>
        <member name="M:Northwoods.Go.GoDocument.EnsureUniquePartID">
            <summary>
            Make sure every <see cref="T:Northwoods.Go.IGoIdentifiablePart"/> in this
            document has a unique <see cref="P:Northwoods.Go.IGoIdentifiablePart.PartID"/>.
            </summary>
            <remarks>
            Although this is called automatically when setting <see cref="P:Northwoods.Go.GoDocument.MaintainsPartID"/>
            to true, you may need to call this method explicitly after adding some objects
            to this document while <see cref="P:Northwoods.Go.GoDocument.SuspendsUpdates"/> is true.
            </remarks>
        </member>
        <member name="F:Northwoods.Go.GoDocument.NullRect">
            <summary>
            This is an empty <c>RectangleF</c>, which is convenient when calling <see cref="M:Northwoods.Go.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/>.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoDocument.IsEmpty">
            <summary>
            This predicate is true when there are no objects in this collection.
            </summary>
            <seealso cref="P:Northwoods.Go.IGoCollection.IsEmpty"/>
        </member>
        <member name="P:Northwoods.Go.GoDocument.Count">
            <summary>
            Gets the total number of objects in all document layers.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoDocument.IsSynchronized">
            <summary>
            Gets whether this collection of objects is thread-safe.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoDocument.SyncRoot">
            <summary>
            Gets an object to be used for synchronizing access to this collection.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoDocument.Backwards">
            <summary>
            Gets an enumerable whose enumerator will iterate over the GoObjects in reverse order.
            </summary>
            <seealso cref="P:Northwoods.Go.IGoCollection.Backwards"/>
        </member>
        <member name="P:Northwoods.Go.GoDocument.Layers">
            <summary>
            Gets the collection of layers belonging to this document.
            </summary>
            <remarks>
            This value is the list of this document's layers.
            Use <see cref="T:Northwoods.Go.GoLayerCollection"/> methods for creating new
            document layers, removing them, or operating on particular layers,
            such as the <see cref="P:Northwoods.Go.GoLayerCollection.Default"/> one.
            </remarks>
            <seealso cref="P:Northwoods.Go.GoDocument.DefaultLayer"/>
            <seealso cref="P:Northwoods.Go.GoDocument.LinksLayer"/>
            <seealso cref="T:Northwoods.Go.GoLayer"/>
            <seealso cref="T:Northwoods.Go.GoView"/>
        </member>
        <member name="P:Northwoods.Go.GoDocument.DefaultLayer">
            <summary>
            Gets or sets the layer that is considered the default layer for document
            operations that do not specify a layer.
            </summary>
            <value>
            The <see cref="T:Northwoods.Go.GoLayer"/> value must not be null and must already
            belong to this document.
            </value>
            <seealso cref="P:Northwoods.Go.GoDocument.LinksLayer"/>
            <seealso cref="P:Northwoods.Go.GoDocument.Layers"/>
        </member>
        <member name="P:Northwoods.Go.GoDocument.LinksLayer">
            <summary>
            Gets or sets the layer that is normally used for holding links.
            </summary>
            <value>
            The <see cref="T:Northwoods.Go.GoLayer"/> value must not be null and must already
            belong to this document.  By default the links layer is the same as
            the default layer, because the document only has a single layer.
            </value>
            <remarks>
            It is common to want to display all links behind all nodes, or all
            links in front of all nodes.  Either policy can be implemented easily
            by creating a new document layer and assigning it to this property.
            </remarks>
            <seealso cref="P:Northwoods.Go.GoDocument.DefaultLayer"/>
            <seealso cref="P:Northwoods.Go.GoDocument.Layers"/>
        </member>
        <member name="P:Northwoods.Go.GoDocument.Name">
            <summary>
            Gets or sets a name for this document.
            </summary>
            <value>
            The name may be any string.  The default value is an empty string.
            A new value must not be null.
            </value>
            <remarks>
            Normally this property is used to hold a user-visible name for a document.
            Additional properties are then used to hold information about how to
            load and store the information in the document.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoDocument.Size">
            <summary>
            Gets or sets the size of this document.
            </summary>
            <value>
            The <c>SizeF</c> value is in document coordinates and should have non-negative
            width and height.
            </value>
            <remarks>
            The default behavior is that this property automatically expands to include all
            of the objects in the document.  This policy is implemented in
            <see cref="M:Northwoods.Go.GoDocument.UpdateDocumentBounds(Northwoods.Go.GoObject)"/>.  Set <see cref="P:Northwoods.Go.GoDocument.FixedSize"/> to avoid this
            default policy, or override <see cref="M:Northwoods.Go.GoDocument.UpdateDocumentBounds(Northwoods.Go.GoObject)"/> to implement your
            own policy.
            This property automatically affects what a view can show and where the user can
            scroll to.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoDocument.TopLeft">
            <summary>
            Gets or sets the top-left corner position of this document.
            </summary>
            <value>
            The <c>PointF</c> value is in document coordinates.
            Initially this value is (0, 0).
            </value>
            <remarks>
            The default behavior is that this property automatically moves toward
            negative coordinates to include all of the objects in the document.
            This policy is implemented in <see cref="M:Northwoods.Go.GoDocument.UpdateDocumentBounds(Northwoods.Go.GoObject)"/>.
            Set <see cref="P:Northwoods.Go.GoDocument.FixedSize"/> to avoid this default policy,
            or override <see cref="M:Northwoods.Go.GoDocument.UpdateDocumentBounds(Northwoods.Go.GoObject)"/> to implement your own policy.
            This property automatically affects what a view can show and where the user can
            scroll to.
            Note that the <see cref="P:Northwoods.Go.GoView.ShowsNegativeCoordinates"/> property has
            no effect on any document.  That property constrains what the user can see,
            even if the document includes objects at negative positions.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoDocument.FixedSize">
            <summary>
            Gets or sets whether <see cref="M:Northwoods.Go.GoDocument.UpdateDocumentBounds(Northwoods.Go.GoObject)"/> should update
            the <see cref="P:Northwoods.Go.GoDocument.Size"/> and <see cref="P:Northwoods.Go.GoDocument.TopLeft"/> properties as objects
            are added or moved.
            </summary>
            <value>
            The default value is false.
            </value>
            <seealso cref="P:Northwoods.Go.GoDocument.Size"/>
            <seealso cref="P:Northwoods.Go.GoDocument.TopLeft"/>
        </member>
        <member name="P:Northwoods.Go.GoDocument.PaperColor">
            <summary>
            Gets or sets the color for this document's background.
            </summary>
            <value>
            The default value is <c>Color.Empty</c>.
            </value>
            <remarks>
            Documents can have their own background, independent of any background
            color provided by a view.  The normal behavior is that a view will
            use the document's <c>PaperColor</c> property when that color is
            not <c>Color.Empty</c>, but will otherwise use the view's <c>BackColor</c>
            property.  However, there may be times when both or neither color is
            used in a rendering of the document.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoView.PaintPaperColor(System.Drawing.Graphics,System.Drawing.RectangleF)"/>
        </member>
        <member name="P:Northwoods.Go.GoDocument.AllowSelect">
            <summary>
            Gets or sets whether the user can select objects in this document.
            </summary>
            <remarks>
            A false value prevents the user from selecting objects in this document
            by the normal mechanisms.
            Even when this property value is true, some objects might not be
            selectable by the user because the object or its layer disallows it,
            or because the view disallows it, or because the object is not visible.
            Your code can always select objects programmatically by calling
            <c>aView.Selection.Select(obj)</c> or <c>aView.Selection.Add(obj)</c>.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoDocument.CanSelectObjects"/>
            <seealso cref="P:Northwoods.Go.GoLayer.AllowSelect"/>
            <seealso cref="P:Northwoods.Go.GoObject.Selectable"/>
        </member>
        <member name="P:Northwoods.Go.GoDocument.AllowMove">
            <summary>
            Gets or sets whether the user can move selected objects in this document.
            </summary>
            <remarks>
            A false value prevents the user from moving objects in this document
            by the normal mechanisms.
            Even when this property value is true, some objects might not be
            movable by the user because the object or its layer disallows it,
            or because the view disallows it.
            Your code can always move objects programmatically by calling
            <c>obj.Position = newPos</c>.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoDocument.CanMoveObjects"/>
            <seealso cref="P:Northwoods.Go.GoLayer.AllowMove"/>
            <seealso cref="P:Northwoods.Go.GoObject.Movable"/>
        </member>
        <member name="P:Northwoods.Go.GoDocument.AllowCopy">
            <summary>
            Gets or sets whether the user can copy selected objects in this document.
            </summary>
            <remarks>
            A false value prevents the user from copying objects in this document
            by the normal mechanisms.
            Even when this property value is true, some objects might not be
            copyable by the user because the object or its layer disallows it,
            or because the view disallows it.
            Your code can always copy objects programmatically by calling
            <see cref="M:Northwoods.Go.GoDocument.CopyFromCollection(Northwoods.Go.IGoCollection)"/>.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoDocument.CanCopyObjects"/>
            <seealso cref="P:Northwoods.Go.GoLayer.AllowCopy"/>
            <seealso cref="P:Northwoods.Go.GoObject.Copyable"/>
        </member>
        <member name="P:Northwoods.Go.GoDocument.AllowResize">
            <summary>
            Gets or sets whether the user can resize selected objects in this document.
            </summary>
            <remarks>
            A false value prevents the user from resizing objects in this document
            by the normal mechanisms.
            Even when this property value is true, some objects might not be
            resizable by the user because the object or its layer disallows it,
            or because the view disallows it.
            Your code can always resize objects programmatically by calling
            <c>obj.Size = newSize</c> or <c>obj.Bounds = newRect</c>.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoDocument.CanResizeObjects"/>
            <seealso cref="P:Northwoods.Go.GoLayer.AllowResize"/>
            <seealso cref="P:Northwoods.Go.GoObject.Resizable"/>
        </member>
        <member name="P:Northwoods.Go.GoDocument.AllowReshape">
            <summary>
            Gets or sets whether the user can reshape resizable objects in this document.
            </summary>
            <remarks>
            A false value prevents the user from reshaping objects in this document
            by the normal mechanisms.
            Even when this property value is true, some objects might not be
            reshapable by the user because the object or its layer disallows it,
            or because the view disallows it.
            Your code can always reshape objects programmatically by calling
            <c>obj.Size = newSize</c> or <c>obj.Bounds = newRect</c>.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoDocument.CanReshapeObjects"/>
            <seealso cref="P:Northwoods.Go.GoLayer.AllowReshape"/>
            <seealso cref="P:Northwoods.Go.GoObject.Reshapable"/>
        </member>
        <member name="P:Northwoods.Go.GoDocument.AllowDelete">
            <summary>
            Gets or sets whether the user can delete selected objects in this document.
            </summary>
            <remarks>
            A false value prevents the user from deleting objects in this document
            by the normal mechanisms.
            Even when this property value is true, some objects might not be
            deletable by the user because the object or its layer disallows it,
            or because the view disallows it.
            Your code can always delete objects programmatically by calling
            <c>obj.Remove()</c>.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoDocument.CanDeleteObjects"/>
            <seealso cref="P:Northwoods.Go.GoLayer.AllowDelete"/>
            <seealso cref="P:Northwoods.Go.GoObject.Deletable"/>
        </member>
        <member name="P:Northwoods.Go.GoDocument.AllowInsert">
            <summary>
            Gets or sets whether the user can insert objects in this document.
            </summary>
            <remarks>
            A false value prevents the user from inserting objects in this document
            by the normal mechanisms.
            Even when this property value is true, some objects might not be
            insertable by the user because the layer or view disallows it.
            Your code can always insert objects programmatically by calling
            <c>Add(obj)</c>.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoDocument.CanInsertObjects"/>
            <seealso cref="P:Northwoods.Go.GoLayer.AllowInsert"/>
        </member>
        <member name="P:Northwoods.Go.GoDocument.AllowLink">
            <summary>
            Gets or sets whether the user can link objects in this document.
            </summary>
            <remarks>
            A false value prevents the user from linking objects in this document
            by the normal mechanisms.
            Even when this property value is true, some objects might not be
            linkable by the user because the ports disallow it,
            or because the view disallows it.
            Your code can always link objects programmatically by calling
            <c>LinksLayers.Add(newLink)</c>, where <c>newLink</c> is
            a newly created instance of a class like <see cref="T:Northwoods.Go.GoLink"/> or
            <see cref="T:Northwoods.Go.GoLabeledLink"/> whose <see cref="P:Northwoods.Go.IGoLink.FromPort"/> and
            <see cref="P:Northwoods.Go.IGoLink.ToPort"/> properties have been set to ports in
            the same document.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoDocument.CanLinkObjects"/>
            <seealso cref="P:Northwoods.Go.GoLayer.AllowLink"/>
            <seealso cref="P:Northwoods.Go.GoView.AllowLink"/>
        </member>
        <member name="P:Northwoods.Go.GoDocument.AllowEdit">
            <summary>
            Gets or sets whether the user can edit objects in this document.
            </summary>
            <remarks>
            A false value prevents the user from editing objects in this document
            by the normal mechanisms.
            Even when this property value is true, some objects might not be
            editable by the user because the object or its layer disallows it,
            or because the view disallows it.
            Your code can always edit objects programmatically by calling
            <c>obj.DoBeginEdit(aView)</c>.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoDocument.CanEditObjects"/>
            <seealso cref="P:Northwoods.Go.GoLayer.AllowEdit"/>
            <seealso cref="P:Northwoods.Go.GoObject.Editable"/>
        </member>
        <member name="P:Northwoods.Go.GoDocument.IsModified">
            <summary>
            Gets or sets whether this document is considered changed from an earlier state.
            </summary>
            <remarks>
            This property is set to true in <see cref="M:Northwoods.Go.GoDocument.OnChanged(Northwoods.Go.GoChangedEventArgs)"/>.
            Setting this property to a new value causes a call to <see cref="M:Northwoods.Go.GoDocument.InvalidateViews"/>,
            but does not raise a Changed event.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoDocument.SuspendsUpdates">
            <summary>
            Gets or sets whether any Changed event handlers are called upon a
            document or document object change.
            </summary>
            <value>
            A value of true means that any Changed event handlers and any
            UndoManager are not called.
            A value of false means that the notifications do take place.
            The default value is false.
            </value>
            <remarks>
            When this property is true, no views of this document will be updated
            as the document is changed, and no undo/redo information is kept.
            When you set the property to false again, you will need to make
            sure all the views are correct (you may wish to call <see cref="M:Northwoods.Go.GoDocument.InvalidateViews"/>)
            and that the <see cref="P:Northwoods.Go.GoDocument.UndoManager"/>
            (if any) is in a satisfactory state (you may wish to call
            <see cref="M:Northwoods.Go.GoUndoManager.Clear"/>,
            so that it cannot be confused by the loss of any undo/redo
            information while this property was true).
            No Changed event is raised when this property is set.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoDocument.OnChanged(Northwoods.Go.GoChangedEventArgs)"/>
            <seealso cref="M:Northwoods.Go.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/>
            <seealso cref="P:Northwoods.Go.GoObject.SuspendsUpdates"/>
            <seealso cref="P:Northwoods.Go.GoDocument.SkipsUndoManager"/>
        </member>
        <member name="P:Northwoods.Go.GoDocument.SkipsUndoManager">
            <summary>
            Gets or sets whether the <see cref="P:Northwoods.Go.GoDocument.UndoManager"/> is notified upon a
            document or document object change.
            </summary>
            <value>
            A value of true means the <see cref="P:Northwoods.Go.GoDocument.UndoManager"/>'s
            <see cref="M:Northwoods.Go.GoUndoManager.DocumentChanged(System.Object,Northwoods.Go.GoChangedEventArgs)"/> method is not called.
            A value of false means that if there is an <see cref="P:Northwoods.Go.GoDocument.UndoManager"/>,
            it is notified so that it can record changes for undo and redo purposes.
            The default value is false.
            </value>
            <remarks>
            You must be careful that any changes that occur while this property
            is true will not confuse the user when they perform Undo's and Redo's
            but the changes are not undone or redone.
            No Changed event is raised when this property is set.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoDocument.OnChanged(Northwoods.Go.GoChangedEventArgs)"/>
            <seealso cref="M:Northwoods.Go.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/>
            <seealso cref="P:Northwoods.Go.GoObject.SkipsUndoManager"/>
            <seealso cref="M:Northwoods.Go.GoUndoManager.Clear"/>
        </member>
        <member name="P:Northwoods.Go.GoDocument.SerializesUndoManager">
            <summary>
            Gets or sets whether the <see cref="P:Northwoods.Go.GoDocument.UndoManager"/> is serialized
            when the document is.
            </summary>
            <value>
            The default value is false for Windows Forms but is true for Web Forms.
            </value>
            <remarks>
            If you set this to true, you will need to make sure that all
            <see cref="T:Northwoods.Go.GoChangedEventArgs"/> that are remembered as changes by the
            undo manager are themselves serializable.
            This might be a problem if you are tracking a field
            that has a non-serializable value, since those values are naturally
            remembered by the <see cref="T:Northwoods.Go.GoChangedEventArgs"/>.
            No Changed event is raised when this property is set.
            </remarks>
        </member>
        <member name="E:Northwoods.Go.GoDocument.Changed">
            <summary>
            The Changed event is raised whenever a document or a part of a document is modified.
            </summary>
            <remarks>
            Any Changed event handlers should not modify this document or any part of this document.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoDocument.DataFormat">
            <summary>
            Gets or sets this document's data format name for the clipboard.
            </summary>
            <value>
            Normally this <c>String</c> will be the fully qualified name
            of this document <c>Type</c>.
            This value must not be null.
            </value>
            <remarks>
            The default value for this property ensures that the user will not
            be able to copy the selection from one kind of document and paste
            it into another kind of document, but that they can do so when the
            document classes are the same.  If you want to be able to copy and
            paste between views where the documents are of different classes,
            you will have to assign the same values for this property for
            both documents.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoView.CopyToClipboard(Northwoods.Go.IGoCollection)"/>
            <seealso cref="M:Northwoods.Go.GoView.PasteFromClipboard"/>
        </member>
        <member name="P:Northwoods.Go.GoDocument.UndoManager">
            <summary>
            Gets or sets the UndoManager for this document.
            </summary>
            <value>
            This value may be null, when there is no <see cref="T:Northwoods.Go.GoUndoManager"/>.
            By default this value is null.
            </value>
            <remarks>
            Of course, when there is no UndoManager, the user cannot
            perform an Undo or a Redo.
            No Changed event is raised when this property is set.
            </remarks>
            <seealso cref="P:Northwoods.Go.GoDocument.SkipsUndoManager"/>
        </member>
        <member name="P:Northwoods.Go.GoDocument.UserFlags">
            <summary>
            Gets or sets an integer value associated with this document.
            </summary>
            <value>
            The initial value is zero.
            </value>
            <seealso cref="P:Northwoods.Go.GoDocument.UserObject"/>
        </member>
        <member name="P:Northwoods.Go.GoDocument.UserObject">
            <summary>
            Gets or sets an object associated with this document.
            </summary>
            <value>
            The initial value is null.  The value should be serializable.
            </value>
            <remarks>
            In some cases you may be able to avoid creating a subclass of <see cref="T:Northwoods.Go.GoDocument"/>
            by using this property to hold your application specific state.
            However, in general it would be best to derive a subclass holding your custom
            fields, because you will be able to control access to your document state
            more clearly, and because you will be able to override various methods to customize
            behavior more cleanly.
            </remarks>
            <seealso cref="P:Northwoods.Go.GoDocument.UserFlags"/>
        </member>
        <member name="P:Northwoods.Go.GoDocument.ValidCycle">
            <summary>
            Gets or sets whether a valid link can be made between two ports that may produce a
            directed or undirected cycle in this document.
            </summary>
            <value>
            This defaults to <see cref="F:Northwoods.Go.GoDocumentValidCycle.All"/>, resulting in no checks for a
            new link possibly producing any kind of cycle or loop.
            </value>
            <remarks>
            <see cref="M:Northwoods.Go.GoPort.IsValidLink(Northwoods.Go.IGoPort)"/> uses this property in the following manners:
            <list type="table">
            <listheader><term><see cref="T:Northwoods.Go.GoDocumentValidCycle"/></term></listheader>
            <item>
            <term><see cref="F:Northwoods.Go.GoDocumentValidCycle.All"/></term>
            produces no checking for cycles.
            </item>
            <item>
            <term><see cref="F:Northwoods.Go.GoDocumentValidCycle.NotDirected"/></term>
            checks for possible cycle consisting of directed links.
            This check is slower and consumes more memory than the "Fast" version,
            but will not fail even if there are cycles or loops in the graph.\
            </item>
            <item>
            <term><see cref="F:Northwoods.Go.GoDocumentValidCycle.NotDirectedFast"/></term>
            checks for possible cycle consisting of directed links,
            without concern for any existing directed cycles elsewhere in the graph.
            Thus using this mode may result in infinite recursion and stack overflows if
            there happen to be any directed cycles accessible from either port in a
            call to <see cref="M:Northwoods.Go.GoPort.IsValidLink(Northwoods.Go.IGoPort)"/>.
            </item>
            <item>
            <term><see cref="F:Northwoods.Go.GoDocumentValidCycle.NotUndirected"/></term>
            checks for possible cycle consisting of links in either direction.
            </item>
            <item>
            <term><see cref="F:Northwoods.Go.GoDocumentValidCycle.DestinationTree"/></term>
            checks for possible links that would cause the graph no longer to be a tree,
            with each node having at most one source link.
            </item>
            <item>
            <term><see cref="F:Northwoods.Go.GoDocumentValidCycle.SourceTree"/></term>
            checks for possible links that would cause the graph no longer to be a tree,
            with each node having at most one destination link.
            </item>
            </list>
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoDocument.MaintainsPartID">
            <summary>
            Gets or sets whether the document should make sure each <see cref="T:Northwoods.Go.IGoIdentifiablePart"/>
            has a unique <see cref="P:Northwoods.Go.IGoIdentifiablePart.PartID"/>.
            </summary>
            <remarks>
            Setting this property to true will call <see cref="M:Northwoods.Go.GoDocument.EnsureUniquePartID"/>.
            When this property is false, any <see cref="P:Northwoods.Go.IGoIdentifiablePart.PartID"/>'s are invalid.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoDocument.MaintainsPartIDs">
            <summary>
            This property has been replaced by <see cref="P:Northwoods.Go.GoDocument.MaintainsPartID"/>.
            </summary>
        </member>
        <member name="T:Northwoods.Go.GoInputState">
            <summary>
            Specifies a kind of abstract input event state.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoInputState.Cancel">
            <summary>
            Used by tools and object event handling methods to indicate that the
            user is no longer interested in completing the mouse gesture command.
            </summary>
            <remarks>
            Typically this is caused by the user pressing the Escape key.
            </remarks>
        </member>
        <member name="F:Northwoods.Go.GoInputState.Start">
            <summary>
            Used by tools and object event handling methods to indicate that the
            user has started a mouse gesture command.
            </summary>
            <remarks>
            Typically this is caused by a mouse button down event.
            </remarks>
        </member>
        <member name="F:Northwoods.Go.GoInputState.Continue">
            <summary>
            Used by tools and object event handling methods to indicate that the
            user is continuing a mouse gesture command.
            </summary>
            <remarks>
            Typically this is caused by a mouse move event.
            </remarks>
        </member>
        <member name="F:Northwoods.Go.GoInputState.Finish">
            <summary>
            Used by tools and object event handling methods to indicate that the
            user has finished a mouse gesture command.
            </summary>
            <remarks>
            Typically this is caused by a mouse button up event.
            </remarks>
        </member>
        <member name="T:Northwoods.Go.GoInputEventHandler">
            <summary>
            Represents methods that handle <see cref="T:Northwoods.Go.GoInputEventArgs"/>.
            </summary>
        </member>
        <member name="T:Northwoods.Go.GoInputEventArgs">
            <summary>
            Holds information for unified input events for views, for both
            keyboard input and mouse input, including mouse button and mouse wheel
            and drag-and-drop mouse actions, where no <see cref="T:Northwoods.Go.GoObject"/>
            is involved.
            </summary>
            <remarks>
            For input events that occur in the "background", there is of course
            no particular <see cref="T:Northwoods.Go.GoObject"/>.  For input events that do
            involve an object, event handlers use the <see cref="T:Northwoods.Go.GoObjectEventArgs"/>
            class.  When no particular input information is associated with an
            event, <see cref="T:Northwoods.Go.GoSelectionEventArgs"/> is used when there is a
            particular object, and <see cref="T:System.EventArgs"/> is used otherwise.
            </remarks>
            <seealso cref="E:Northwoods.Go.GoView.BackgroundDoubleClicked"/>
            <seealso cref="E:Northwoods.Go.GoView.BackgroundSingleClicked"/>
        </member>
        <member name="M:Northwoods.Go.GoInputEventArgs.#ctor">
            <summary>
            The constructor produces an empty object, describing no event.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoInputEventArgs.#ctor(Northwoods.Go.GoInputEventArgs)">
            <summary>
            This copy constructor makes a copy of the argument object.
            </summary>
            <param name="evt"></param>
        </member>
        <member name="P:Northwoods.Go.GoInputEventArgs.ViewPoint">
            <summary>
            Gets or sets the point at which this input event occurred.
            </summary>
            <value>
            The <c>Point</c> is in view coordinates.
            </value>
            <remarks>
            This should be valid for mouse and drag-and-drop events.
            For keyboard input, this is the last available mouse point.
            </remarks>
            <seealso cref="P:Northwoods.Go.GoInputEventArgs.DocPoint"/>
        </member>
        <member name="P:Northwoods.Go.GoInputEventArgs.DocPoint">
            <summary>
            Gets or sets the point at which this input event occurred.
            </summary>
            <value>
            The <c>PointF</c> is in document coordinates.
            </value>
            <remarks>
            This should be valid for mouse and drag-and-drop events.
            For keyboard input, this is the last available mouse point.
            </remarks>
            <seealso cref="P:Northwoods.Go.GoInputEventArgs.ViewPoint"/>
        </member>
        <member name="P:Northwoods.Go.GoInputEventArgs.Buttons">
            <summary>
            Gets or sets the MouseButtons used with this input event.
            </summary>
            <value>
            The <c>MouseButtons</c> value will be some combination of
            <c>MouseButtons.Left</c>, <c>MouseButtons.Middle</c>, and <c>MouseButtons.Right</c>.
            </value>
            <remarks>
            This value may not be meaningful for keyboard input, but should be valid
            for mouse and drag-and-drop events.
            </remarks>
            <seealso cref="P:Northwoods.Go.GoInputEventArgs.Modifiers"/>
        </member>
        <member name="P:Northwoods.Go.GoInputEventArgs.Modifiers">
            <summary>
            Gets or sets the modifier keys used with this input event.
            </summary>
            <value>
            The <c>Keys</c> value will be some combination of
            <c>Keys.Control</c>, <c>Keys.Shift</c>, and <c>Keys.Alt</c>.
            </value>
            <seealso cref="P:Northwoods.Go.GoInputEventArgs.Control"/>
            <seealso cref="P:Northwoods.Go.GoInputEventArgs.Shift"/>
            <seealso cref="P:Northwoods.Go.GoInputEventArgs.Alt"/>
            <seealso cref="P:Northwoods.Go.GoInputEventArgs.Buttons"/>
        </member>
        <member name="P:Northwoods.Go.GoInputEventArgs.Key">
            <summary>
            Gets or sets the key pressed as this input event.
            </summary>
            <remarks>
            The <c>Keys</c> value will be something like <c>Keys.C</c>.
            </remarks>
            <seealso cref="P:Northwoods.Go.GoInputEventArgs.Control"/>
            <seealso cref="P:Northwoods.Go.GoInputEventArgs.Shift"/>
            <seealso cref="P:Northwoods.Go.GoInputEventArgs.Alt"/>
            <seealso cref="P:Northwoods.Go.GoInputEventArgs.Buttons"/>
        </member>
        <member name="P:Northwoods.Go.GoInputEventArgs.MouseEventArgs">
            <summary>
            Gets or sets the MouseEventArgs associated with this input event.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoInputEventArgs.KeyEventArgs">
            <summary>
            Gets or sets the KeyEventArgs associated with this input event.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoInputEventArgs.DoubleClick">
            <summary>
            Gets or sets whether this is a double-click event.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoInputEventArgs.Delta">
            <summary>
            Gets or sets the amount of change associated with a mouse-wheel rotation.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoInputEventArgs.Control">
            <summary>
            Gets whether <see cref="P:Northwoods.Go.GoInputEventArgs.Modifiers"/> has <c>Keys.Control</c> set.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoInputEventArgs.Shift">
            <summary>
            Gets whether <see cref="P:Northwoods.Go.GoInputEventArgs.Modifiers"/> has <c>Keys.Shift</c> set.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoInputEventArgs.Alt">
            <summary>
            Gets whether <see cref="P:Northwoods.Go.GoInputEventArgs.Modifiers"/> has <c>Keys.Alt</c> set.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoInputEventArgs.IsContextButton">
            <summary>
            Gets whether <see cref="P:Northwoods.Go.GoInputEventArgs.Buttons"/> equals <c>MouseButtons.Right</c>.
            </summary>
        </member>
        <member name="T:Northwoods.Go.GoLayer">
            <summary>
            This represents a collection of objects that are to be drawn behind or in front of
            objects in other layers.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoLayer.ChangedObject">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoLayer.InsertedObject">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoLayer.RemovedObject">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoLayer.ChangedObjectLayer">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoLayer.ChangedAllowView">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoLayer.ChangedAllowSelect">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoLayer.ChangedAllowMove">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoLayer.ChangedAllowCopy">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoLayer.ChangedAllowResize">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoLayer.ChangedAllowReshape">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoLayer.ChangedAllowDelete">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoLayer.ChangedAllowInsert">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoLayer.ChangedAllowLink">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoLayer.ChangedAllowEdit">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoLayer.ChangedAllowPrint">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoLayer.ChangedIdentifier">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoLayer.Add(Northwoods.Go.GoObject)">
            <summary>
            Add an object to this layer.
            </summary>
            <param name="obj"></param>
            <remarks>
            The <paramref name="obj"/> must not already belong to a different document or view, nor to a group.
            If the object already belongs to this layer, nothing happens.
            The object's <see cref="P:Northwoods.Go.GoObject.Layer"/> property will be changed to be this layer.
            If the object already belonged to a different layer in this same document or view,
            the Changed hint will be <see cref="F:Northwoods.Go.GoLayer.ChangedObjectLayer"/>, otherwise it will be
            <see cref="F:Northwoods.Go.GoLayer.InsertedObject"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoLayer.Remove(Northwoods.Go.GoObject)">
            <summary>
            Make sure this layer no longer holds an object.
            </summary>
            <param name="obj"></param>
            <remarks>
            It is an error if the object <paramref name="obj"/> currently belongs to a different layer.
            If the object already is not in this layer, this method does nothing.
            Just before changing the object's <see cref="P:Northwoods.Go.GoObject.Layer"/> property
            to null, the object's document or view will be notified with a Changed hint
            of <see cref="F:Northwoods.Go.GoLayer.RemovedObject"/>.
            During that notification the object's <see cref="P:Northwoods.Go.GoObject.BeingRemoved"/>
            property will be true.
            For convenience, if the object belongs to a <see cref="T:Northwoods.Go.GoGroup"/>,
            this method will remove the object from the group.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoLayer.Contains(Northwoods.Go.GoObject)">
            <summary>
            Determine if an object belongs to this layer.
            </summary>
            <param name="obj"></param>
            <returns></returns>
            <remarks>
            This implementation currently depends on the <see cref="P:Northwoods.Go.GoObject.Layer"/>
            property, a "back-pointer".
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoLayer.Clear">
            <summary>
            Remove all objects from this layer.
            </summary>
            <remarks>
            This repeatedly calls <see cref="M:Northwoods.Go.GoLayer.Remove(Northwoods.Go.GoObject)"/>.
            The default implementation tries to avoid duplicate removals,
            in case removing one object automatically removes another one.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoLayer.CopyArray">
            <summary>
            Returns a newly allocated array of all of the GoObjects in this collection.
            </summary>
            <seealso cref="M:Northwoods.Go.IGoCollection.CopyArray"/>
        </member>
        <member name="M:Northwoods.Go.GoLayer.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies references to all of the objects in this layer into an Array.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Northwoods.Go.GoLayer.CopyTo(Northwoods.Go.GoObject[],System.Int32)">
            <summary>
            Copies references to all of the objects in this layer into an array of <see cref="T:Northwoods.Go.GoObject"/>s.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Northwoods.Go.GoLayer.GetEnumerator">
            <summary>
            Get an GoLayerEnumerator that iterates over all objects in this layer.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.GoLayer.CanViewObjects">
            <summary>
            Called to see if the user can see objects in this layer.
            </summary>
            <remarks>
            This just returns <c>AllowView</c>.
            This predicate is used by methods such as <see cref="M:Northwoods.Go.GoLayer.Paint(System.Drawing.Graphics,Northwoods.Go.GoView,System.Drawing.RectangleF)"/>.
            </remarks>
            <seealso cref="P:Northwoods.Go.GoLayer.AllowView"/>
            <seealso cref="M:Northwoods.Go.GoObject.CanView"/>
            <seealso cref="M:Northwoods.Go.GoLayer.CanPrintObjects"/>
        </member>
        <member name="M:Northwoods.Go.GoLayer.CanPrintObjects">
            <summary>
            Called to see if the view should print objects in this layer.
            </summary>
            <remarks>
            This just returns <c>AllowPrint</c>.
            This predicate is used by methods such as <see cref="M:Northwoods.Go.GoLayer.Paint(System.Drawing.Graphics,Northwoods.Go.GoView,System.Drawing.RectangleF)"/>.
            </remarks>
            <seealso cref="P:Northwoods.Go.GoLayer.AllowPrint"/>
            <seealso cref="M:Northwoods.Go.GoLayer.CanViewObjects"/>
        </member>
        <member name="M:Northwoods.Go.GoLayer.CanSelectObjects">
            <summary>
            Called to see if the user can select objects in this layer.
            </summary>
            <remarks>
            This just returns <c>AllowSelect</c>, and, if this is a document layer,
            <c>Document.CanSelectObjects</c>.
            This predicate is used by methods such as <see cref="M:Northwoods.Go.GoView.SelectInRectangle(System.Drawing.RectangleF)"/>
            and <see cref="M:Northwoods.Go.GoLayer.PickObject(Northwoods.Go.PointF,System.Boolean)"/>.
            </remarks>
            <seealso cref="P:Northwoods.Go.GoLayer.AllowSelect"/>
            <seealso cref="M:Northwoods.Go.GoDocument.CanSelectObjects"/>
            <seealso cref="M:Northwoods.Go.GoObject.CanSelect"/>
        </member>
        <member name="M:Northwoods.Go.GoLayer.CanMoveObjects">
            <summary>
            Called to see if the user can move selected objects in this layer.
            </summary>
            <remarks>
            This just returns <c>AllowMove</c>, and, if this is a document layer,
            <c>Document.CanMoveObjects</c>.
            This predicate is used by methods such as <see cref="M:Northwoods.Go.GoView.MoveSelection(Northwoods.Go.GoSelection,System.Drawing.SizeF,System.Boolean)"/>.
            </remarks>
            <seealso cref="P:Northwoods.Go.GoLayer.AllowMove"/>
            <seealso cref="M:Northwoods.Go.GoDocument.CanMoveObjects"/>
            <seealso cref="M:Northwoods.Go.GoObject.CanMove"/>
        </member>
        <member name="M:Northwoods.Go.GoLayer.CanCopyObjects">
            <summary>
            Called to see if the user can copy selected objects in this layer.
            </summary>
            <remarks>
            This just returns <c>AllowCopy</c>, and, if this is a document layer,
            <c>Document.CanCopyObjects</c>.
            This predicate is used by methods such as <see cref="M:Northwoods.Go.GoView.CopySelection(Northwoods.Go.GoSelection,System.Drawing.SizeF,System.Boolean)"/>
            and <see cref="M:Northwoods.Go.GoDocument.CopyFromCollection(Northwoods.Go.IGoCollection)"/>.
            </remarks>
            <seealso cref="P:Northwoods.Go.GoLayer.AllowCopy"/>
            <seealso cref="M:Northwoods.Go.GoDocument.CanCopyObjects"/>
            <seealso cref="M:Northwoods.Go.GoObject.CanCopy"/>
        </member>
        <member name="M:Northwoods.Go.GoLayer.CanResizeObjects">
            <summary>
            Called to see if the user can resize selected objects in this layer.
            </summary>
            <remarks>
            This just returns <c>AllowResize</c>, and, if this is a document layer,
            <c>Document.CanResizeObjects</c>.
            This predicate is used by <see cref="T:Northwoods.Go.GoToolResizing"/>.
            </remarks>
            <seealso cref="P:Northwoods.Go.GoLayer.AllowResize"/>
            <seealso cref="M:Northwoods.Go.GoDocument.CanResizeObjects"/>
            <seealso cref="M:Northwoods.Go.GoObject.CanResize"/>
        </member>
        <member name="M:Northwoods.Go.GoLayer.CanReshapeObjects">
            <summary>
            Called to see if the user can reshape resizable objects in this layer.
            </summary>
            <remarks>
            This just returns <c>AllowReshape</c>, and, if this is a document layer,
            <c>Document.CanReshapeObjects</c>.
            This predicate is used by <see cref="T:Northwoods.Go.GoToolResizing"/>.
            </remarks>
            <seealso cref="P:Northwoods.Go.GoLayer.AllowReshape"/>
            <seealso cref="M:Northwoods.Go.GoDocument.CanReshapeObjects"/>
            <seealso cref="M:Northwoods.Go.GoObject.CanReshape"/>
        </member>
        <member name="M:Northwoods.Go.GoLayer.CanDeleteObjects">
            <summary>
            Called to see if the user can delete selected objects in this layer.
            </summary>
            <remarks>
            This just returns <c>AllowDelete</c>, and, if this is a document layer,
            <c>Document.CanDeleteObjects</c>.
            This predicate is used by methods such as <see cref="M:Northwoods.Go.GoView.DeleteSelection(Northwoods.Go.GoSelection)"/>
            and <see cref="M:Northwoods.Go.GoView.EditCut"/>.
            </remarks>
            <seealso cref="P:Northwoods.Go.GoLayer.AllowDelete"/>
            <seealso cref="M:Northwoods.Go.GoDocument.CanDeleteObjects"/>
            <seealso cref="M:Northwoods.Go.GoObject.CanDelete"/>
        </member>
        <member name="M:Northwoods.Go.GoLayer.CanInsertObjects">
            <summary>
            Called to see if the user can insert objects in this layer.
            </summary>
            <remarks>
            This just returns <c>AllowInsert</c>, and, if this is a document layer,
            <c>Document.CanInsertObjects</c>.
            This predicate is used by methods such as <see cref="M:Northwoods.Go.GoView.EditPaste"/> and by
            <see cref="T:Northwoods.Go.GoToolDragging"/>.
            </remarks>
            <seealso cref="P:Northwoods.Go.GoLayer.AllowInsert"/>
            <seealso cref="M:Northwoods.Go.GoDocument.CanInsertObjects"/>
        </member>
        <member name="M:Northwoods.Go.GoLayer.CanLinkObjects">
            <summary>
            Called to see if the user can link objects in this layer.
            </summary>
            <remarks>
            This just returns <c>AllowLink &amp;&amp; Document.CanLinkObjects</c>.
            This predicate is used by <see cref="T:Northwoods.Go.GoToolLinking"/>.
            </remarks>
            <seealso cref="P:Northwoods.Go.GoLayer.AllowLink"/>
            <seealso cref="M:Northwoods.Go.GoDocument.CanLinkObjects"/>
        </member>
        <member name="M:Northwoods.Go.GoLayer.CanEditObjects">
            <summary>
            Called to see if the user can edit objects in this layer.
            </summary>
            <remarks>
            This just returns <c>AllowEdit &amp;&amp; Document.CanEditObjects</c>.
            This predicate is used by methods such as <see cref="M:Northwoods.Go.GoText.OnSingleClick(Northwoods.Go.GoInputEventArgs,Northwoods.Go.GoView)"/>.
            </remarks>
            <seealso cref="P:Northwoods.Go.GoLayer.AllowEdit"/>
            <seealso cref="M:Northwoods.Go.GoDocument.CanEditObjects"/>
        </member>
        <member name="M:Northwoods.Go.GoLayer.SetModifiable(System.Boolean)">
            <summary>
            This method sets some properties that determine whether the user can
            modify any objects in this layer.
            </summary>
            <param name="b"></param>
            <remarks>
            By default this just sets the <see cref="P:Northwoods.Go.GoLayer.AllowMove"/>, <see cref="P:Northwoods.Go.GoLayer.AllowResize"/>, 
            <see cref="P:Northwoods.Go.GoLayer.AllowReshape"/>, <see cref="P:Northwoods.Go.GoLayer.AllowDelete"/>, <see cref="P:Northwoods.Go.GoLayer.AllowInsert"/>, 
            <see cref="P:Northwoods.Go.GoLayer.AllowLink"/>, and <see cref="P:Northwoods.Go.GoLayer.AllowEdit"/> properties.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoLayer.Paint(System.Drawing.Graphics,Northwoods.Go.GoView,System.Drawing.RectangleF)">
            <summary>
            Render all of the visible objects in this layer within a rectangle to a <c>Graphics</c>.
            </summary>
            <param name="g"></param>
            <param name="view"></param>
            <param name="clipRect"></param>
            <remarks>
            This method calls <see cref="M:Northwoods.Go.GoObject.Paint(System.Drawing.Graphics,Northwoods.Go.GoView)"/> on each object in this
            layer whose <see cref="M:Northwoods.Go.GoObject.CanView"/> property is true and whose
            paint bounds, calculated by calling <see cref="M:Northwoods.Go.GoObject.ExpandPaintBounds(System.Drawing.RectangleF,Northwoods.Go.GoView)"/>,
            intersects with <paramref name="clipRect"/>.
            If <see cref="P:Northwoods.Go.GoView.IsPrinting"/> is true, it calls <see cref="M:Northwoods.Go.GoObject.CanPrint"/>
            on each object instead of calling <see cref="M:Northwoods.Go.GoObject.CanView"/>.
            If <see cref="M:Northwoods.Go.GoLayer.CanViewObjects"/> is false,
            or if <see cref="P:Northwoods.Go.GoView.IsPrinting"/> is true
            and <see cref="M:Northwoods.Go.GoLayer.CanPrintObjects"/> is false, this method does nothing.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoLayer.PickObject(Northwoods.Go.PointF,System.Boolean)">
            <summary>
            Find a visible object in this layer at a given point.
            </summary>
            <param name="p">the point in document coordinates</param>
            <param name="selectableOnly">this is passed on to calls to <see cref="M:Northwoods.Go.GoObject.Pick(Northwoods.Go.PointF,System.Boolean)"/></param>
            <returns>the result of <see cref="M:Northwoods.Go.GoObject.Pick(Northwoods.Go.PointF,System.Boolean)"/>; null if no object contains the point <paramref name="p"/></returns>
            <remarks>
            This method calls <see cref="M:Northwoods.Go.GoObject.Pick(Northwoods.Go.PointF,System.Boolean)"/> on each object in this
            layer until a call returns an object, which is returned by this method.
            The objects are tested in reverse order in which they are painted, so
            as to get the "top-most" object at the given point <paramref name="p"/>.
            If <see cref="M:Northwoods.Go.GoLayer.CanViewObjects"/> is false, this method does nothing.
            If <paramref name="selectableOnly"/> is true but <see cref="M:Northwoods.Go.GoLayer.CanSelectObjects"/>
            is false, this method returns null.
            Please note that if an object is found, it might not be a top-level object.
            In fact, when <paramref name="selectableOnly"/> is false, it is very likely
            that if any object is found at the given point, it will be a child of some
            group.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoLayer.IsEmpty">
            <summary>
            This predicate is true when there are no objects in this collection.
            </summary>
            <seealso cref="P:Northwoods.Go.IGoCollection.IsEmpty"/>
        </member>
        <member name="P:Northwoods.Go.GoLayer.Count">
            <summary>
            Gets the number of objects in this layer.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoLayer.IsSynchronized">
            <summary>
            Gets whether this collection of objects is thread-safe.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoLayer.SyncRoot">
            <summary>
            Gets an object to be used for synchronizing access to this collection.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoLayer.Backwards">
            <summary>
            Gets an enumerable whose enumerator will iterate over the GoObjects in reverse order.
            </summary>
            <seealso cref="P:Northwoods.Go.IGoCollection.Backwards"/>
        </member>
        <member name="P:Northwoods.Go.GoLayer.LayerCollectionContainer">
            <summary>
            Gets the document or view to which this layer belongs.
            </summary>
            <seealso cref="P:Northwoods.Go.GoLayer.IsInDocument"/>
            <seealso cref="P:Northwoods.Go.GoLayer.Document"/>
            <seealso cref="P:Northwoods.Go.GoLayer.IsInView"/>
            <seealso cref="P:Northwoods.Go.GoLayer.View"/>
        </member>
        <member name="P:Northwoods.Go.GoLayer.IsInDocument">
            <summary>
            Gets whether this layer belongs to a document.
            </summary>
            <seealso cref="P:Northwoods.Go.GoLayer.LayerCollectionContainer"/>
            <seealso cref="P:Northwoods.Go.GoLayer.Document"/>
        </member>
        <member name="P:Northwoods.Go.GoLayer.Document">
            <summary>
            Gets the document that this layer belongs to, or null if this is a view layer.
            </summary>
            <seealso cref="P:Northwoods.Go.GoLayer.LayerCollectionContainer"/>
            <seealso cref="P:Northwoods.Go.GoLayer.IsInDocument"/>
        </member>
        <member name="P:Northwoods.Go.GoLayer.IsInView">
            <summary>
            Gets whether this layer belongs to a view.
            </summary>
            <seealso cref="P:Northwoods.Go.GoLayer.LayerCollectionContainer"/>
            <seealso cref="P:Northwoods.Go.GoLayer.View"/>
        </member>
        <member name="P:Northwoods.Go.GoLayer.View">
            <summary>
            Gets the view that this layer belongs to, or null if this is a document layer.
            </summary>
            <seealso cref="P:Northwoods.Go.GoLayer.LayerCollectionContainer"/>
            <seealso cref="P:Northwoods.Go.GoLayer.IsInView"/>
        </member>
        <member name="P:Northwoods.Go.GoLayer.AllowView">
            <summary>
            Gets or sets whether the user can see objects in this layer.
            </summary>
            <remarks>
            A false value prevents the user from seeing objects in this layer
            by the normal mechanisms.
            Even when this property value is true, some objects might not be
            seeable by the user because the object is not visible.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoLayer.CanViewObjects"/>
            <seealso cref="P:Northwoods.Go.GoObject.Visible"/>
        </member>
        <member name="P:Northwoods.Go.GoLayer.AllowPrint">
            <summary>
            Gets or sets whether the objects in this layer will be printed.
            </summary>
            <remarks>
            A false value prevents the view from printing objects in this layer.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoLayer.CanPrintObjects"/>
            <seealso cref="M:Northwoods.Go.GoLayer.CanViewObjects"/>
        </member>
        <member name="P:Northwoods.Go.GoLayer.AllowSelect">
            <summary>
            Gets or sets whether the user can select objects in this layer.
            </summary>
            <remarks>
            A false value prevents the user from selecting objects in this layer
            by the normal mechanisms.
            Even when this property value is true, some objects might not be
            selectable by the user because the object or its document disallows it,
            or because the view disallows it, or because the object is not visible.
            Your code can always select objects programmatically by calling
            <c>aView.Selection.Select(obj)</c> or <c>aView.Selection.Add(obj)</c>.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoLayer.CanSelectObjects"/>
            <seealso cref="P:Northwoods.Go.GoDocument.AllowSelect"/>
            <seealso cref="P:Northwoods.Go.GoObject.Selectable"/>
        </member>
        <member name="P:Northwoods.Go.GoLayer.AllowMove">
            <summary>
            Gets or sets whether the user can move selected objects in this layer.
            </summary>
            <remarks>
            A false value prevents the user from moving objects in this layer
            by the normal mechanisms.
            Even when this property value is true, some objects might not be
            movable by the user because the object or its document disallows it,
            or because the view disallows it.
            Your code can always move objects programmatically by calling
            <c>obj.Position = newPos</c>.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoLayer.CanMoveObjects"/>
            <seealso cref="P:Northwoods.Go.GoDocument.AllowMove"/>
            <seealso cref="P:Northwoods.Go.GoObject.Movable"/>
        </member>
        <member name="P:Northwoods.Go.GoLayer.AllowCopy">
            <summary>
            Gets or sets whether the user can copy selected objects in this layer.
            </summary>
            <remarks>
            A false value prevents the user from copying objects in this layer
            by the normal mechanisms.
            Even when this property value is true, some objects might not be
            copyable by the user because the object or its document disallows it,
            or because the view disallows it.
            Your code can always copy objects programmatically by calling
            <see cref="!:Document.CopyFromCollection"/>.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoLayer.CanCopyObjects"/>
            <seealso cref="P:Northwoods.Go.GoDocument.AllowCopy"/>
            <seealso cref="P:Northwoods.Go.GoObject.Copyable"/>
        </member>
        <member name="P:Northwoods.Go.GoLayer.AllowResize">
            <summary>
            Gets or sets whether the user can resize selected objects in this layer.
            </summary>
            <remarks>
            A false value prevents the user from resizing objects in this layer
            by the normal mechanisms.
            Even when this property value is true, some objects might not be
            resizable by the user because the object or its document disallows it,
            or because the view disallows it.
            Your code can always resize objects programmatically by calling
            <c>obj.Size = newSize</c> or <c>obj.Bounds = newRect</c>.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoLayer.CanResizeObjects"/>
            <seealso cref="P:Northwoods.Go.GoDocument.AllowResize"/>
            <seealso cref="P:Northwoods.Go.GoObject.Resizable"/>
        </member>
        <member name="P:Northwoods.Go.GoLayer.AllowReshape">
            <summary>
            Gets or sets whether the user can reshape resizable objects in this layer.
            </summary>
            <remarks>
            A false value prevents the user from reshaping objects in this layer
            by the normal mechanisms.
            Even when this property value is true, some objects might not be
            reshapable by the user because the object or its document disallows it,
            or because the view disallows it.
            Your code can always reshape objects programmatically by calling
            <c>obj.Size = newSize</c> or <c>obj.Bounds = newRect</c>.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoLayer.CanReshapeObjects"/>
            <seealso cref="P:Northwoods.Go.GoDocument.AllowReshape"/>
            <seealso cref="P:Northwoods.Go.GoObject.Reshapable"/>
        </member>
        <member name="P:Northwoods.Go.GoLayer.AllowDelete">
            <summary>
            Gets or sets whether the user can delete selected objects in this layer.
            </summary>
            <remarks>
            A false value prevents the user from deleting objects in this layer
            by the normal mechanisms.
            Even when this property value is true, some objects might not be
            deletable by the user because the object or its document disallows it,
            or because the view disallows it.
            Your code can always delete objects programmatically by calling
            <c>obj.Remove()</c>.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoLayer.CanDeleteObjects"/>
            <seealso cref="P:Northwoods.Go.GoDocument.AllowDelete"/>
            <seealso cref="P:Northwoods.Go.GoObject.Deletable"/>
        </member>
        <member name="P:Northwoods.Go.GoLayer.AllowInsert">
            <summary>
            Gets or sets whether the user can insert objects in this layer.
            </summary>
            <remarks>
            A false value prevents the user from inserting objects in this layer
            by the normal mechanisms.
            Even when this property value is true, some objects might not be
            insertable by the user because the document or view disallows it.
            Your code can always insert objects programmatically by calling
            <c>Add(obj)</c>.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoLayer.CanInsertObjects"/>
            <seealso cref="P:Northwoods.Go.GoDocument.AllowInsert"/>
        </member>
        <member name="P:Northwoods.Go.GoLayer.AllowLink">
            <summary>
            Gets or sets whether the user can link objects in this layer.
            </summary>
            <remarks>
            A false value prevents the user from linking objects in this layer
            by the normal mechanisms.
            Even when this property value is true, some objects might not be
            linkable by the user because the document or the ports disallow it,
            or because the view disallows it.
            Your code can always link objects programmatically by calling
            <c>Document.LinksLayers.Add(newLink)</c>, where <c>newLink</c> is
            a newly created instance of a class like <see cref="T:Northwoods.Go.GoLink"/> or
            <see cref="T:Northwoods.Go.GoLabeledLink"/> whose <see cref="P:Northwoods.Go.IGoLink.FromPort"/> and
            <see cref="P:Northwoods.Go.IGoLink.ToPort"/> properties have been set to ports in
            the same document.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoLayer.CanLinkObjects"/>
            <seealso cref="P:Northwoods.Go.GoDocument.AllowLink"/>
        </member>
        <member name="P:Northwoods.Go.GoLayer.AllowEdit">
            <summary>
            Gets or sets whether the user can edit objects in this layer.
            </summary>
            <remarks>
            A false value prevents the user from editing objects in this layer
            by the normal mechanisms.
            Even when this property value is true, some objects might not be
            editable by the user because the document or the object disallows it,
            or because the view disallows it.
            Your code can always edit objects programmatically by calling
            <c>obj.DoBeginEdit(aView)</c>.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoLayer.CanEditObjects"/>
            <seealso cref="P:Northwoods.Go.GoDocument.AllowEdit"/>
        </member>
        <member name="P:Northwoods.Go.GoLayer.Identifier">
            <summary>
            Gets or sets an identifier for this layer.
            </summary>
            <value>
            The default value is null.  However, the initial, default layer for
            each <see cref="T:Northwoods.Go.GoLayerCollection"/> has as a default identifier an
            instance of <c>Integer</c> <c>0</c>.
            </value>
            <remarks>
            Typically identifiers will be <c>String</c>s, but could be other more
            complex serializable objects.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoDocument.MergeLayersFrom(Northwoods.Go.GoDocument)"/>
        </member>
        <member name="T:Northwoods.Go.GoLayerEnumerator">
            <summary>
            Iterate over the GoObjects that are in this layer.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoLayerEnumerator.GetEnumerator">
            <summary>
            Gets an enumerator for iterating over the GoObjects in this layer.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoLayerEnumerator.MoveNext">
            <summary>
            Advance the enumerator to the next GoObject.
            </summary>
            <returns>True if there is a next GoObject; false if it has finished iterating over the collection.</returns>
        </member>
        <member name="M:Northwoods.Go.GoLayerEnumerator.Reset">
            <summary>
            Reset the enumerator to its original position.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoLayerEnumerator.Current">
            <summary>
             Gets the current object in the layer.
            </summary>
        </member>
        <member name="T:Northwoods.Go.GoLayerCollection">
            <summary>
            An ordered collection of layers.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoLayerCollection.InsertedLayer">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoLayerCollection.RemovedLayer">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoLayerCollection.MovedLayer">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoLayerCollection.ChangedDefault">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoLayerCollection.CopyTo(System.Array,System.Int32)">
            <summary>
            Copies references to all of the layers in this collection into the given Array.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Northwoods.Go.GoLayerCollection.CopyTo(Northwoods.Go.GoLayer[],System.Int32)">
            <summary>
            Copies references to all of the layers in this collection into the given array of <see cref="T:Northwoods.Go.GoLayer"/>s.
            </summary>
            <param name="array"></param>
            <param name="index"></param>
        </member>
        <member name="M:Northwoods.Go.GoLayerCollection.GetEnumerator">
            <summary>
            Get an Enumerator that iterates over all of the layers of this collection.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.GoLayerCollection.CopyArray">
            <summary>
            Returns a newly allocated array holding references to all of the layers.
            </summary>
            <seealso cref="M:Northwoods.Go.IGoCollection.CopyArray"/>
        </member>
        <member name="M:Northwoods.Go.GoLayerCollection.CreateNewLayerAfter(Northwoods.Go.GoLayer)">
            <summary>
            Create a new <see cref="T:Northwoods.Go.GoLayer"/> positioned after (i.e. in front of) an existing layer.
            </summary>
            <param name="dest"></param>
            <returns>The new <see cref="T:Northwoods.Go.GoLayer"/>.</returns>
            <remarks>
            The new layer will be owned by this collection's <see cref="P:Northwoods.Go.GoLayerCollection.LayerCollectionContainer"/>,
            which may be either a <see cref="T:Northwoods.Go.GoDocument"/> or a <see cref="T:Northwoods.Go.GoView"/>.
            The <see cref="M:Northwoods.Go.IGoLayerCollectionContainer.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/>
            call gets a <see cref="F:Northwoods.Go.GoLayerCollection.InsertedLayer"/> hint.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoLayerCollection.CreateNewLayerBefore(Northwoods.Go.GoLayer)"/>
            <seealso cref="M:Northwoods.Go.GoLayerCollection.Remove(Northwoods.Go.GoLayer)"/>
        </member>
        <member name="M:Northwoods.Go.GoLayerCollection.CreateNewLayerBefore(Northwoods.Go.GoLayer)">
            <summary>
            Create a new <see cref="T:Northwoods.Go.GoLayer"/> positioned before (i.e. behind) an existing layer.
            </summary>
            <param name="dest"></param>
            <returns>The new <see cref="T:Northwoods.Go.GoLayer"/>.</returns>
            <remarks>
            The new layer will be owned by this collection's <see cref="P:Northwoods.Go.GoLayerCollection.LayerCollectionContainer"/>,
            which may be either a <see cref="T:Northwoods.Go.GoDocument"/> or a <see cref="T:Northwoods.Go.GoView"/>.
            The <see cref="M:Northwoods.Go.IGoLayerCollectionContainer.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/>
            call gets a <see cref="F:Northwoods.Go.GoLayerCollection.InsertedLayer"/> hint.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoLayerCollection.CreateNewLayerAfter(Northwoods.Go.GoLayer)"/>
            <seealso cref="M:Northwoods.Go.GoLayerCollection.Remove(Northwoods.Go.GoLayer)"/>
        </member>
        <member name="M:Northwoods.Go.GoLayerCollection.InsertDocumentLayerAfter(Northwoods.Go.GoLayer,Northwoods.Go.GoLayer)">
            <summary>
            Add a reference to a document layer into this view's collection of layers.
            </summary>
            <param name="dest">A layer already in this view's collection of layers.</param>
            <param name="doclayer">A layer owned by this view's document.</param>
            <remarks>
            By allowing a view's collection of layers to include both view layers owned by
            the view and document layers owned by the view's document, we permit each view on
            a document to display a different set of document layers, perhaps in different
            orders.
            This functionality is called by <see cref="M:Northwoods.Go.GoView.InitializeLayersFromDocument"/>.
            It is an error if this collection does not belong to a <see cref="T:Northwoods.Go.GoView"/>,
            or if <paramref name="doclayer"/> does not belong to this view's <see cref="P:Northwoods.Go.GoView.Document"/>.
            The document layer continues to be owned by the document; the view just acquires
            a shared reference to that layer.
            The <see cref="M:Northwoods.Go.IGoLayerCollectionContainer.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/>
            call gets a <see cref="F:Northwoods.Go.GoLayerCollection.InsertedLayer"/> hint.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoLayerCollection.InsertDocumentLayerBefore(Northwoods.Go.GoLayer,Northwoods.Go.GoLayer)"/>
            <seealso cref="M:Northwoods.Go.GoLayerCollection.CreateNewLayerAfter(Northwoods.Go.GoLayer)"/>
            <seealso cref="M:Northwoods.Go.GoLayerCollection.Remove(Northwoods.Go.GoLayer)"/>
        </member>
        <member name="M:Northwoods.Go.GoLayerCollection.InsertDocumentLayerBefore(Northwoods.Go.GoLayer,Northwoods.Go.GoLayer)">
            <summary>
            Add a reference to a document layer into this view's collection of layers.
            </summary>
            <param name="dest">A layer already in this view's collection of layers.</param>
            <param name="doclayer">A layer owned by this view's document.</param>
            <remarks>
            It is an error if this collection does not belong to a <see cref="T:Northwoods.Go.GoView"/>,
            or if <paramref name="doclayer"/> does not belong to this view's <see cref="P:Northwoods.Go.GoView.Document"/>.
            The document layer continues to be owned by the document; the view just acquires
            a shared reference to that layer.
            The <see cref="M:Northwoods.Go.IGoLayerCollectionContainer.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/>
            call gets a <see cref="F:Northwoods.Go.GoLayerCollection.InsertedLayer"/> hint.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoLayerCollection.InsertDocumentLayerAfter(Northwoods.Go.GoLayer,Northwoods.Go.GoLayer)"/>
            <seealso cref="M:Northwoods.Go.GoLayerCollection.CreateNewLayerBefore(Northwoods.Go.GoLayer)"/>
            <seealso cref="M:Northwoods.Go.GoLayerCollection.Remove(Northwoods.Go.GoLayer)"/>
        </member>
        <member name="M:Northwoods.Go.GoLayerCollection.Remove(Northwoods.Go.GoLayer)">
            <summary>
            Remove a layer from this collection.
            </summary>
            <param name="layer"></param>
            <remarks>
            If the layer is owned by this collection's container, this method
            calls <see cref="M:Northwoods.Go.GoLayer.Clear"/> on <paramref name="layer"/>.
            The <see cref="M:Northwoods.Go.IGoLayerCollectionContainer.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/>
            call gets a <see cref="F:Northwoods.Go.GoLayerCollection.RemovedLayer"/> hint.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoLayerCollection.MoveAfter(Northwoods.Go.GoLayer,Northwoods.Go.GoLayer)">
            <summary>
            Reorder the layers in this collection by moving a layer to be immediately
            after (i.e. in front of) another layer.
            </summary>
            <param name="dest"></param>
            <param name="moving"></param>
            <remarks>
            Both layer arguments must be present in this collection.
            The <see cref="M:Northwoods.Go.IGoLayerCollectionContainer.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/>
            call gets a <see cref="F:Northwoods.Go.GoLayerCollection.MovedLayer"/> hint.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoLayerCollection.MoveBefore(Northwoods.Go.GoLayer,Northwoods.Go.GoLayer)">
            <summary>
            Reorder the layers in this collection by moving a layer to be immediately
            before (i.e. behind) another layer.
            </summary>
            <param name="dest"></param>
            <param name="moving"></param>
            <remarks>
            Both layer arguments must be present in this collection.
            The <see cref="M:Northwoods.Go.IGoLayerCollectionContainer.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/>
            call gets a <see cref="F:Northwoods.Go.GoLayerCollection.MovedLayer"/> hint.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoLayerCollection.Find(System.Object)">
            <summary>
            Search for a layer with a particular identifier.
            </summary>
            <param name="identifier"></param>
            <returns></returns>
            <seealso cref="P:Northwoods.Go.GoLayer.Identifier"/>
        </member>
        <member name="M:Northwoods.Go.GoLayerCollection.GetObjectEnumerator(System.Boolean)">
            <summary>
            Get an Enumerator that iterates over all of the objects in all of the layers
            in this collection, in the desired order.
            </summary>
            <param name="forward"></param>
            <returns></returns>
        </member>
        <member name="P:Northwoods.Go.GoLayerCollection.Count">
            <summary>
            Get the number of layers.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoLayerCollection.IsSynchronized">
            <summary>
            Gets whether this collection of layers is thread-safe.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoLayerCollection.SyncRoot">
            <summary>
            Gets an object to be used for synchronizing access to this collection.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoLayerCollection.Backwards">
            <summary>
            Gets an enumerable whose enumerator will iterate over the layers in reverse order.
            </summary>
            <seealso cref="P:Northwoods.Go.IGoCollection.Backwards"/>
        </member>
        <member name="P:Northwoods.Go.GoLayerCollection.LayerCollectionContainer">
            <summary>
            Gets the document or view to which this layer collection belongs.
            </summary>
            <seealso cref="P:Northwoods.Go.GoLayerCollection.Document"/>
            <seealso cref="P:Northwoods.Go.GoLayerCollection.View"/>
        </member>
        <member name="P:Northwoods.Go.GoLayerCollection.Document">
            <summary>
            Gets the document that this layer collection belongs to, or null if this is in a view.
            </summary>
            <seealso cref="P:Northwoods.Go.GoLayerCollection.LayerCollectionContainer"/>
            <seealso cref="P:Northwoods.Go.GoLayerCollection.View"/>
        </member>
        <member name="P:Northwoods.Go.GoLayerCollection.View">
            <summary>
            Gets the view that this layer collection belongs to, or null if this is in a document.
            </summary>
            <seealso cref="P:Northwoods.Go.GoLayerCollection.LayerCollectionContainer"/>
            <seealso cref="P:Northwoods.Go.GoLayerCollection.Document"/>
        </member>
        <member name="P:Northwoods.Go.GoLayerCollection.Bottom">
            <summary>
            Gets the first layer, normally drawn underneath all other layers.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoLayerCollection.Top">
            <summary>
            Gets the last layer, normally drawn on top of all other layers.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoLayerCollection.Default">
            <summary>
            Gets or sets the default layer for adding objects.
            </summary>
            <value>
            The <see cref="T:Northwoods.Go.GoLayer"/> must belong to the same <see cref="P:Northwoods.Go.GoLayerCollection.LayerCollectionContainer"/>
            and must not be null.
            Initially this value is the first and only layer, created when this collection
            was initialized.
            </value>
        </member>
        <member name="T:Northwoods.Go.GoLayerCollectionEnumerator">
            <summary>
            Iterate over the layers in this collection, either forwards or backwards.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoLayerCollectionEnumerator.GetEnumerator">
            <summary>
            Gets an enumerator for iterating over the GoLayers in this collection.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoLayerCollectionEnumerator.MoveNext">
            <summary>
            Advance the enumerator to the next GoLayer.
            </summary>
            <returns>True if there is a next GoLayer; false if it has finished iterating over the collection.</returns>
        </member>
        <member name="M:Northwoods.Go.GoLayerCollectionEnumerator.Reset">
            <summary>
            Reset the enumerator to its original position.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoLayerCollectionEnumerator.Current">
            <summary>
             Gets the current layer in the collection.
            </summary>
        </member>
        <member name="T:Northwoods.Go.GoLayerCollectionObjectEnumerator">
            <summary>
            Iterate over all of the GoObjects in all of the layers, either forwards or backwards.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoLayerCollectionObjectEnumerator.GetEnumerator">
            <summary>
            Gets an enumerator for iterating over the all of the GoObjects in all of the layers.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoLayerCollectionObjectEnumerator.MoveNext">
            <summary>
            Advance the enumerator to the next GoObject in the whole collection of layers of GoObjects.
            </summary>
            <returns>True if there is a next GoObject; false if it has finished iterating over the collection.</returns>
        </member>
        <member name="M:Northwoods.Go.GoLayerCollectionObjectEnumerator.Reset">
            <summary>
            Reset the enumerator to its original position.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoLayerCollectionObjectEnumerator.Current">
            <summary>
             Gets the current object in the collection of layers.
            </summary>
        </member>
        <member name="T:Northwoods.Go.GoObjectEventHandler">
            <summary>
            Represents methods that handle <see cref="T:Northwoods.Go.GoObjectEventArgs"/>.
            </summary>
        </member>
        <member name="T:Northwoods.Go.GoObjectEventArgs">
            <summary>
            Holds information for the <see cref="T:Northwoods.Go.GoView"/> events involving both
            a <see cref="P:Northwoods.Go.GoObjectEventArgs.GoObject"/> and some input event.
            </summary>
            <remarks>
            This class knows about the <see cref="P:Northwoods.Go.GoObjectEventArgs.GoObject"/> that got clicked as well
            as about how and where the click happened.
            </remarks>
            <seealso cref="T:Northwoods.Go.GoInputEventArgs"/>
            <seealso cref="E:Northwoods.Go.GoView.ObjectContextClicked"/>
            <seealso cref="E:Northwoods.Go.GoView.ObjectDoubleClicked"/>
            <seealso cref="E:Northwoods.Go.GoView.ObjectSingleClicked"/>
            <seealso cref="T:Northwoods.Go.GoSelectionEventArgs"/>
        </member>
        <member name="M:Northwoods.Go.GoObjectEventArgs.#ctor(Northwoods.Go.GoObject,Northwoods.Go.GoInputEventArgs)">
            <summary>
            Create a <see cref="T:Northwoods.Go.GoObjectEventArgs"/> that knows about an input event
            involving a <see cref="P:Northwoods.Go.GoObjectEventArgs.GoObject"/>.
            </summary>
            <param name="obj"></param>
            <param name="evt"></param>
        </member>
        <member name="P:Northwoods.Go.GoObjectEventArgs.GoObject">
            <summary>
            Gets the <see cref="P:Northwoods.Go.GoObjectEventArgs.GoObject"/> associated with this event.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="T:Northwoods.Go.GoOverview">
            <summary>
            Provide a reduced-scale view of a document, showing the size and position of
            another view's viewport onto that same document, and support panning and
            zooming of that observed view.
            </summary>
            <remarks>
            The user can drag around the rectangle representing the observed view's
            viewport in order to scroll it.  Clicking will move the observed view's
            viewport to that location.  Doing a rubber-band drag will change the
            observed view's position and scale to match the box that was drawn.
            </remarks>
        </member>
        <member name="T:Northwoods.Go.GoView">
            <summary>
            GoView is a Control that provides display and editing of abstract graphs or
            networks of 2D graphical objects.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoView.#ctor">
            <summary>
            Create a GoView displaying an empty GoDocument.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoView.#ctor(Northwoods.Go.GoDocument)">
            <summary>
            Create a GoView displaying the contents of a given GoDocument.
            </summary>
            <param name="doc">The <see cref="T:Northwoods.Go.GoDocument"/> to display.</param>
        </member>
        <member name="M:Northwoods.Go.GoView.Dispose(System.Boolean)">
            <summary>
            Free up any Windows resources that this view caches.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Northwoods.Go.GoView.OnResize(System.EventArgs)">
            <summary>
            Layout the scroll bars when this control changes size.
            </summary>
            <param name="evt"></param>
        </member>
        <member name="M:Northwoods.Go.GoView.LayoutScrollBars(System.Boolean)">
            <summary>
            Position and size the scrollbars and corner.
            </summary>
            <param name="update">
            Whether to call <see cref="M:Northwoods.Go.GoView.UpdateScrollBars"/> afterwards.
            </param>
            <remarks>
            By default this places the vertical scroll bar at the right edge of the view,
            the horizontal scroll bar at the bottom edge, and the corner in the bottom right.
            All of these controls are inside the view's border.
            </remarks>
            <seealso cref="P:Northwoods.Go.GoView.VerticalScrollBar"/>
            <seealso cref="P:Northwoods.Go.GoView.HorizontalScrollBar"/>
            <seealso cref="P:Northwoods.Go.GoView.CornerControl"/>
            <seealso cref="P:Northwoods.Go.GoView.DisplayRectangle"/>
        </member>
        <member name="M:Northwoods.Go.GoView.CreateDocument">
            <summary>
            This method is called by the constructor to create a document for this view.
            </summary>
            <returns>A <see cref="T:Northwoods.Go.GoDocument"/></returns>
            <remarks>
            By default this just creates a new instance of <see cref="T:Northwoods.Go.GoDocument"/>.
            Often you will want to override this method so that creating a
            particular kind of view will automatically create the right kind
            of document.
            This method is not called when the constructor is passed a non-null
            <see cref="T:Northwoods.Go.GoDocument"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoView.InitializeLayersFromDocument">
            <summary>
            This method is responsible for setting up the view's collection of layers
            to include all of the document's layers, in order, followed by the
            view's default layer.
            </summary>
            <remarks>
            This removes all old document layers and clears out all view layers
            from this view's <see cref="T:Northwoods.Go.GoLayerCollection"/>, adds all of the
            new document's layers, and leaves the default view layer in front of all layers.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoView.ConvertViewToDoc(System.Drawing.Point)">
            <summary>
            Given a point in this view, calculate the corresponding point in the view's document.
            </summary>
            <param name="p">
            A <c>Point</c> in view coordinates.
            </param>
            <returns>
            The corresponding <c>PointF</c> in document coordinates.
            </returns>
            <remarks>
            This method takes this view's current position in the document, and the current
            view scale, into account when computing the transformation from view coordinates
            to document coordinates.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoView.ConvertDocToView(Northwoods.Go.PointF)"/>
        </member>
        <member name="M:Northwoods.Go.GoView.ConvertViewToDoc(System.Drawing.Size)">
            <summary>
            Given a size in this view, calculate the corresponding size in the view's document.
            </summary>
            <param name="s">
            A <c>Size</c> in view coordinates.
            </param>
            <returns>
            The corresponding <c>SizeF</c> in document coordinates.
            </returns>
            <remarks>
            This method takes this view's current view scale into account when computing the
            transformation from view coordinates to document coordinates.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoView.ConvertDocToView(System.Drawing.SizeF)"/>
        </member>
        <member name="M:Northwoods.Go.GoView.ConvertViewToDoc(System.Drawing.Rectangle)">
            <summary>
            Given a rectangle in this view, calculate the corresponding rectangle in the view's document.
            </summary>
            <param name="r">
            A <c>Rectangle</c> in view coordinates.
            </param>
            <returns>
            The corresponding <c>RectangleF</c> in document coordinates.
            </returns>
            <remarks>
            This method takes this view's current position in the document, and the current
            view scale, into account when computing the transformation from view coordinates
            to document coordinates.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoView.ConvertDocToView(System.Drawing.RectangleF)"/>
        </member>
        <member name="M:Northwoods.Go.GoView.ConvertDocToView(Northwoods.Go.PointF)">
            <summary>
            Given a point in this document, calculate the corresponding point in this view.
            </summary>
            <param name="p">
            A <c>PointF</c> in document coordinates.
            </param>
            <returns>
            The corresponding <c>Point</c> in view coordinates.
            </returns>
            <remarks>
            This method takes this view's current position in the document, and the current
            view scale, into account when computing the transformation from document coordinates
            to view coordinates.
            Note that because documents are often larger than the views,
            many object positions will often have corresponding view positions outside the
            view's client area.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoView.ConvertViewToDoc(System.Drawing.Point)"/>
        </member>
        <member name="M:Northwoods.Go.GoView.ConvertDocToView(System.Drawing.SizeF)">
            <summary>
            Given a size in this document, calculate the corresponding size in this view.
            </summary>
            <param name="s">
            A <c>SizeF</c> in document coordinates.
            </param>
            <returns>
            The corresponding <c>Size</c> in view coordinates.
            </returns>
            <remarks>
            This method takes this view's current view scale into account when computing the
            transformation from document coordinates to view coordinates.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoView.ConvertViewToDoc(System.Drawing.Size)"/>
        </member>
        <member name="M:Northwoods.Go.GoView.ConvertDocToView(System.Drawing.RectangleF)">
            <summary>
            Given a rectangle in this document, calculate the corresponding rectangle in this view.
            </summary>
            <param name="r">
            A <c>RectangleF</c> in document coordinates.
            </param>
            <returns>
            The corresponding <c>Rectangle</c> in view coordinates.
            </returns>
            <remarks>
            This method takes this view's current position in the document, and the current
            view scale, into account when computing the transformation from document coordinates
            to view coordinates.
            Note that because documents are often larger than the views,
            many object positions will often have corresponding view positions outside the
            view's client area.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoView.ConvertViewToDoc(System.Drawing.Rectangle)"/>
        </member>
        <member name="M:Northwoods.Go.GoView.LimitDocPosition(Northwoods.Go.PointF)">
            <summary>
            This method is called when setting the DocPosition property to make
            sure the view only takes reasonable, desired positions.
            </summary>
            <param name="p"></param>
            <returns></returns>
            <remarks>
            By default this method tries to keep the view within the document.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoView.ScrollRectangleToVisible(System.Drawing.RectangleF)">
            <summary>
            Change this view's DocPosition so that the given rectangle is visible.
            </summary>
            <param name="contentRect">the area, in document coordinates, to try to scroll into view</param>
            <remarks>
            Usually you call this method with the bounds of an object, to make
            that object visible to the user and not scrolled off somewhere.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoView.ScrollPage(System.Single,System.Single)"/>
            <seealso cref="M:Northwoods.Go.GoView.ScrollLine(System.Single,System.Single)"/>
        </member>
        <member name="M:Northwoods.Go.GoView.ScrollPage(System.Single,System.Single)">
            <summary>
            Programmatically scroll the view by a "page" (a large change).
            </summary>
            <param name="dx">the number of pages to change the X coordinate of the <see cref="P:Northwoods.Go.GoView.DocPosition"/>; positive increases, negative decreases</param>
            <param name="dy">the number of pages to change the Y coordinate of the <see cref="P:Northwoods.Go.GoView.DocPosition"/>; positive increases, negative decreases</param>
            <remarks>
            This method does not depend on the existence of any scrollbars,
            but does depend on the values of <see cref="P:Northwoods.Go.GoView.DocExtentSize"/> and <see cref="P:Northwoods.Go.GoView.ScrollSmallChange"/> to determine
            a new value for <see cref="P:Northwoods.Go.GoView.DocPosition"/> that is a "line" less than one full "page" away from the old position
            times the factor provided by the parameters for each direction.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoView.ScrollLine(System.Single,System.Single)"/>
            <seealso cref="M:Northwoods.Go.GoView.ScrollRectangleToVisible(System.Drawing.RectangleF)"/>
        </member>
        <member name="M:Northwoods.Go.GoView.ScrollLine(System.Single,System.Single)">
            <summary>
            Programmatically scroll the view by a "line" (a small change).
            </summary>
            <param name="dx">the number of lines to change the X coordinate of the <see cref="P:Northwoods.Go.GoView.DocPosition"/>; positive increases, negative decreases</param>
            <param name="dy">the number of lines to change the Y coordinate of the <see cref="P:Northwoods.Go.GoView.DocPosition"/>; positive increases, negative decreases</param>
            <remarks>
            This method does not depend on the existence of any scrollbars,
            but does depend on the value of <see cref="P:Northwoods.Go.GoView.ScrollSmallChange"/> to determine
            a new value for <see cref="P:Northwoods.Go.GoView.DocPosition"/>.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoView.ScrollPage(System.Single,System.Single)"/>
            <seealso cref="M:Northwoods.Go.GoView.ScrollRectangleToVisible(System.Drawing.RectangleF)"/>
        </member>
        <member name="M:Northwoods.Go.GoView.CanScroll(System.Boolean,System.Boolean)">
            <summary>
            Determine if there is room for the view to be scrolled in a given direction.
            </summary>
            <param name="down"></param>
            <param name="vertical"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.GoView.LimitDocScale(System.Single)">
            <summary>
            This method is called when setting the DocScale property to make
            sure that the view only displays objects at a reasonable scale.
            </summary>
            <param name="s"></param>
            <returns></returns>
            <remarks>
            By default this limits the value to between 0.01f and 10.0f.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoView.ComputeDocumentBounds">
            <summary>
            Determine the actual extent of all of the objects in the document
            as seen by this view.
            </summary>
            <returns>A <c>RectangleF</c> in document coordinates</returns>
            <remarks>
            This is called by methods such as <see cref="M:Northwoods.Go.GoView.RescaleToFit"/>, that
            want to know how much area is taken up by visible document objects.
            <see cref="P:Northwoods.Go.GoView.DocumentSize"/> is different in that that property is
            likely to be less changeable as objects are moved or deleted.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoView.RescaleToFit">
            <summary>
            Change the DocScale property so that all document objects are visible.
            </summary>
            <remarks>
            By default this will include the (0, 0) origin.
            If the document is very large, the <see cref="M:Northwoods.Go.GoView.LimitDocScale(System.Single)"/>
            method might prevent the whole document from fitting.
            Calling this method will not necessarily cause the scroll bars to
            disappear, because the scroll bars normally show the extent of the
            document, which is normally greater than the extent of the actual
            objects in the document.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoView.DoAutoScroll(System.Drawing.Point)">
            <summary>
            Start or continue automatically scrolling the view during a mouse drag.
            </summary>
            <param name="viewPnt">the current mouse point, in view coordinates</param>
            <remarks>
            As soon <see cref="M:Northwoods.Go.GoView.ComputeAutoScrollDocPosition(System.Drawing.Point)"/> returns a new
            <see cref="P:Northwoods.Go.GoView.DocPosition"/> value, this method starts a <c>Timer</c>
            that waits for <see cref="P:Northwoods.Go.GoView.AutoScrollDelay"/> milliseconds.
            After waiting, it repeatedly sets <see cref="P:Northwoods.Go.GoView.DocPosition"/>
            to the latest <see cref="M:Northwoods.Go.GoView.ComputeAutoScrollDocPosition(System.Drawing.Point)"/> value,
            until the position does not change (presumably because the 
            <see cref="P:Northwoods.Go.GoView.LastInput"/>'s view point is no longer in the autoscroll
            margin).
            Setting this view's <see cref="P:Northwoods.Go.GoView.DocPosition"/> occurs each
            <see cref="P:Northwoods.Go.GoView.AutoScrollTime"/> milliseconds.
            This method is normally called by those tools that want to support
            auto-scrolling during a mouse move.
            The timer is stopped when the mouse leaves this view.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoView.DoAutoPan(System.Drawing.Point,System.Drawing.Point)"/>
            <seealso cref="M:Northwoods.Go.GoView.StopAutoScroll"/>
        </member>
        <member name="M:Northwoods.Go.GoView.DoAutoPan(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            Start or continue scrolling the view according to the relative position of
            the <paramref name="viewPnt"/> compared to the <paramref name="originPnt"/>.
            </summary>
            <param name="originPnt">the original panning point, in view coordinates</param>
            <param name="viewPnt">the current mouse point, in view coordinates</param>
            <remarks>
            This uses the same mechanisms as <see cref="M:Northwoods.Go.GoView.DoAutoScroll(System.Drawing.Point)"/> -- do not
            try to auto-scroll and auto-pan at the same time.
            Automatic panning occurs in the area outside of the region specified by
            <see cref="P:Northwoods.Go.GoView.AutoPanRegion"/> surrounding the <paramref name="originPnt"/>.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoView.StopAutoScroll"/>
            <seealso cref="P:Northwoods.Go.GoView.AutoScrollDelay"/>
            <seealso cref="P:Northwoods.Go.GoView.AutoScrollTime"/>
        </member>
        <member name="M:Northwoods.Go.GoView.StopAutoScroll">
            <summary>
            Stop any ongoing auto-scroll or auto-pan action.
            </summary>
            <remarks>
            This stops the Timer used to get repeating events to consider scrolling.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoView.DoAutoScroll(System.Drawing.Point)"/>
            <seealso cref="M:Northwoods.Go.GoView.DoAutoPan(System.Drawing.Point,System.Drawing.Point)"/>
        </member>
        <member name="M:Northwoods.Go.GoView.ComputeAutoScrollDocPosition(System.Drawing.Point)">
            <summary>
            This method is called to determine the next position in the document for this view,
            given a point at which the user is dragging the mouse.
            </summary>
            <param name="viewPnt">
            The mouse point, in view coordinates.
            </param>
            <remarks>
            This uses the <see cref="P:Northwoods.Go.GoView.AutoScrollRegion"/> and <see cref="P:Northwoods.Go.GoView.ScrollSmallChange"/>
            properties to calculate a new <see cref="P:Northwoods.Go.GoView.DocPosition"/>.
            The closer the point is to the edge of the view, the larger a multiple of
            the <see cref="P:Northwoods.Go.GoView.ScrollSmallChange"/> is used as a scroll step in that direction.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoView.ComputeAutoPanDocPosition(System.Drawing.Point,System.Drawing.Point)">
            <summary>
            This method is called to determine the next position in the document for this view,
            given a point at which the user is holding the mouse during a pan operation.
            </summary>
            <param name="originPnt">
            The original panning point, in view coordinates.
            </param>
            <param name="viewPnt">
            The mouse point, in view coordinates.
            </param>
            <remarks>
            This uses the <see cref="P:Northwoods.Go.GoView.ScrollSmallChange"/> property to calculate a new <see cref="P:Northwoods.Go.GoView.DocPosition"/>.
            When the current mouse point is within the <see cref="P:Northwoods.Go.GoView.AutoPanRegion"/> width or height
            distance from the <paramref name="originPnt"/>, no scrolling occurs.
            When the current mouse point is outside of this region, between the <see cref="P:Northwoods.Go.GoView.AutoPanRegion"/>
            distance (width or height) and three times that distance, automatic scrolling proceeds
            at the smallest scrolling increment, <see cref="P:Northwoods.Go.GoView.ScrollSmallChange"/>.
            The farther away the <paramref name="viewPnt"/> is from the <paramref name="originPnt"/>, the larger a multiple of
            the <see cref="P:Northwoods.Go.GoView.ScrollSmallChange"/> is used as a scroll step in that direction.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoView.CanSelectObjects">
            <summary>
            Called to see if the user can select objects in this view for this document.
            </summary>
            <remarks>
            This just returns <c>AllowSelect &amp;&amp; Document.CanSelectObjects</c>.
            This predicate is used by methods such as <see cref="M:Northwoods.Go.GoView.SelectAll"/> and
            <see cref="M:Northwoods.Go.GoView.SelectInRectangle(System.Drawing.RectangleF)"/>.
            </remarks>
            <seealso cref="P:Northwoods.Go.GoView.AllowSelect"/>
            <seealso cref="M:Northwoods.Go.GoDocument.CanSelectObjects"/>
        </member>
        <member name="M:Northwoods.Go.GoView.CanMoveObjects">
            <summary>
            Called to see if the user can move objects in this view for this document.
            </summary>
            <remarks>
            This just returns <c>AllowMove &amp;&amp; Document.CanMoveObjects</c>.
            This predicate is used by methods such as <see cref="M:Northwoods.Go.GoView.MoveSelection(Northwoods.Go.GoSelection,System.Drawing.SizeF,System.Boolean)"/> and
            by <see cref="T:Northwoods.Go.GoToolDragging"/>.
            </remarks>
            <seealso cref="P:Northwoods.Go.GoView.AllowMove"/>
            <seealso cref="M:Northwoods.Go.GoDocument.CanMoveObjects"/>
        </member>
        <member name="M:Northwoods.Go.GoView.CanCopyObjects">
            <summary>
            Called to see if the user can copy objects in this view for this document.
            </summary>
            <remarks>
            This just returns <c>AllowCopy &amp;&amp; Document.CanCopyObjects</c>.
            This predicate is used by methods such as <see cref="M:Northwoods.Go.GoView.CopySelection(Northwoods.Go.GoSelection,System.Drawing.SizeF,System.Boolean)"/>
            and <see cref="M:Northwoods.Go.GoView.EditCopy"/> and by <see cref="T:Northwoods.Go.GoToolDragging"/>.
            </remarks>
            <seealso cref="P:Northwoods.Go.GoView.AllowCopy"/>
            <seealso cref="M:Northwoods.Go.GoDocument.CanCopyObjects"/>
        </member>
        <member name="M:Northwoods.Go.GoView.CanResizeObjects">
            <summary>
            Called to see if the user can resize objects in this view for this document.
            </summary>
            <remarks>
            This just returns <c>AllowResize &amp;&amp; Document.CanResizeObjects</c>.
            This predicate is used by <see cref="T:Northwoods.Go.GoToolResizing"/>.
            </remarks>
            <seealso cref="P:Northwoods.Go.GoView.AllowResize"/>
            <seealso cref="M:Northwoods.Go.GoDocument.CanResizeObjects"/>
        </member>
        <member name="M:Northwoods.Go.GoView.CanReshapeObjects">
            <summary>
            Called to see if the user can reshape objects in this view for this document.
            </summary>
            <remarks>
            This just returns <c>AllowReshape &amp;&amp; Document.CanReshapeObjects</c>.
            <seealso cref="P:Northwoods.Go.GoView.AllowReshape"/>
            </remarks>
            <seealso cref="M:Northwoods.Go.GoDocument.CanReshapeObjects"/>
        </member>
        <member name="M:Northwoods.Go.GoView.CanDeleteObjects">
            <summary>
            Called to see if the user can delete objects in this view for this document.
            </summary>
            <remarks>
            This just returns <c>AllowDelete &amp;&amp; Document.CanDeleteObjects</c>.
            This predicate is used by methods such as <see cref="M:Northwoods.Go.GoView.DeleteSelection(Northwoods.Go.GoSelection)"/> and
            <see cref="M:Northwoods.Go.GoView.EditCut"/>.
            </remarks>
            <seealso cref="P:Northwoods.Go.GoView.AllowDelete"/>
            <seealso cref="M:Northwoods.Go.GoDocument.CanDeleteObjects"/>
        </member>
        <member name="M:Northwoods.Go.GoView.CanInsertObjects">
            <summary>
            Called to see if the user can insert objects into this view for this document.
            </summary>
            <remarks>
            This just returns <c>AllowInsert &amp;&amp; Document.CanInsertObjects</c>.
            This predicate is used by methods such as <see cref="M:Northwoods.Go.GoView.EditPaste"/> and by
            <see cref="T:Northwoods.Go.GoToolDragging"/>.
            </remarks>
            <seealso cref="P:Northwoods.Go.GoView.AllowInsert"/>
            <seealso cref="M:Northwoods.Go.GoDocument.CanInsertObjects"/>
        </member>
        <member name="M:Northwoods.Go.GoView.CanLinkObjects">
            <summary>
            Called to see if the user can link objects together in this view for this document.
            </summary>
            <remarks>
            This just returns <c>AllowLink &amp;&amp; Document.CanLinkObjects</c>.
            This predicate is used by <see cref="T:Northwoods.Go.GoToolLinking"/>.
            </remarks>
            <seealso cref="P:Northwoods.Go.GoView.AllowLink"/>
            <seealso cref="M:Northwoods.Go.GoDocument.CanLinkObjects"/>
        </member>
        <member name="M:Northwoods.Go.GoView.CanEditObjects">
            <summary>
            Called to see if the user can edit objects in this view for this document.
            </summary>
            <remarks>
            This just returns <c>AllowEdit &amp;&amp; Document.CanEditObjects</c>.
            This predicate is used by methods such as <see cref="M:Northwoods.Go.GoText.OnSingleClick(Northwoods.Go.GoInputEventArgs,Northwoods.Go.GoView)"/>.
            </remarks>
            <seealso cref="P:Northwoods.Go.GoView.AllowEdit"/>
            <seealso cref="M:Northwoods.Go.GoDocument.CanEditObjects"/>
        </member>
        <member name="M:Northwoods.Go.GoView.SetModifiable(System.Boolean)">
            <summary>
            This method sets some properties that determine whether the user can
            modify the document from this view.
            </summary>
            <param name="b"></param>
            <remarks>
            By default this just sets the <see cref="P:Northwoods.Go.GoView.AllowMove"/>, <see cref="P:Northwoods.Go.GoView.AllowResize"/>, 
            <see cref="P:Northwoods.Go.GoView.AllowReshape"/>, <see cref="P:Northwoods.Go.GoView.AllowDelete"/>, <see cref="P:Northwoods.Go.GoView.AllowInsert"/>, 
            <see cref="P:Northwoods.Go.GoView.AllowLink"/>, and <see cref="P:Northwoods.Go.GoView.AllowEdit"/> properties.
            You may want to override this in order to also control other properties you
            may have defined that govern the user's ability to modify the view's document.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoView.PickObject(System.Boolean,System.Boolean,Northwoods.Go.PointF,System.Boolean)">
            <summary>
            Find a visible object at a given point.
            </summary>
            <param name="doc">If true, consider objects in document layers.</param>
            <param name="view">If true, consider objects in view layers.</param>
            <param name="p">The <c>PointF</c> in document coordinates at which to search.</param>
            <param name="selectableOnly">
            If true, skip over any objects whose <see cref="M:Northwoods.Go.GoObject.CanSelect"/> property is false.
            </param>
            <returns>
            A <see cref="T:Northwoods.Go.GoObject"/> that contains the <paramref name="p"/>, or null if
            no such object exists.
            </returns>
            <remarks>
            This method never actually selects any object--use <see cref="T:Northwoods.Go.GoSelection"/>
            instead.
            Please note that if an object is found, it might not be a top-level object.
            In fact, when <paramref name="selectableOnly"/> is false, it is very likely
            that if any object is found at the given point, it will be a child of some
            group.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoLayer.PickObject(Northwoods.Go.PointF,System.Boolean)"/>
        </member>
        <member name="M:Northwoods.Go.GoView.CreateSelection">
            <summary>
            This method is called by the constructor to create a selection collection for this view.
            </summary>
            <returns>A <see cref="T:Northwoods.Go.GoSelection"/>.</returns>
            <remarks>
            If you need to use your own subclass of <see cref="T:Northwoods.Go.GoSelection"/>, this is
            the place to create it.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoView.SelectAll">
            <summary>
            Add all eligible document objects to this view's selection.
            </summary>
            <remarks>
            This method only selects document objects.
            It heeds <see cref="M:Northwoods.Go.GoView.CanSelectObjects"/>,
            <see cref="M:Northwoods.Go.GoLayer.CanViewObjects"/>, <see cref="M:Northwoods.Go.GoLayer.CanSelectObjects"/>,
            <see cref="M:Northwoods.Go.GoObject.CanView"/>, and <see cref="M:Northwoods.Go.GoObject.CanSelect"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoView.SelectInRectangle(System.Drawing.RectangleF)">
            <summary>
            Add all eligible document objects that are within a given rectangle to this view's selection.
            </summary>
            <param name="rect">A <c>RectangleF</c> in document coordinates.</param>
            <remarks>
            This method only selects document objects.
            It heeds <see cref="M:Northwoods.Go.GoView.CanSelectObjects"/>,
            <see cref="M:Northwoods.Go.GoLayer.CanViewObjects"/>, <see cref="M:Northwoods.Go.GoLayer.CanSelectObjects"/>,
            <see cref="M:Northwoods.Go.GoObject.CanView"/>, and <see cref="M:Northwoods.Go.GoObject.CanSelect"/>.
            This actually checks to see if the whole <see cref="P:Northwoods.Go.GoObject.SelectionObject"/>
            is within the <paramref name="rect"/> bounds.  Such a policy allows a
            <see cref="T:Northwoods.Go.GoGroup"/> to be selected even though only one part of the group
            is in the rectangle, the <see cref="P:Northwoods.Go.GoObject.SelectionObject"/> that appears
            to the user to be selected.
            This will consider the children of <see cref="T:Northwoods.Go.GoGroup"/>s.
            Once it finds a selectable object within the rectangle,
            it does not recurse further into that object.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoView.MoveSelection(Northwoods.Go.GoSelection,System.Drawing.SizeF,System.Boolean)">
            <summary>
            Move a collection of objects by a given offset.
            </summary>
            <param name="sel">
            The collection of objects to be moved; if null, this view's <see cref="P:Northwoods.Go.GoView.Selection"/> is used.
            </param>
            <param name="offset">
            The distance the objects should be moved.
            </param>
            <param name="grid">
            Whether to adjust the computed destination location by calling <see cref="M:Northwoods.Go.GoView.FindNearestGridPoint(Northwoods.Go.PointF)"/>.
            </param>
            <remarks>
            This method heeds the <see cref="M:Northwoods.Go.GoView.CanMoveObjects"/> property if <paramref name="sel"/>
            is this view's <see cref="P:Northwoods.Go.GoView.Selection"/>.
            To accomplish the move, each object's <see cref="M:Northwoods.Go.GoObject.DoMove(Northwoods.Go.GoView,Northwoods.Go.PointF,Northwoods.Go.PointF)"/> is called,
            to support object-specific move behavior.
            All actions take place within a <see cref="F:Northwoods.Go.GoUndoManager.MoveSelectionName"/> transaction.
            This does not raise the <c>SelectionMoved</c> event;
            that event is raised by the <see cref="M:Northwoods.Go.GoToolDragging.DoMouseUp"/> method.
            If there are any duplicates in the selection, objects may get moved multiple times.
            Note that an object may be moved twice if both it and one of its parents are
            in the selection.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoView.OnSelectionMoved(System.EventArgs)">
            <summary>
            Invoke all <see cref="E:Northwoods.Go.GoView.SelectionMoved"/> event handlers.
            </summary>
            <param name="evt"></param>
        </member>
        <member name="M:Northwoods.Go.GoView.RaiseSelectionMoved">
            <summary>
            Call <see cref="M:Northwoods.Go.GoView.OnSelectionMoved(System.EventArgs)"/> to raise a <see cref="E:Northwoods.Go.GoView.SelectionMoved"/> event.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoView.CopySelection(Northwoods.Go.GoSelection,System.Drawing.SizeF,System.Boolean)">
            <summary>
            Make copies of the objects in a collection and add them to this view's document at the given offset.
            </summary>
            <param name="sel">
            The collection of objects to be copied; if null, this view's <see cref="P:Northwoods.Go.GoView.Selection"/> is used.
            </param>
            <param name="offset">
            The distance the objects should be moved from the original's location.
            </param>
            <param name="grid">
            Whether to adjust the computed destination location by calling <see cref="M:Northwoods.Go.GoView.FindNearestGridPoint(Northwoods.Go.PointF)"/>.
            </param>
            <remarks>
            This method heeds the <see cref="M:Northwoods.Go.GoView.CanCopyObjects"/> property if <paramref name="sel"/>
            is this view's <see cref="P:Northwoods.Go.GoView.Selection"/>, and it heeds each object's <see cref="M:Northwoods.Go.GoObject.CanCopy"/>
            property as well.
            <see cref="P:Northwoods.Go.GoObject.DraggingObject"/> allows individual objects to decide to copy the
            parent group instead of the object itself.
            To accomplish the copy, this method calls <see cref="M:Northwoods.Go.GoDocument.CopyFromCollection(Northwoods.Go.IGoCollection)"/>.
            To accomplish the move, each object's <see cref="M:Northwoods.Go.GoObject.DoMove(Northwoods.Go.GoView,Northwoods.Go.PointF,Northwoods.Go.PointF)"/> is called,
            to support object-specific move behavior.
            All actions take place within a <see cref="F:Northwoods.Go.GoUndoManager.CopySelectionName"/> transaction.
            This does not raise the <c>SelectionCopied</c> event;
            that event is raised by the <see cref="M:Northwoods.Go.GoToolDragging.DoMouseUp"/> method.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoView.OnSelectionCopied(System.EventArgs)">
            <summary>
            Invoke all <see cref="E:Northwoods.Go.GoView.SelectionCopied"/> event handlers.
            </summary>
            <param name="evt"></param>
        </member>
        <member name="M:Northwoods.Go.GoView.RaiseSelectionCopied">
            <summary>
            Call <see cref="M:Northwoods.Go.GoView.OnSelectionCopied(System.EventArgs)"/> to raise a <see cref="E:Northwoods.Go.GoView.SelectionCopied"/> event.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoView.DeleteSelection(Northwoods.Go.GoSelection)">
            <summary>
            Delete a collection of objects.
            </summary>
            <param name="sel">
            The collection of objects to be copied; if null, this view's <see cref="P:Northwoods.Go.GoView.Selection"/> is used.
            </param>
            <remarks>
            This method heeds the <see cref="M:Northwoods.Go.GoView.CanDeleteObjects"/> property if <paramref name="sel"/>
            is this view's <see cref="P:Northwoods.Go.GoView.Selection"/>, and it heeds each object's <see cref="M:Northwoods.Go.GoObject.CanDelete"/>
            property as well.
            All actions take place within a <see cref="F:Northwoods.Go.GoUndoManager.DeleteSelectionName"/> transaction.
            This method also calls <see cref="M:Northwoods.Go.GoView.RaiseSelectionDeleting(System.ComponentModel.CancelEventArgs)"/> and <see cref="M:Northwoods.Go.GoView.RaiseSelectionDeleted"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoView.OnSelectionDeleting(System.ComponentModel.CancelEventArgs)">
            <summary>
            Invoke all <see cref="E:Northwoods.Go.GoView.SelectionDeleting"/> event handlers.
            </summary>
            <param name="evt"></param>
        </member>
        <member name="M:Northwoods.Go.GoView.RaiseSelectionDeleting(System.ComponentModel.CancelEventArgs)">
            <summary>
            Call <see cref="M:Northwoods.Go.GoView.OnSelectionDeleting(System.ComponentModel.CancelEventArgs)"/> with the given <c>CancelEventArgs</c>
            to raise a <see cref="E:Northwoods.Go.GoView.SelectionDeleting"/> event.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoView.OnSelectionDeleted(System.EventArgs)">
            <summary>
            Invoke all <see cref="E:Northwoods.Go.GoView.SelectionDeleted"/> event handlers.
            </summary>
            <param name="evt"></param>
        </member>
        <member name="M:Northwoods.Go.GoView.RaiseSelectionDeleted">
            <summary>
            Call <see cref="M:Northwoods.Go.GoView.OnSelectionDeleted(System.EventArgs)"/> to raise a <see cref="E:Northwoods.Go.GoView.SelectionDeleted"/> event.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoView.CanEditDelete">
            <summary>
            This predicate is true when the user can perform the <see cref="M:Northwoods.Go.GoView.EditDelete"/> action.
            </summary>
            <remarks>
            This returns false if the <see cref="P:Northwoods.Go.GoView.Selection"/> is empty,
            if <see cref="M:Northwoods.Go.GoView.CanDeleteObjects"/> is false,
            or if the primary selection's <see cref="M:Northwoods.Go.GoObject.CanDelete"/> property is false.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoView.DeleteSelection(Northwoods.Go.GoSelection)"/>
        </member>
        <member name="M:Northwoods.Go.GoView.EditDelete">
            <summary>
            Remove all selected objects from this view's document.
            </summary>
            <remarks>
            This just calls <see cref="M:Northwoods.Go.GoView.DeleteSelection(Northwoods.Go.GoSelection)"/> with this view's
            <see cref="P:Northwoods.Go.GoView.Selection"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoView.EditObject(Northwoods.Go.GoObject)">
            <summary>
            Begin having the user edit an object.
            </summary>
            <param name="obj"></param>
            <remarks>
            This method does nothing if <see cref="M:Northwoods.Go.GoView.CanEditObjects"/> is false
            or if <paramref name="obj"/>'s <see cref="M:Northwoods.Go.GoObject.CanEdit"/> property
            is false.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoObject.DoBeginEdit(Northwoods.Go.GoView)"/>
        </member>
        <member name="M:Northwoods.Go.GoView.CanEditEdit">
            <summary>
            This predicate is true when the user can perform the <see cref="M:Northwoods.Go.GoView.EditEdit"/> action.
            </summary>
            <remarks>
            This returns false if the <see cref="P:Northwoods.Go.GoView.Selection"/> is empty,
            if <see cref="M:Northwoods.Go.GoView.CanEditObjects"/> is false,
            or if the primary selection's <see cref="M:Northwoods.Go.GoObject.CanEdit"/> property is false.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoView.EditObject(Northwoods.Go.GoObject)"/>
        </member>
        <member name="M:Northwoods.Go.GoView.EditEdit">
            <summary>
            Have the user edit the primary selection.
            </summary>
            <remarks>
            This just calls <see cref="M:Northwoods.Go.GoView.EditObject(Northwoods.Go.GoObject)"/> with the view's
            <see cref="P:Northwoods.Go.GoSelection.Primary"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoView.OnObjectGotSelection(Northwoods.Go.GoSelectionEventArgs)">
            <summary>
            Invoke all <see cref="E:Northwoods.Go.GoView.ObjectGotSelection"/> event handlers.
            </summary>
            <param name="evt"></param>
        </member>
        <member name="M:Northwoods.Go.GoView.RaiseObjectGotSelection(Northwoods.Go.GoObject)">
            <summary>
            Call <see cref="M:Northwoods.Go.GoView.OnObjectGotSelection(Northwoods.Go.GoSelectionEventArgs)"/> for the given object
            to raise an <see cref="E:Northwoods.Go.GoView.ObjectGotSelection"/> event.
            </summary>
            <param name="obj"></param>
            <remarks>
            This is called by methods in <see cref="T:Northwoods.Go.GoSelection"/> as object are added.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoView.OnObjectLostSelection(Northwoods.Go.GoSelectionEventArgs)">
            <summary>
            Invoke all <see cref="E:Northwoods.Go.GoView.ObjectLostSelection"/> event handlers.
            </summary>
            <param name="evt"></param>
        </member>
        <member name="M:Northwoods.Go.GoView.RaiseObjectLostSelection(Northwoods.Go.GoObject)">
            <summary>
            Call <see cref="M:Northwoods.Go.GoView.OnObjectLostSelection(Northwoods.Go.GoSelectionEventArgs)"/> for the given object
            to raise an <see cref="E:Northwoods.Go.GoView.ObjectLostSelection"/> event.
            </summary>
            <param name="obj"></param>
            <remarks>
            This is called by methods in <see cref="T:Northwoods.Go.GoSelection"/> as object are removed.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoView.OnObjectResized(Northwoods.Go.GoSelectionEventArgs)">
            <summary>
            Invoke all <see cref="E:Northwoods.Go.GoView.ObjectResized"/> event handlers.
            </summary>
            <param name="evt"></param>
        </member>
        <member name="M:Northwoods.Go.GoView.RaiseObjectResized(Northwoods.Go.GoObject)">
            <summary>
            Call <see cref="M:Northwoods.Go.GoView.OnObjectResized(Northwoods.Go.GoSelectionEventArgs)"/> for the given object
            to raise an <see cref="E:Northwoods.Go.GoView.ObjectResized"/> event.
            </summary>
            <param name="obj"></param>
            <remarks>
            This method is called by <see cref="M:Northwoods.Go.GoToolResizing.DoMouseUp"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoView.SelectNextNode(System.Char)">
            <summary>
            Change the primary selection to be the next node whose label
            starts with a given letter or digit.
            </summary>
            <param name="c"></param>
            <returns>true if it found another node</returns>
            <remarks>
            This method iterates through the <see cref="T:Northwoods.Go.IGoLabeledNode"/>s
            of this view's document, starting with the current primary
            selection (if it is an <see cref="T:Northwoods.Go.IGoLabeledNode"/>), looking
            for the next node that satisfies the <see cref="M:Northwoods.Go.GoView.MatchesNodeLabel(Northwoods.Go.IGoLabeledNode,System.Char)"/>
            predicate.
            If it finds such a node, it makes it this view's only selected object.
            This method is called by <see cref="T:Northwoods.Go.GoToolManager"/> when the user
            types a letter or digit, if <see cref="P:Northwoods.Go.GoView.SelectsByFirstChar"/> is true.
            This method does nothing if <see cref="M:Northwoods.Go.GoView.CanSelectObjects"/> is false.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoView.MatchesNodeLabel(Northwoods.Go.IGoLabeledNode,System.Char)">
            <summary>
            This predicate is called by <see cref="M:Northwoods.Go.GoView.SelectNextNode(System.Char)"/> to
            decide if a node's text label starts with a given character.
            </summary>
            <param name="node"></param>
            <param name="c">a <c>Char</c>, normally a letter or digit</param>
            <returns>
            true if the <paramref name="node"/>'s <see cref="P:Northwoods.Go.IGoLabeledNode.Text"/>'s
            first character is the same as <paramref name="c"/>, ignoring case
            </returns>
        </member>
        <member name="M:Northwoods.Go.GoView.GetBitmapFromCollection(Northwoods.Go.IGoCollection)">
            <summary>
            Return a Bitmap displaying all of the visible objects in the given collection.
            </summary>
            <param name="coll"></param>
            <returns></returns>
            <remarks>
            The size of the Bitmap is determined by the result of calling
            <see cref="M:Northwoods.Go.GoDocument.ComputeBounds(Northwoods.Go.IGoCollection,Northwoods.Go.GoView)"/> on the collection.
            The bitmap is first filled with the paper color.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoView.GetBitmapFromCollection(Northwoods.Go.IGoCollection,System.Drawing.RectangleF,System.Boolean)">
            <summary>
            Return a Bitmap displaying all of the visible objects in the given collection
            that paint within the given bounds.
            </summary>
            <param name="coll"></param>
            <param name="bounds">The portion of the rendering, in document coordinates</param>
            <param name="paper">Whether to call <see cref="M:Northwoods.Go.GoView.PaintPaperColor(System.Drawing.Graphics,System.Drawing.RectangleF)"/> for the background</param>
            <returns>A <c>Bitmap</c></returns>
            <remarks>
            This method creates a <c>Bitmap</c> whose size is determined by
            <paramref name="bounds"/> (minimum 1x1), that displays what is painted
            starting at the rectangle's top-left position in the document.
            It calls <see cref="M:Northwoods.Go.GoView.PaintPaperColor(System.Drawing.Graphics,System.Drawing.RectangleF)"/> to fill in the bitmap and then calls
            <see cref="M:Northwoods.Go.GoObject.Paint(System.Drawing.Graphics,Northwoods.Go.GoView)"/> for each object in <paramref name="coll"/>
            whose <see cref="M:Northwoods.Go.GoObject.CanView"/> property is true.
            <para>
            In GoDiagram Pocket, the <paramref name="paper"/> argument is assumed to be true,
            because the .NET Compact Framework does not support alpha-blending.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoView.DrawXorBox(System.Drawing.Rectangle,System.Boolean)">
            <summary>
            This convenience method erases any previous XOR-drawn rectangle and then
            may draw a new one with the given dimensions.
            </summary>
            <param name="rect">The size and location of the rectangle to draw, in view coordinates.</param>
            <param name="drawnew">Whether to draw the new XOR rectangle.</param>
            <remarks>
            This always erases any earlier XOR rectangle drawn by this method.
            It only draws a new rectangle if <paramref name="drawnew"/> is true.
            <para>
            In GoDiagram Pocket, this draws a gray rectangle, because the .NET Compact
            Framework does not support drawing in XOR mode.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoView.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            Called by the system when needing to fix up invalidated parts of this view.
            </summary>
            <param name="evt"></param>
        </member>
        <member name="M:Northwoods.Go.GoView.OnPaintBackground(System.Windows.Forms.PaintEventArgs)">
            <summary>
            This method does nothing--<see cref="M:Northwoods.Go.GoView.PaintPaperColor(System.Drawing.Graphics,System.Drawing.RectangleF)"/> does the real work.
            </summary>
            <param name="evt"></param>
        </member>
        <member name="M:Northwoods.Go.GoView.PaintView(System.Drawing.Graphics,System.Drawing.RectangleF)">
            <summary>
            Paint all of the objects of this view or its document that are visible in
            the given rectangle.
            </summary>
            <param name="g"></param>
            <param name="clipRect">A <c>RectangleF</c> in document coordinates.</param>
            <remarks>
            This calls <see cref="M:Northwoods.Go.GoView.PaintPaperColor(System.Drawing.Graphics,System.Drawing.RectangleF)"/>,
            <see cref="M:Northwoods.Go.GoView.PaintBackgroundDecoration(System.Drawing.Graphics,System.Drawing.RectangleF)"/>, and
            <see cref="M:Northwoods.Go.GoView.PaintObjects(System.Boolean,System.Boolean,System.Drawing.Graphics,System.Drawing.RectangleF)"/> for both document and view objects.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoView.PaintPaperColor(System.Drawing.Graphics,System.Drawing.RectangleF)">
            <summary>
            Fill in the document paper color or view background color.
            </summary>
            <param name="g"></param>
            <param name="clipRect"></param>
            <remarks>
            If this view's document's <see cref="P:Northwoods.Go.GoDocument.PaperColor"/> is
            <c>Color.Empty</c> we use this view's <c>BackColor</c> instead.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoView.PaintBackgroundDecoration(System.Drawing.Graphics,System.Drawing.RectangleF)">
            <summary>
            Draw any decoration that should appear behind all of the objects.
            </summary>
            <param name="g"></param>
            <param name="clipRect"></param>
            <remarks>
            By default this method draws this <c>Control</c>'s <c>BackgroundImage</c>,
            if any, and then a grid, according to the <see cref="P:Northwoods.Go.GoView.GridStyle"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoView.PaintObjects(System.Boolean,System.Boolean,System.Drawing.Graphics,System.Drawing.RectangleF)">
            <summary>
            Paint all the document and/or view objects.
            </summary>
            <param name="doc">If true, paint document objects.</param>
            <param name="view">If true, paint view objects.</param>
            <param name="g"></param>
            <param name="clipRect"></param>
            <seealso cref="M:Northwoods.Go.GoLayer.Paint(System.Drawing.Graphics,Northwoods.Go.GoView,System.Drawing.RectangleF)"/>
        </member>
        <member name="M:Northwoods.Go.GoView.OnGotFocus(System.EventArgs)">
            <summary>
            When a view gets focus, make sure the selection appearance can be updated, if needed.
            </summary>
            <param name="evt"></param>
        </member>
        <member name="M:Northwoods.Go.GoView.OnLostFocus(System.EventArgs)">
            <summary>
            When a view loses focus, make sure the selection appearance can be updated, if needed.
            </summary>
            <param name="evt"></param>
        </member>
        <member name="M:Northwoods.Go.GoView.UpdateView">
            <summary>
            Cause the whole view, including scroll bars, to be redrawn.
            </summary>
            <remarks>
            This calls <c>Invalidate()</c> after updating the scroll bars.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoView.BeginUpdate">
            <summary>
            Disable painting of this view.
            </summary>
            <seealso cref="M:Northwoods.Go.GoView.EndUpdate"/>
        </member>
        <member name="M:Northwoods.Go.GoView.EndUpdate">
            <summary>
            Re-enable painting of this view.
            </summary>
            <seealso cref="M:Northwoods.Go.GoView.BeginUpdate"/>
        </member>
        <member name="M:Northwoods.Go.GoView.UpdateScrollBars">
            <summary>
            Update the scroll bars for this view, changing the minimum/maximum/value
            and visibility as appropriate.
            </summary>
            <seealso cref="M:Northwoods.Go.GoView.LayoutScrollBars(System.Boolean)"/>
        </member>
        <member name="M:Northwoods.Go.GoView.HandleScroll(System.Object,System.EventArgs)">
            <summary>
            This is the event handler for both scroll bars.
            </summary>
            <param name="sender"></param>
            <param name="e">
            This is a <c>ScrollEventArgs</c>, except in GoDiagram Pocket where it is an <c>EventArgs</c>,
            due to the differences in scroll bar controls between the standard framework and the
            compact framework.
            </param>
            <remarks>
            This method sets the <see cref="P:Northwoods.Go.GoView.DocPosition"/> property according to
            the new value.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoView.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)">
            <summary>
            Handle changes to any view layers or view objects.
            </summary>
            <param name="hint"></param>
            <param name="subhint"></param>
            <param name="x"></param>
            <param name="oldI"></param>
            <param name="oldVal"></param>
            <param name="oldRect"></param>
            <param name="newI"></param>
            <param name="newVal"></param>
            <param name="newRect"></param>
            <remarks>
            By default this method just invalidates part or all of this view
            whenever an object is modified, inserted, or removed from a view layer,
            or when a view layer is modified, added, or removed.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoView.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Call all <see cref="E:Northwoods.Go.GoView.PropertyChanged"/> event handlers.
            </summary>
            <param name="evt"></param>
            <remarks>
            This also calls <see cref="M:Northwoods.Go.GoView.UpdateView"/>, unless the property is
            known to be a minor one.
            If you override this method, be sure to call the base method too.
            This is called by <see cref="M:Northwoods.Go.GoView.RaisePropertyChangedEvent(System.String)"/>
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoView.RaisePropertyChangedEvent(System.String)">
            <summary>
            Raise a <see cref="E:Northwoods.Go.GoView.PropertyChanged"/> event for the given property name.
            </summary>
            <param name="propname"></param>
            <remarks>
            This just calls <see cref="M:Northwoods.Go.GoView.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoView.OnDocumentChanged(System.Object,Northwoods.Go.GoChangedEventArgs)">
            <summary>
            Handle changes to the view's document or any of the document's layers or objects.
            </summary>
            <param name="sender">A <see cref="T:Northwoods.Go.GoDocument"/>.</param>
            <param name="e">A <see cref="T:Northwoods.Go.GoChangedEventArgs"/> describing the change.</param>
            <remarks>
            By default this method just invalidates part or all of this view
            whenever an object is modified, inserted, or removed from a layer in this view's
            document, or when a document layer is modified, added, or removed, or when a
            document is changed.
            It also passes the event args on to all <see cref="E:Northwoods.Go.GoView.DocumentChanged"/> event
            handlers registered with this view.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoView.OnKeyDown(System.Windows.Forms.KeyEventArgs)">
            <summary>
            This method is the view's key event handler.
            </summary>
            <param name="evt"></param>
            <remarks>
            This method makes sure the <see cref="P:Northwoods.Go.GoView.LastInput"/> property value
            has up-to-date information describing this keyboard input event.
            It then calls <see cref="M:Northwoods.Go.GoView.DoKeyDown"/>, and then finally calls
            the base method to invoke all of the <c>KeyDown</c> event handlers.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoView.DoKeyDown">
            <summary>
            Handle a canonicalized keyboard input event.
            </summary>
            <remarks>
            This method assumes <see cref="P:Northwoods.Go.GoView.LastInput"/> has information
            representing a keyboard input event.
            By default this just calls <see cref="M:Northwoods.Go.IGoTool.DoKeyDown"/>
            on the current <see cref="P:Northwoods.Go.GoView.Tool"/>.
            This is normally called by <see cref="M:Northwoods.Go.GoView.OnKeyDown(System.Windows.Forms.KeyEventArgs)"/> and any
            other code that wishes to simulate a canonicalized keyboard event.
            This is not called when <see cref="P:Northwoods.Go.GoView.AllowKey"/> is false.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoView.OnMouseDown(System.Windows.Forms.MouseEventArgs)">
            <summary>
            This method is the view's mouse down event handler.
            </summary>
            <param name="evt"></param>
            <remarks>
            This method makes sure the <see cref="P:Northwoods.Go.GoView.LastInput"/> and
            <see cref="P:Northwoods.Go.GoView.FirstInput"/> canonicalized input property values
            have up-to-date information describing this mouse input event.
            It then calls <see cref="M:Northwoods.Go.GoView.DoMouseDown"/> to allow tools
            to handle the input event, and then finally calls
            the base method to invoke all of the <c>MouseDown</c> event handlers.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoView.OnMouseMove(System.Windows.Forms.MouseEventArgs)">
            <summary>
            This method is the view's mouse move event handler.
            </summary>
            <param name="evt"></param>
            <remarks>
            This method makes sure the <see cref="P:Northwoods.Go.GoView.LastInput"/> property value
            has up-to-date information describing this mouse input event.
            It then calls <see cref="M:Northwoods.Go.GoView.DoMouseMove"/> to allow tools
            to handle the input event, and then finally calls
            the base method to invoke all of the <c>MouseMove</c> event handlers.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoView.OnMouseUp(System.Windows.Forms.MouseEventArgs)">
            <summary>
            This method is the view's mouse up event handler.
            </summary>
            <param name="evt"></param>
            <remarks>
            This method makes sure the <see cref="P:Northwoods.Go.GoView.LastInput"/> property value
            has up-to-date information describing this mouse input event.
            It then calls <see cref="M:Northwoods.Go.GoView.DoMouseUp"/> to allow tools
            to handle the input event, and then finally calls
            the base method to invoke all of the <c>MouseUp</c> event handlers.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoView.DoMouseDown">
            <summary>
            Handle a canonicalized mouse down input event.
            </summary>
            <remarks>
            This method assumes <see cref="P:Northwoods.Go.GoView.LastInput"/> has information
            representing a mouse down input event.
            We also assume that <see cref="P:Northwoods.Go.GoView.FirstInput"/> has a copy
            of the canonicalized input event.
            By default this just gets focus and calls <see cref="M:Northwoods.Go.IGoTool.DoMouseDown"/>
            on the current <see cref="P:Northwoods.Go.GoView.Tool"/>.
            This is normally called by <see cref="M:Northwoods.Go.GoView.OnMouseDown(System.Windows.Forms.MouseEventArgs)"/> and any
            other code that wishes to simulate a canonicalized mouse down event.
            This is not called when <see cref="P:Northwoods.Go.GoView.AllowMouse"/> is false.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoView.DoMouseMove">
            <summary>
            Handle a canonicalized mouse move input event.
            </summary>
            <remarks>
            This method assumes <see cref="P:Northwoods.Go.GoView.LastInput"/> has information
            representing a mouse move input event.
            By default this just calls <see cref="M:Northwoods.Go.IGoTool.DoMouseMove"/>
            on the current <see cref="P:Northwoods.Go.GoView.Tool"/>.
            This is normally called by <see cref="M:Northwoods.Go.GoView.OnMouseMove(System.Windows.Forms.MouseEventArgs)"/> and any
            other code that wishes to simulate a canonicalized mouse move event.
            This is not called when <see cref="P:Northwoods.Go.GoView.AllowMouse"/> is false.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoView.DoMouseUp">
            <summary>
            Handle a canonicalized mouse up input event.
            </summary>
            <remarks>
            This method assumes <see cref="P:Northwoods.Go.GoView.LastInput"/> has information
            representing a mouse up input event.
            By default this just calls <see cref="M:Northwoods.Go.IGoTool.DoMouseUp"/>
            on the current <see cref="P:Northwoods.Go.GoView.Tool"/>.
            This is normally called by <see cref="M:Northwoods.Go.GoView.OnMouseUp(System.Windows.Forms.MouseEventArgs)"/> and any
            other code that wishes to simulate a canonicalized mouse up event.
            This is not called when <see cref="P:Northwoods.Go.GoView.AllowMouse"/> is false.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoView.DoCancelMouse">
            <summary>
            Handle a canonicalized cancel input event.
            </summary>
            <remarks>
            This method assumes <see cref="P:Northwoods.Go.GoView.LastInput"/> has information
            representing a mouse down input event.
            By default this just calls <see cref="M:Northwoods.Go.IGoTool.DoMouseDown"/>
            on the current <see cref="P:Northwoods.Go.GoView.Tool"/>.
            This is normally called by <c>OnQueryContinueDrag</c>
            and most tools when the user types an <c>Escape</c>, and by any
            other code that wishes to simulate cancelling a mouse operation.
            For example, this is called when the <see cref="P:Northwoods.Go.GoView.Document"/>
            is changed, to try to clean up any input operation that might
            be in progress.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoView.CreateDefaultTool">
            <summary>
            Create an instance of the default <see cref="P:Northwoods.Go.GoView.DefaultTool"/> for this view.
            </summary>
            <returns></returns>
            <remarks>
            By default this creates an instance of <see cref="T:Northwoods.Go.GoToolManager"/>.
            </remarks>
            <seealso cref="P:Northwoods.Go.GoView.Tool"/>
        </member>
        <member name="M:Northwoods.Go.GoView.ReplaceMouseTool(System.Type,Northwoods.Go.IGoTool)">
            <summary>
            Replace one of the "mode-less" tools used by this view.
            </summary>
            <param name="tooltype">the <c>Type</c> of the tool to be replaced;
            this should not be a base class of the actual tool instance type</param>
            <param name="newtool">the tool to use instead of the existing one of
            <c>Type</c> <paramref name="tooltype"/>;
            if null, the old tool is only removed</param>
            <returns>the tool that was replaced, or null if no such instance was found</returns>
            <remarks>
            When you want to customize an existing "mode-less" tool, and when setting one of its properties
            is insufficient, you may need to define your own subclass of that tool or define
            your own tool inheriting from <see cref="T:Northwoods.Go.GoTool"/>.
            In order for the view to use your tool, you'll need to create an instance of
            your tool class for the view, and then you can either set <see cref="P:Northwoods.Go.GoView.Tool"/>
            explicitly, or let <see cref="T:Northwoods.Go.GoToolManager"/> find your tool in one of the mouse tool
            lists, such as <see cref="P:Northwoods.Go.GoView.MouseDownTools"/>.
            For the latter case, you could just add an instance of your tool to one of those lists.
            But often you will not want to allow the instance of the original tool class to be used.
            This method makes it easy to replace an existing tool with a different one.
            This method searches all of the lists of mode-less tools:
            <seealso cref="P:Northwoods.Go.GoView.MouseDownTools"/>, <seealso cref="P:Northwoods.Go.GoView.MouseMoveTools"/>, <seealso cref="P:Northwoods.Go.GoView.MouseUpTools"/>.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoView.FindMouseTool(System.Type)"/>
            <example>
            You have defined a new subclass of <see cref="T:Northwoods.Go.GoToolLinkingNew"/>, called <c>CustomLinkTool</c>.
            For each view that you want to use of this new tool instead of the standard way
            for users to draw new links, call
            <c>aView.ReplaceMouseTool(typeof(GoToolLinkingNew), new CustomLinkTool(aView))</c>
            </example>
        </member>
        <member name="M:Northwoods.Go.GoView.FindMouseTool(System.Type)">
            <summary>
            Find one of the tools used by this view that is an instance of a given tool type.
            </summary>
            <param name="tooltype"></param>
            <returns>null if no mouse tool's type is exactly <paramref name="tooltype"/></returns>
            <remarks>
            This is most useful when you want to modify one of the standard tools, typically by
            setting one of its properties.
            This method searches all of the lists of mode-less tools:
            <seealso cref="P:Northwoods.Go.GoView.MouseDownTools"/>, <seealso cref="P:Northwoods.Go.GoView.MouseMoveTools"/>, <seealso cref="P:Northwoods.Go.GoView.MouseUpTools"/>.
            </remarks>
            <example>
            (myView.FindMouseTool(typeof(GoToolLinkingNew)) as GoToolLinkingNew).ForwardsOnly = true
            </example>
            <seealso cref="M:Northwoods.Go.GoView.ReplaceMouseTool(System.Type,Northwoods.Go.IGoTool)"/>
        </member>
        <member name="M:Northwoods.Go.GoView.CreateLink(Northwoods.Go.IGoPort,Northwoods.Go.IGoPort)">
            <summary>
            The <see cref="T:Northwoods.Go.GoToolLinking"/> class calls this method to create a new link between ports.
            </summary>
            <param name="fromPort">if null, this method will return null</param>
            <param name="toPort">if null, this method will return null</param>
            <returns></returns>
            <remarks>
            By default this method creates an instance of the <see cref="P:Northwoods.Go.GoView.NewLinkClass"/> type,
            assigns the <see cref="P:Northwoods.Go.IGoLink.FromPort"/> and <see cref="P:Northwoods.Go.IGoLink.ToPort"/>
            properties.
            How it adds the new link to this view's document depends on the ports.
            If both of the ports belong to <see cref="T:Northwoods.Go.GoSubGraph"/>s, it adds the new link
            to the common parent <see cref="T:Northwoods.Go.GoSubGraph"/> for both ports.
            Otherwise it adds the new link to the document's <see cref="P:Northwoods.Go.GoDocument.LinksLayer"/>.
            The <c>LinkCreated</c> event is <i>not</i> raised here;
            it is raised by <see cref="M:Northwoods.Go.GoToolLinking.DoNewLink(Northwoods.Go.IGoPort,Northwoods.Go.IGoPort)"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoView.OnLinkCreated(Northwoods.Go.GoSelectionEventArgs)">
            <summary>
            Invoke all <see cref="E:Northwoods.Go.GoView.LinkCreated"/> event handlers.
            </summary>
            <param name="evt"></param>
        </member>
        <member name="M:Northwoods.Go.GoView.RaiseLinkCreated(Northwoods.Go.GoObject)">
            <summary>
            Call <see cref="M:Northwoods.Go.GoView.OnLinkCreated(Northwoods.Go.GoSelectionEventArgs)"/> for the given object
            to raise a <see cref="E:Northwoods.Go.GoView.LinkCreated"/> event.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Northwoods.Go.GoView.OnLinkRelinked(Northwoods.Go.GoSelectionEventArgs)">
            <summary>
            Invoke all <see cref="E:Northwoods.Go.GoView.LinkRelinked"/> event handlers.
            </summary>
            <param name="evt"></param>
        </member>
        <member name="M:Northwoods.Go.GoView.RaiseLinkRelinked(Northwoods.Go.GoObject)">
            <summary>
            Call <see cref="M:Northwoods.Go.GoView.OnLinkRelinked(Northwoods.Go.GoSelectionEventArgs)"/> for the given object
            to raise a <see cref="E:Northwoods.Go.GoView.LinkRelinked"/> event.
            </summary>
            <param name="obj"></param>
            <remarks>
            This method is called by <see cref="M:Northwoods.Go.GoToolLinking.DoRelink(Northwoods.Go.IGoLink,Northwoods.Go.IGoPort,Northwoods.Go.IGoPort)"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoView.DoSingleClick(Northwoods.Go.GoInputEventArgs)">
            <summary>
            Perform the behavior that normally occurs upon a single click.
            </summary>
            <param name="evt"></param>
            <returns></returns>
            <remarks>
            By default this picks the document object at the event's
            <see cref="P:Northwoods.Go.GoInputEventArgs.DocPoint"/>.
            If an object is found, it raises the <c>ObjectSingleClicked</c> event and
            calls <see cref="M:Northwoods.Go.GoObject.OnSingleClick(Northwoods.Go.GoInputEventArgs,Northwoods.Go.GoView)"/> on the object and
            on its <see cref="P:Northwoods.Go.GoObject.Parent"/>s (if any) until it returns
            true.
            If no object is found at the event's point, it raises the
            <see cref="E:Northwoods.Go.GoView.BackgroundSingleClicked"/> event.
            This is normally called from the <see cref="M:Northwoods.Go.GoTool.DoClick(Northwoods.Go.GoInputEventArgs)"/>
            method, which is called by those tools that treat clicks in the
            standard fashion.
            <para>
            In GoDiagram Pocket, this method also calls <c>DoToolTipObject</c>,
            because there is no mouse-over event.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoView.DoDoubleClick(Northwoods.Go.GoInputEventArgs)">
            <summary>
            Perform the behavior that normally occurs upon a double click.
            </summary>
            <param name="evt"></param>
            <returns></returns>
            <remarks>
            By default this picks the document object at the event's
            <see cref="P:Northwoods.Go.GoInputEventArgs.DocPoint"/>.
            If an object is found, it raises the <c>ObjectDoubleClicked</c> event and
            calls <see cref="M:Northwoods.Go.GoObject.OnDoubleClick(Northwoods.Go.GoInputEventArgs,Northwoods.Go.GoView)"/> on the object and
            on its <see cref="P:Northwoods.Go.GoObject.Parent"/>s (if any) until it returns
            true.
            If no object is found at the event's point, it raises the
            <see cref="E:Northwoods.Go.GoView.BackgroundDoubleClicked"/> event.
            This is normally called from the <see cref="M:Northwoods.Go.GoTool.DoClick(Northwoods.Go.GoInputEventArgs)"/>
            method, which is called by those tools that treat clicks in the
            standard fashion.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoView.DoContextClick(Northwoods.Go.GoInputEventArgs)">
            <summary>
            Perform the behavior that normally occurs upon a context click.
            </summary>
            <param name="evt"></param>
            <returns></returns>
            <remarks>
            <para>
            By default this picks the document object at the event's
            <see cref="P:Northwoods.Go.GoInputEventArgs.DocPoint"/>.
            If an object is found, it raises the <c>ObjectContextClicked</c> event and
            calls <see cref="M:Northwoods.Go.GoObject.OnContextClick(Northwoods.Go.GoInputEventArgs,Northwoods.Go.GoView)"/> on the object and
            on its <see cref="P:Northwoods.Go.GoObject.Parent"/>s (if any) until it returns
            true.
            </para>
            <para>
            If no object is found at the event's point, it raises the
            <see cref="E:Northwoods.Go.GoView.BackgroundContextClicked"/> event.
            </para>
            <para>
            This is normally called from a context mouse button handling tool.
            </para>
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoView.DoWheel(Northwoods.Go.GoInputEventArgs)">
            <summary>
            Perform the standard mouse wheel behavior for views.
            </summary>
            <param name="evt"></param>
            <remarks>
            When the Control key is held down, rotating the mouse wheel changes the
            <see cref="P:Northwoods.Go.GoView.DocScale"/> to "zoom" the view in or out.
            Otherwise rotating the mouse wheel scrolls the view by calling <see cref="M:Northwoods.Go.GoView.ScrollLine(System.Single,System.Single)"/>.
            If the Shift key is held down, the scrolling is horizontal instead of vertical.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoView.OnObjectSingleClicked(Northwoods.Go.GoObjectEventArgs)">
            <summary>
            Invoke all <see cref="E:Northwoods.Go.GoView.ObjectSingleClicked"/> event handlers.
            </summary>
            <param name="evt"></param>
        </member>
        <member name="M:Northwoods.Go.GoView.RaiseObjectSingleClicked(Northwoods.Go.GoObject,Northwoods.Go.GoInputEventArgs)">
            <summary>
            Raise an <see cref="E:Northwoods.Go.GoView.ObjectSingleClicked"/> event for a given object and canonicalized input event.
            </summary>
            <param name="obj"></param>
            <param name="evt"></param>
        </member>
        <member name="M:Northwoods.Go.GoView.OnObjectDoubleClicked(Northwoods.Go.GoObjectEventArgs)">
            <summary>
            Invoke all <see cref="E:Northwoods.Go.GoView.ObjectDoubleClicked"/> event handlers.
            </summary>
            <param name="evt"></param>
        </member>
        <member name="M:Northwoods.Go.GoView.RaiseObjectDoubleClicked(Northwoods.Go.GoObject,Northwoods.Go.GoInputEventArgs)">
            <summary>
            Raise an <see cref="E:Northwoods.Go.GoView.ObjectDoubleClicked"/> event for a given object and canonicalized input event.
            </summary>
            <param name="obj"></param>
            <param name="evt"></param>
        </member>
        <member name="M:Northwoods.Go.GoView.OnObjectContextClicked(Northwoods.Go.GoObjectEventArgs)">
            <summary>
            Invoke all <see cref="E:Northwoods.Go.GoView.ObjectContextClicked"/> event handlers.
            </summary>
            <param name="evt"></param>
        </member>
        <member name="M:Northwoods.Go.GoView.RaiseObjectContextClicked(Northwoods.Go.GoObject,Northwoods.Go.GoInputEventArgs)">
            <summary>
            Raise an <see cref="E:Northwoods.Go.GoView.ObjectContextClicked"/> event for a given object and canonicalized input event.
            </summary>
            <param name="obj"></param>
            <param name="evt"></param>
        </member>
        <member name="M:Northwoods.Go.GoView.OnBackgroundSingleClicked(Northwoods.Go.GoInputEventArgs)">
            <summary>
            Invoke all <see cref="E:Northwoods.Go.GoView.BackgroundSingleClicked"/> event handlers.
            </summary>
            <param name="evt"></param>
        </member>
        <member name="M:Northwoods.Go.GoView.RaiseBackgroundSingleClicked(Northwoods.Go.GoInputEventArgs)">
            <summary>
            Raise a <see cref="E:Northwoods.Go.GoView.BackgroundSingleClicked"/> event for a given canonicalized input event.
            </summary>
            <param name="evt"></param>
        </member>
        <member name="M:Northwoods.Go.GoView.OnBackgroundDoubleClicked(Northwoods.Go.GoInputEventArgs)">
            <summary>
            Invoke all <see cref="E:Northwoods.Go.GoView.BackgroundDoubleClicked"/> event handlers.
            </summary>
            <param name="evt"></param>
        </member>
        <member name="M:Northwoods.Go.GoView.RaiseBackgroundDoubleClicked(Northwoods.Go.GoInputEventArgs)">
            <summary>
            Raise a <see cref="E:Northwoods.Go.GoView.BackgroundDoubleClicked"/> event for a given canonicalized input event.
            </summary>
            <param name="evt"></param>
        </member>
        <member name="M:Northwoods.Go.GoView.OnBackgroundContextClicked(Northwoods.Go.GoInputEventArgs)">
            <summary>
            Invoke all <see cref="E:Northwoods.Go.GoView.BackgroundContextClicked"/> event handlers.
            </summary>
            <param name="evt"></param>
            <remarks>
            This event is often used to provide a context menu for the view when no
            object is at the click point.
            We recommend not using the <c>Control.ContextMenu</c> property, but bringing
            up a context menu explicitly when handling this event.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoView.RaiseBackgroundContextClicked(Northwoods.Go.GoInputEventArgs)">
            <summary>
            Raise a <see cref="E:Northwoods.Go.GoView.BackgroundContextClicked"/> event for a given canonicalized input event.
            </summary>
            <param name="evt"></param>
        </member>
        <member name="M:Northwoods.Go.GoView.DoToolTipObject(Northwoods.Go.GoObject)">
            <summary>
            This method is responsible for finding a tooltip string for an object and then
            displaying it in a ToolTip.
            </summary>
            <param name="obj"></param>
            <remarks>
            This calls <see cref="M:Northwoods.Go.GoObject.GetToolTip(Northwoods.Go.GoView)"/> on the given object
            and its <see cref="P:Northwoods.Go.GoObject.Parent"/>'s until it gets a non-null
            <c>String</c> return value.
            By default this method does nothing if this view has no <see cref="P:Northwoods.Go.GoView.ToolTip"/>
            <c>Control</c>.
            This method is normally called by <see cref="!:DoMouseOver"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoView.CanEditCopy">
            <summary>
            This predicate is true when the user can perform the <see cref="M:Northwoods.Go.GoView.EditCopy"/> action.
            </summary>
            <remarks>
            This returns false if the <see cref="P:Northwoods.Go.GoView.Selection"/> is empty,
            if <see cref="M:Northwoods.Go.GoView.CanCopyObjects"/> is false,
            or if the primary selection's <see cref="M:Northwoods.Go.GoObject.CanCopy"/> property is false.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoView.CopyToClipboard(Northwoods.Go.IGoCollection)"/>
        </member>
        <member name="M:Northwoods.Go.GoView.EditCopy">
            <summary>
            Copy the <see cref="P:Northwoods.Go.GoView.Selection"/> to the clipboard.
            </summary>
            <remarks>
            This method does nothing if <see cref="M:Northwoods.Go.GoView.CanCopyObjects"/> is false.
            This just calls <see cref="M:Northwoods.Go.GoView.CopyToClipboard(Northwoods.Go.IGoCollection)"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoView.CopyToClipboard(Northwoods.Go.IGoCollection)">
            <summary>
            Put a copy of a collection of objects in the clipboard.
            </summary>
            <param name="coll"></param>
            <remarks>
            The collection is copied into a new document of the same
            class as the <see cref="P:Northwoods.Go.GoView.Document"/> property value.
            (That document class must have a public zero-argument constructor.)
            This method then calls <see cref="M:Northwoods.Go.GoDocument.MergeLayersFrom(Northwoods.Go.GoDocument)"/> this
            view's document and then calls <see cref="M:Northwoods.Go.GoDocument.CopyFromCollection(Northwoods.Go.IGoCollection)"/>
            to make a copy of all of the objects in <paramref name="coll"/> in
            the new document in the appropriate layers.
            The new document is then inserted into the clipboard using that
            document's <see cref="P:Northwoods.Go.GoDocument.DataFormat"/>.
            To facilitate pasting into regular (not GoDiagram) documents, the collection
            is also drawn into a bitmap, using <see cref="M:Northwoods.Go.GoView.GetBitmapFromCollection(Northwoods.Go.IGoCollection)"/>,
            and that bitmap is inserted into the clipboard as an alternative data format.
            Finally, each object in the clipboard document that implements
            <see cref="T:Northwoods.Go.IGoLabeledNode"/> provides a text value.  The text strings are
            all concatenated together, separated by NewLines, to provide a textual data format
            value in the clipboard for those applications that cannot handle bitmaps.
            If the <paramref name="coll"/> is null or empty, the clipboard is cleared
            of any previous data values.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoView.CanEditCut">
            <summary>
            This predicate is true when the user can perform the <see cref="M:Northwoods.Go.GoView.EditCut"/> action.
            </summary>
            <remarks>
            This returns false if the <see cref="P:Northwoods.Go.GoView.Selection"/> is empty,
            if <see cref="M:Northwoods.Go.GoView.CanCopyObjects"/> is false,
            if <see cref="M:Northwoods.Go.GoView.CanDeleteObjects"/> is false,
            or if the primary selection's <see cref="M:Northwoods.Go.GoObject.CanCopy"/>
            or <see cref="M:Northwoods.Go.GoObject.CanDelete"/> properties are false.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoView.CopyToClipboard(Northwoods.Go.IGoCollection)"/>
            <seealso cref="M:Northwoods.Go.GoView.DeleteSelection(Northwoods.Go.GoSelection)"/>
        </member>
        <member name="M:Northwoods.Go.GoView.EditCut">
            <summary>
            Copy the current <see cref="P:Northwoods.Go.GoView.Selection"/> to the clipboard and then delete it.
            </summary>
            <remarks>
            This method does nothing if <see cref="M:Northwoods.Go.GoView.CanCopyObjects"/> or
            <see cref="M:Northwoods.Go.GoView.CanDeleteObjects"/> is false.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoView.CopyToClipboard(Northwoods.Go.IGoCollection)"/>
            <seealso cref="M:Northwoods.Go.GoView.DeleteSelection(Northwoods.Go.GoSelection)"/>
        </member>
        <member name="M:Northwoods.Go.GoView.CanEditPaste">
            <summary>
            This predicate is true when the user can perform the <see cref="M:Northwoods.Go.GoView.EditPaste"/> action.
            </summary>
            <remarks>
            This returns false if <see cref="M:Northwoods.Go.GoView.CanInsertObjects"/> is false,
            or if the clipboard doesn't have data supporting the <see cref="P:Northwoods.Go.GoDocument.DataFormat"/> format.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoView.PasteFromClipboard"/>
        </member>
        <member name="M:Northwoods.Go.GoView.EditPaste">
            <summary>
            Paste and select a copy of the clipboard's GoObjects into this view's document.
            </summary>
            <remarks>
            After calling <see cref="M:Northwoods.Go.GoView.PasteFromClipboard"/>, it selects all
            of the newly inserted top-level objects.
            This method does nothing if <see cref="M:Northwoods.Go.GoView.CanInsertObjects"/> is false.
            This method also calls <see cref="M:Northwoods.Go.GoView.RaiseClipboardPasted"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoView.OnClipboardPasted(System.EventArgs)">
            <summary>
            Invoke all <see cref="E:Northwoods.Go.GoView.ClipboardPasted"/> event handlers.
            </summary>
            <param name="evt"></param>
        </member>
        <member name="M:Northwoods.Go.GoView.RaiseClipboardPasted">
            <summary>
            Call <see cref="M:Northwoods.Go.GoView.OnClipboardPasted(System.EventArgs)"/> to raise a <see cref="E:Northwoods.Go.GoView.ClipboardPasted"/> event.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoView.PasteFromClipboard">
            <summary>
            Copy the GoObjects in the clipboard into this view's document.
            </summary>
            <returns>The <see cref="T:Northwoods.Go.GoCopyDictionary"/> representing the results of the copy.</returns>
            <remarks>
            This assumes the clipboard has a value in this view's document's
            <see cref="P:Northwoods.Go.GoDocument.DataFormat"/>.
            The value will be a <see cref="T:Northwoods.Go.GoDocument"/>; we just call
            <see cref="M:Northwoods.Go.GoDocument.CopyFromCollection(Northwoods.Go.IGoCollection)"/> to copy the objects
            from the clipboard document into this document.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoView.DrawGridLines(System.Drawing.Graphics,System.Drawing.RectangleF)">
            <summary>
            Draw continuous lines for the grids.
            </summary>
            <param name="g"></param>
            <param name="clipRect"></param>
        </member>
        <member name="M:Northwoods.Go.GoView.DrawGridCrosses(System.Drawing.Graphics,System.Drawing.SizeF,System.Drawing.RectangleF)">
            <summary>
            Draw small crosses at the grid points.
            </summary>
            <param name="g"></param>
            <param name="cross"></param>
            <param name="clipRect"></param>
        </member>
        <member name="M:Northwoods.Go.GoView.FindNearestGridPoint(Northwoods.Go.PointF)">
            <summary>
            Find the nearest grid point to a given point.
            </summary>
            <param name="p">A <c>PointF</c> in document coordinates.</param>
            <returns>A <c>PointF</c> grid point in document coordinates.</returns>
        </member>
        <member name="M:Northwoods.Go.GoView.DoEndEdit">
            <summary>
            Stop the user's editing an object using the <see cref="P:Northwoods.Go.GoView.EditControl"/>.
            </summary>
            <remarks>
            If <see cref="P:Northwoods.Go.GoView.EditControl"/> is non-null, we call <see cref="M:Northwoods.Go.GoControl.DoEndEdit(Northwoods.Go.GoView)"/> on it,
            which presumably will call <see cref="M:Northwoods.Go.GoObject.DoEndEdit(Northwoods.Go.GoView)"/> on the
            <see cref="P:Northwoods.Go.GoControl.EditedObject"/>.
            The responsibility for calling <see cref="M:Northwoods.Go.GoView.RaiseObjectEdited(Northwoods.Go.GoObject)"/>
            and for finishing any transaction rests with the individual implementations
            of <see cref="M:Northwoods.Go.GoObject.DoEndEdit(Northwoods.Go.GoView)"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoView.OnObjectEdited(Northwoods.Go.GoSelectionEventArgs)">
            <summary>
            Invoke all <see cref="E:Northwoods.Go.GoView.ObjectEdited"/> event handlers.
            </summary>
            <param name="evt"></param>
        </member>
        <member name="M:Northwoods.Go.GoView.RaiseObjectEdited(Northwoods.Go.GoObject)">
            <summary>
            Call <see cref="M:Northwoods.Go.GoView.OnObjectEdited(Northwoods.Go.GoSelectionEventArgs)"/> for the given object
            to raise an <see cref="E:Northwoods.Go.GoView.ObjectEdited"/> event.
            </summary>
            <param name="obj"></param>
            <remarks>
            This method is called by <see cref="M:Northwoods.Go.GoText.DoEndEdit(Northwoods.Go.GoView)"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoView.GetShadowBrush">
            <summary>
            Get a Brush for filling in an object's drop-shadow.
            </summary>
            <returns>A <c>SolidBrush</c> whose color is <see cref="P:Northwoods.Go.GoView.ShadowColor"/></returns>
        </member>
        <member name="M:Northwoods.Go.GoView.GetShadowPen(System.Single)">
            <summary>
            Get a Pen for drawing an object's drop-shadow.
            </summary>
            <param name="width"></param>
            <returns>A <c>Pen</c> whose color is <see cref="P:Northwoods.Go.GoView.ShadowColor"/></returns>
        </member>
        <member name="M:Northwoods.Go.GoView.CanUndo">
            <summary>
            This just calls <c>Document.CanUndo()</c>.
            </summary>
            <returns><see cref="M:Northwoods.Go.GoDocument.CanUndo"/></returns>
        </member>
        <member name="M:Northwoods.Go.GoView.Undo">
            <summary>
            This just calls <c>Document.Undo()</c>.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoView.CanRedo">
            <summary>
            This just calls <c>Document.CanRedo()</c>.
            </summary>
            <returns><see cref="M:Northwoods.Go.GoDocument.CanRedo"/></returns>
        </member>
        <member name="M:Northwoods.Go.GoView.Redo">
            <summary>
            This just calls <c>Document.Redo()</c>.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoView.StartTransaction">
            <summary>
            This just calls <c>Document.StartTransaction()</c>.
            </summary>
            <returns><see cref="M:Northwoods.Go.GoDocument.StartTransaction"/></returns>
        </member>
        <member name="M:Northwoods.Go.GoView.FinishTransaction(System.String)">
            <summary>
            This just calls <c>Document.FinishTransaction(tname)</c>.
            </summary>
            <param name="tname"></param>
            <returns><see cref="M:Northwoods.Go.GoDocument.FinishTransaction(System.String)"/></returns>
        </member>
        <member name="M:Northwoods.Go.GoView.AbortTransaction">
            <summary>
            This just calls <c>Document.AbortTransaction()</c>.
            </summary>
            <returns><see cref="M:Northwoods.Go.GoDocument.AbortTransaction"/></returns>
        </member>
        <member name="P:Northwoods.Go.GoView.Version">
            <summary>
            Return the version of GoDiagram being used.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoView.VersionName">
            <summary>
            Return the name of the version of GoDiagram being used.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoView.VerticalScrollBar">
            <summary>
            Gets or sets the vertical scroll bar used by the view when not all objects can be
            displayed at once in the given client area.
            </summary>
            <value>
            The <c>VScrollBar</c> control may be invisible and/or disabled, or null.  Setting this
            property will set up <see cref="M:Northwoods.Go.GoView.HandleScroll(System.Object,System.EventArgs)"/> as a scroll event handler for the scroll bar.
            </value>
            <remarks>
            The scroll bar has the <c>LargeChange</c> and <c>SmallChange</c> properties, which affect how
            much is scrolled at a time.  The <c>LargeChange</c> property is computed given the height of
            the view's client area minus the <c>SmallChange</c> value.  The <c>SmallChange</c> property
            value is taken from the <see cref="P:Northwoods.Go.GoView.ScrollSmallChange"/> property height.
            </remarks>
            <seealso cref="P:Northwoods.Go.GoView.ShowVerticalScrollBar"/>
            <seealso cref="P:Northwoods.Go.GoView.HorizontalScrollBar"/>
            <seealso cref="M:Northwoods.Go.GoView.ScrollPage(System.Single,System.Single)"/>
            <seealso cref="M:Northwoods.Go.GoView.ScrollLine(System.Single,System.Single)"/>
        </member>
        <member name="P:Northwoods.Go.GoView.ShowVerticalScrollBar">
            <summary>
            Gets or sets the visibility policy for the vertical scroll bar.
            </summary>
            <value>
            The default value is <see cref="F:Northwoods.Go.GoViewScrollBarVisibility.IfNeeded"/>.
            </value>
            <seealso cref="T:Northwoods.Go.GoViewScrollBarVisibility"/>
            <seealso cref="P:Northwoods.Go.GoView.VerticalScrollBar"/>
        </member>
        <member name="P:Northwoods.Go.GoView.HorizontalScrollBar">
            <summary>
            Gets or sets the horizontal scroll bar used by the view when not all objects can be
            displayed at once in the given client area.
            </summary>
            <value>
            The <c>HScrollBar</c> control may be invisible and/or disabled, or null.
            </value>
            <remarks>
            The scroll bar has the LargeChange and SmallChange properties, which affect how
            much is scrolled at a time.  The <c>LargeChange</c> property is computed given the width of
            the view's client area minus the <c>SmallChange</c> value.  The <c>SmallChange</c> property
            value is taken from the <see cref="P:Northwoods.Go.GoView.ScrollSmallChange"/> property width.
            </remarks>
            <seealso cref="P:Northwoods.Go.GoView.ShowHorizontalScrollBar"/>
            <seealso cref="P:Northwoods.Go.GoView.VerticalScrollBar"/>
            <seealso cref="M:Northwoods.Go.GoView.ScrollPage(System.Single,System.Single)"/>
            <seealso cref="M:Northwoods.Go.GoView.ScrollLine(System.Single,System.Single)"/>
        </member>
        <member name="P:Northwoods.Go.GoView.ShowHorizontalScrollBar">
            <summary>
            Gets or sets the visibility policy for the horizontal scroll bar.
            </summary>
            <value>
            The default value is <see cref="F:Northwoods.Go.GoViewScrollBarVisibility.IfNeeded"/>.
            </value>
            <seealso cref="T:Northwoods.Go.GoViewScrollBarVisibility"/>
            <seealso cref="P:Northwoods.Go.GoView.HorizontalScrollBar"/>
        </member>
        <member name="P:Northwoods.Go.GoView.CornerControl">
            <summary>
            Gets or sets the <c>Control</c> that fits in the corner adjacent to both vertical
            and horizontal scroll bars, when both are visible.
            </summary>
            <value>
            Any <c>Control</c> may be used here; the initial value is a blank, default <c>Control</c>.
            </value>
            <remarks>
            The position and size of the control are set automatically to fit the scroll
            bars' width and height.
            </remarks>
            <seealso cref="P:Northwoods.Go.GoView.VerticalScrollBar"/>
            <seealso cref="P:Northwoods.Go.GoView.HorizontalScrollBar"/>
        </member>
        <member name="P:Northwoods.Go.GoView.Document">
            <summary>
            Gets or sets the document that this view is displaying.
            </summary>
            <value>
            The initial value is created by a call to <see cref="M:Northwoods.Go.GoView.CreateDocument"/>.
            The value must not be null.
            </value>
            <remarks>
            <para>
            The document serves as the container of graphical objects that you want
            to display.
            Normally you should create graphical objects (instances of subclasses of
            <see cref="T:Northwoods.Go.GoObject"/>) and add them to the document, in order to make them
            visible to the user.
            Although often there will be one view for each document, there are can be
            more than one view displaying the same document, or sometimes no views at all
            for a document.
            Each view will have its own state, such as scroll position and selection.
            The document holds all of the state that should be shared by all views.
            </para>
            <para>
            Setting this property to a different document will stop any ongoing editing
            in this view, clear out the selection, make this view's OnDocumentChanged method
            the event handler for the new document, and call
            <see cref="M:Northwoods.Go.GoView.InitializeLayersFromDocument"/> to set up the document layers in
            this view.
            </para>
            </remarks>
            <seealso cref="T:Northwoods.Go.GoDocument"/>
        </member>
        <member name="P:Northwoods.Go.GoView.DocumentSize">
            <summary>
            Gets the dimensions of the document.
            </summary>
            <value>
            The <c>SizeF</c> value measures the document in document coordinates.
            </value>
            <remarks>
            This value is normally the same as <c>Document.Size</c>.
            However, a view may decide to change the extent of the document that
            the view displays.  For example, the <see cref="P:Northwoods.Go.GoView.ShowsNegativeCoordinates"/>
            property, when false, restricts the view to only showing non-negative
            positions in the document.  In addition to restricting the
            <see cref="P:Northwoods.Go.GoView.DocumentTopLeft"/> property to non-negative positions,
            it adjusts this property accordingly.  This property also leaves room
            for any shadows, as specified by <see cref="P:Northwoods.Go.GoView.ShadowOffset"/>.
            This property is different from the result of <see cref="M:Northwoods.Go.GoView.ComputeDocumentBounds"/>
            because the latter method only takes into account what objects there actually are
            in the document, whereas this property will have the same value even if the
            document is empty.
            A different document size is used when printing, <c>PrintDocumentSize</c>.
            </remarks>
            <seealso cref="P:Northwoods.Go.GoView.DocumentTopLeft"/>
            <seealso cref="P:Northwoods.Go.GoView.ShowsNegativeCoordinates"/>
            <seealso cref="P:Northwoods.Go.GoDocument.Size"/>
        </member>
        <member name="P:Northwoods.Go.GoView.DocumentTopLeft">
            <summary>
            Gets the top-left position of the document.
            </summary>
            <value>
            The <c>PointF</c> value specifies the top-left corner of the document in
            document coordinates.
            </value>
            <remarks>
            This value is normally the same as <c>Document.TopLeft</c>.
            However, a view may decide to change the extent of the document that
            the view displays.  For example, the <see cref="P:Northwoods.Go.GoView.ShowsNegativeCoordinates"/>
            property, when false, restricts the view to only showing non-negative
            positions in the document by always returning the (0, 0) point.
            This property also leaves room
            for any shadows, as specified by <see cref="P:Northwoods.Go.GoView.ShadowOffset"/>.
            A different document top-left position is used when printing,
            <c>PrintDocumentTopLeft</c>.
            </remarks>
            <seealso cref="P:Northwoods.Go.GoView.DocumentSize"/>
            <seealso cref="P:Northwoods.Go.GoView.ShowsNegativeCoordinates"/>
            <seealso cref="P:Northwoods.Go.GoDocument.TopLeft"/>
        </member>
        <member name="P:Northwoods.Go.GoView.ShowsNegativeCoordinates">
            <summary>
            Controls whether any parts of the document at negative coordinates can be seen
            or scrolled to by the user.
            </summary>
            <value>
            If this value is true, the user will be able to scroll to negative coordinate
            positions in the document.
            If this value is false, the user cannot see objects located at negative coordinates.
            The default value is true.
            </value>
            <remarks>
            <para>
            When this value is false, it limits the values of the <see cref="P:Northwoods.Go.GoView.DocumentSize"/>
            and <see cref="P:Northwoods.Go.GoView.DocumentTopLeft"/> properties.
            </para>
            <para>
            For <see cref="T:Northwoods.Go.GoPalette"/> the default value is false.
            </para>
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoView.DocPosition">
            <summary>
            Gets or sets the position in the document that this view is displaying.
            </summary>
            <value>
            The <c>PointF</c> value is in document coordinates and corresponds to
            this view's top-left corner's position in the document.
            Initially the value is (0, 0).
            </value>
            <remarks>
            When setting this property, it first adjusts the value by calling
            <see cref="M:Northwoods.Go.GoView.LimitDocPosition(Northwoods.Go.PointF)"/>.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoView.ConvertViewToDoc(System.Drawing.Point)"/>
            <seealso cref="M:Northwoods.Go.GoView.ConvertDocToView(Northwoods.Go.PointF)"/>
            <seealso cref="P:Northwoods.Go.GoView.DocExtentSize"/>
        </member>
        <member name="P:Northwoods.Go.GoView.DocExtentSize">
            <summary>
            Gets the size of this view in its document.
            </summary>
            <value>
            The <c>SizeF</c> value is in document coordinates.
            </value>
            <remarks>
            The value depends on the actual size of the client area and the scale
            at which the document is being shown.
            </remarks>
            <seealso cref="P:Northwoods.Go.GoView.DocPosition"/>
        </member>
        <member name="P:Northwoods.Go.GoView.DocExtent">
            <summary>
            Gets the extent of the view in its document, both position and size.
            </summary>
            <value>
            The <c>RectangleF</c> value is in document coordinates.
            </value>
            <remarks>
            This convenience method returns <c>new RectangleF(this.DocPosition, this.DocExtentSize)</c>.
            </remarks>
            <seealso cref="P:Northwoods.Go.GoView.DocPosition"/>
            <seealso cref="P:Northwoods.Go.GoView.DocExtentSize"/>
        </member>
        <member name="P:Northwoods.Go.GoView.DocScale">
            <summary>
            Gets or sets the scale at which this view displays its document.
            </summary>
            <value>
            <para>
            A value of <c>1.0f</c> specifies that one unit in document coordinates corresponds
            to one pixel in view coordinates.  Values smaller than one make objects appear
            smaller on the screen.  Larger values make it appear that you have zoomed into
            the diagram.
            </para>
            <para>
            The <c>float</c> value must be greater than zero.  The default value is <c>1.0f</c>.
            </para>
            </value>
            <remarks>
            When setting this property, it first limits the value by calling
            <see cref="M:Northwoods.Go.GoView.LimitDocScale(System.Single)"/>.
            A different value is used when printing, <c>PrintScale</c>.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoView.ConvertViewToDoc(System.Drawing.Size)"/>
            <seealso cref="M:Northwoods.Go.GoView.ConvertDocToView(System.Drawing.SizeF)"/>
            <seealso cref="P:Northwoods.Go.GoView.DocExtentSize"/>
        </member>
        <member name="P:Northwoods.Go.GoView.ScrollSmallChange">
            <summary>
            Gets or sets the distance to scroll when scrolling a small amount.
            </summary>
            <value>
            The <c>Size</c> value must have positive <c>Width</c> and <c>Height</c>, indicating the
            amount in view coordinates to scroll horizontally or vertically in either direction.
            </value>
            <remarks>
            Setting this property also modifies the <c>SmallChange</c> properties of the scroll bars,
            if there are any.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoView.ScrollLine(System.Single,System.Single)"/>
        </member>
        <member name="P:Northwoods.Go.GoView.AutoScrollRegion">
            <summary>
            Gets or sets the margin in the view where a mouse drag will automatically cause the view to scroll.
            </summary>
            <value>
            The <c>Size</c> value must have non-negative <c>Width</c> and <c>Height</c>, indicating in view
            coordinates the distance from the edge of the display area.
            Initially the value is 16x16.
            </value>
            <remarks>
            When the mouse drag point is within <c>AutoScrollRegion.Width</c> of the left or right sides,
            the view will automatically scroll horizontally in that direction.  When the point is within
            <c>AutoScrollRegion.Height</c> of the top or bottom, the view will automatically scroll
            vertically in that direction.  You can specify a distance of zero to disable autoscrolling
            in a direction; a value of 0x0 turns off autoscrolling altogether.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoView.DoAutoScroll(System.Drawing.Point)"/>
            <seealso cref="P:Northwoods.Go.GoView.ScrollSmallChange"/>
        </member>
        <member name="P:Northwoods.Go.GoView.AutoScrollTime">
            <summary>
            Gets or sets how quickly to change the <see cref="P:Northwoods.Go.GoView.DocPosition"/>
            when the mouse is in the <see cref="P:Northwoods.Go.GoView.AutoScrollRegion"/>.
            </summary>
            <value>
            The time is in milliseconds.
            The default is 100 (one tenth of a second).
            The value must not be negative.
            </value>
        </member>
        <member name="P:Northwoods.Go.GoView.AutoScrollDelay">
            <summary>
            Gets or sets how long to wait before autoscrolling.
            </summary>
            <value>
            The time is in milliseconds.
            The default is 1000 (one second).
            The value must not be negative.
            </value>
            <remarks>
            This is helpful in avoiding autoscrolling when the user is dragging something
            into the view and doesn't yet intend to autoscroll.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoView.AutoPanRegion">
            <summary>
            Gets or sets the region around the original pan point where automatic panning does not occur.
            </summary>
            <value>
            The value defaults to 16x16; any new values must not be negative.
            </value>
            <remarks>
            This is used by <see cref="M:Northwoods.Go.GoView.ComputeAutoPanDocPosition(System.Drawing.Point,System.Drawing.Point)"/> to decide whether the
            current mouse point is close enough to the original pan point that no scrolling
            should occur.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoView.Layers">
            <summary>
            Gets the collection of layers that this view displays.
            </summary>
            <remarks>
            <para>
            This value is the list of layers that this view displays.  The view will paint
            the layers in order.  Picking objects at a given point searches this same list
            of layers, but in reverse order.
            </para>
            <para>
            A view's collection of layers includes both view layers that it owns and document
            layers that it refers to.
            It is normal for the view to have references to all of the document's layers,
            in the same order as the document's layers, with a view layer on top for
            selection handles and the like.
            However, each layer can have its own set of layers to display.
            The <see cref="M:Northwoods.Go.GoView.InitializeLayersFromDocument"/> method is responsible for setting
            up the <see cref="T:Northwoods.Go.GoLayer"/>s when the view is assigned a document.  It can use
            methods such as <see cref="M:Northwoods.Go.GoLayerCollection.CreateNewLayerAfter(Northwoods.Go.GoLayer)"/> to create
            view layers or <see cref="M:Northwoods.Go.GoLayerCollection.InsertDocumentLayerAfter(Northwoods.Go.GoLayer,Northwoods.Go.GoLayer)"/> to insert
            references to document layers.
            </para>
            </remarks>
            <seealso cref="M:Northwoods.Go.GoView.InitializeLayersFromDocument"/>
            <seealso cref="T:Northwoods.Go.GoLayerCollection"/>
            <seealso cref="T:Northwoods.Go.GoLayer"/>
            <seealso cref="T:Northwoods.Go.GoDocument"/>
        </member>
        <member name="P:Northwoods.Go.GoView.AllowSelect">
            <summary>
            Gets or sets whether the user can select objects in this view.
            </summary>
            <remarks>
            A false value prevents the user from selecting objects in this view
            by the normal mechanisms.
            Even when this property value is true, some objects might not be
            selectable by the user because the document or the object disallows it
            or because the object is not visible.
            Your code can always select objects programmatically by calling
            <c>Selection.Select(obj)</c> or <c>Selection.Add(obj)</c>.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoView.CanSelectObjects"/>
            <seealso cref="P:Northwoods.Go.GoDocument.AllowSelect"/>
        </member>
        <member name="P:Northwoods.Go.GoView.AllowMove">
            <summary>
            Gets or sets whether the user can move objects in this view.
            </summary>
            <remarks>
            A false value prevents the user from moving objects in this view
            by the normal mechanisms.
            Even when this property value is true, some objects might not be
            movable by the user because the document or the object disallows it.
            Your code can always move objects programmatically by calling
            <c>obj.Position = newPos</c>.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoView.CanMoveObjects"/>
            <seealso cref="P:Northwoods.Go.GoDocument.AllowMove"/>
        </member>
        <member name="P:Northwoods.Go.GoView.AllowCopy">
            <summary>
            Gets or sets whether the user can copy objects in this view.
            </summary>
            <remarks>
            A false value prevents the user from copying objects in this view
            by the normal mechanisms.
            Even when this property value is true, some objects might not be
            copyable by the user because the document or the object disallows it.
            Your code can always copy objects programmatically by calling
            <see cref="!:Document.CopyFromCollection"/>.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoView.CanCopyObjects"/>
            <seealso cref="P:Northwoods.Go.GoDocument.AllowCopy"/>
        </member>
        <member name="P:Northwoods.Go.GoView.AllowResize">
            <summary>
            Gets or sets whether the user can resize objects in this view.
            </summary>
            <remarks>
            A false value prevents the user from resizing objects in this view
            by the normal mechanisms.
            Even when this property value is true, some objects might not be
            resizable by the user because the document or the object disallows it.
            Your code can always resize objects programmatically by calling
            <c>obj.Size = newSize</c> or <c>obj.Bounds = newRect</c>.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoView.CanResizeObjects"/>
            <seealso cref="P:Northwoods.Go.GoDocument.AllowResize"/>
        </member>
        <member name="P:Northwoods.Go.GoView.AllowReshape">
            <summary>
            Gets or sets whether the user can reshape objects in this view.
            </summary>
            <remarks>
            A false value prevents the user from reshaping objects in this view
            by the normal mechanisms.
            Even when this property value is true, some objects might not be
            reshapable by the user because the document or the object disallows it.
            Your code can always reshape objects programmatically by calling
            <c>obj.Size = newSize</c> or <c>obj.Bounds = newRect</c>.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoView.CanReshapeObjects"/>
            <seealso cref="P:Northwoods.Go.GoDocument.AllowReshape"/>
        </member>
        <member name="P:Northwoods.Go.GoView.AllowDelete">
            <summary>
            Gets or sets whether the user can delete objects in this view.
            </summary>
            <remarks>
            A false value prevents the user from deleting objects in this view
            by the normal mechanisms.
            Even when this property value is true, some objects might not be
            deletable by the user because the document or the object disallows it.
            Your code can always delete objects programmatically by calling
            <c>obj.Remove()</c>.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoView.CanDeleteObjects"/>
            <seealso cref="P:Northwoods.Go.GoDocument.AllowDelete"/>
        </member>
        <member name="P:Northwoods.Go.GoView.AllowInsert">
            <summary>
            Gets or sets whether the user can insert objects into this view.
            </summary>
            <remarks>
            A false value prevents the user from inserting objects in this view
            by the normal mechanisms.
            Even when this property value is true, some objects might not be
            insertable by the user because the document or the object disallows it.
            Your code can always insert objects programmatically by calling
            <c>Document.Add(obj)</c>.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoView.CanInsertObjects"/>
            <seealso cref="P:Northwoods.Go.GoDocument.AllowInsert"/>
        </member>
        <member name="P:Northwoods.Go.GoView.AllowLink">
            <summary>
            Gets or sets whether the user can link objects together in this view.
            </summary>
            <remarks>
            A false value prevents the user from linking objects in this view
            by the normal mechanisms.
            Even when this property value is true, some objects might not be
            linkable by the user because the document or the object disallows it.
            Your code can always link objects programmatically by calling
            <c>Document.LinksLayers.Add(newLink)</c>, where <c>newLink</c> is
            a newly created instance of a class like <see cref="T:Northwoods.Go.GoLink"/> or
            <see cref="T:Northwoods.Go.GoLabeledLink"/> whose <see cref="P:Northwoods.Go.IGoLink.FromPort"/> and
            <see cref="P:Northwoods.Go.IGoLink.ToPort"/> properties have been set to ports in
            this view's document.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoView.CanLinkObjects"/>
            <seealso cref="P:Northwoods.Go.GoDocument.AllowLink"/>
        </member>
        <member name="P:Northwoods.Go.GoView.AllowEdit">
            <summary>
            Gets or sets whether the user can edit objects in this view.
            </summary>
            <remarks>
            A false value prevents the user from editing objects in this view
            by the normal mechanisms.
            Even when this property value is true, some objects might not be
            editable by the user because the document or the object disallows it.
            Your code can always edit objects programmatically by calling
            <c>obj.DoBeginEdit(aView)</c>.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoView.CanEditObjects"/>
            <seealso cref="P:Northwoods.Go.GoDocument.AllowEdit"/>
        </member>
        <member name="P:Northwoods.Go.GoView.Selection">
            <summary>
            Gets the view's selection object.
            </summary>
            <value>
            The view's <see cref="T:Northwoods.Go.GoSelection"/> collection is created by a call to
            <see cref="M:Northwoods.Go.GoView.CreateSelection"/> during construction.
            </value>
            <seealso cref="M:Northwoods.Go.GoView.SelectAll"/>
            <seealso cref="M:Northwoods.Go.GoView.SelectInRectangle(System.Drawing.RectangleF)"/>
            <seealso cref="M:Northwoods.Go.GoView.CopySelection(Northwoods.Go.GoSelection,System.Drawing.SizeF,System.Boolean)"/>
            <seealso cref="M:Northwoods.Go.GoView.MoveSelection(Northwoods.Go.GoSelection,System.Drawing.SizeF,System.Boolean)"/>
            <seealso cref="M:Northwoods.Go.GoView.DeleteSelection(Northwoods.Go.GoSelection)"/>
            <seealso cref="E:Northwoods.Go.GoView.ObjectGotSelection"/>
            <seealso cref="E:Northwoods.Go.GoView.ObjectLostSelection"/>
        </member>
        <member name="P:Northwoods.Go.GoView.MaximumSelectionCount">
            <summary>
            Gets or sets the maximum number of objects allowed in the selection.
            </summary>
            <value>
            The initial value is 1000000.
            The value must be non-negative.
            </value>
            <remarks>
            This property is checked by <see cref="M:Northwoods.Go.GoSelection.Add(Northwoods.Go.GoObject)"/>.
            If the selection's <see cref="P:Northwoods.Go.GoCollection.Count"/> is greater than or equal to this value,
            <see cref="M:Northwoods.Go.GoSelection.Add(Northwoods.Go.GoObject)"/> will not add any objects to this collection.
            </remarks>
        </member>
        <member name="E:Northwoods.Go.GoView.SelectionMoved">
            <summary>
            The event that is raised after the user has finished moving the selection.
            </summary>
        </member>
        <member name="E:Northwoods.Go.GoView.SelectionCopied">
            <summary>
            The event that is raised after the user has copied the selection.
            </summary>
        </member>
        <member name="E:Northwoods.Go.GoView.SelectionDeleting">
            <summary>
            The event that is raised just before the user has deleted the selected objects.
            </summary>
        </member>
        <member name="E:Northwoods.Go.GoView.SelectionDeleted">
            <summary>
            The event that is raised after the user has deleted the selected objects.
            </summary>
        </member>
        <member name="E:Northwoods.Go.GoView.ObjectGotSelection">
            <summary>
            The event that is raised when an object gets added to this view's selection.
            </summary>
        </member>
        <member name="E:Northwoods.Go.GoView.ObjectLostSelection">
            <summary>
            The event that is raised when an object is removed from this view's selection.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoView.HidesSelection">
            <summary>
            Gets or sets whether the selection disappears when this view loses focus.
            </summary>
            <value>
            If this value is true, all selection handles are removed from this view when
            it loses focus.
            If this value is false, all selection handles are changed to use the
            <see cref="P:Northwoods.Go.GoView.NoFocusSelectionColor"/> when this view loses focus.
            </value>
            <seealso cref="M:Northwoods.Go.GoSelection.OnLostFocus"/>
        </member>
        <member name="P:Northwoods.Go.GoView.PrimarySelectionColor">
            <summary>
            Gets or sets the handle color for the primary selection.
            </summary>
            <value>
            The default value is a bright green color.
            </value>
            <seealso cref="T:Northwoods.Go.GoSelection"/>
        </member>
        <member name="P:Northwoods.Go.GoView.SecondarySelectionColor">
            <summary>
            Gets or sets the handle color for selected objects other than the primary selection.
            </summary>
            <value>
            The default value is a light blue color.
            </value>
            <seealso cref="T:Northwoods.Go.GoSelection"/>
        </member>
        <member name="P:Northwoods.Go.GoView.NoFocusSelectionColor">
            <summary>
            Gets or sets the handle color for selected objects when this view does not have focus.
            </summary>
            <value>
            The default value is a light gray color.
            </value>
            <seealso cref="M:Northwoods.Go.GoSelection.OnLostFocus"/>
        </member>
        <member name="P:Northwoods.Go.GoView.ResizeHandleSize">
            <summary>
            The default size for new resize handles for resizable selected objects.
            </summary>
            <value>
            This <c>SizeF</c> value is in document coordinates.
            The initial value is 6x6.
            </value>
        </member>
        <member name="E:Northwoods.Go.GoView.ObjectResized">
            <summary>
            The event that is raised after the user finishes resizing an object.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoView.SelectsByFirstChar">
            <summary>
            Gets or sets whether the user typing a letter or digit will cause
            the next node whose Text starts with that character to become the
            primary selection.
            </summary>
            <remarks>
            This property is initially true.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoView.ImageList">
            <summary>
            Gets or sets the ImageList that GoImage objects can draw from.
            </summary>
            <value>
            This value defaults to null.
            </value>
        </member>
        <member name="P:Northwoods.Go.GoView.BorderStyle">
            <summary>
            Gets or sets the border style for this view.
            </summary>
            <value>
            The default value is <c>BorderStyle.Fixed3D</c>.
            </value>
            <remarks>
            The border surrounds the view's display area and its scrollbars, if any.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoView.DisplayRectangle">
            <summary>
            Gets the area where the view displays its document.
            </summary>
            <value>
            The <c>Rectangle</c> value specifies an area in control coordinates
            relative to the top left corner of this control.
            </value>
            <remarks>
            The display rectangle is normally smaller than the <c>Control.Size</c>,
            because of the scroll bars and the border along the edges.
            Note the difference with <see cref="P:Northwoods.Go.GoView.DocExtent"/>, which gets an area
            in a document in document coordinates depending on the <see cref="P:Northwoods.Go.GoView.DocPosition"/>
            and <see cref="P:Northwoods.Go.GoView.DocScale"/>.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoView.ConvertViewToDoc(System.Drawing.Rectangle)"/>
        </member>
        <member name="P:Northwoods.Go.GoView.BackgroundImage">
            <summary>
            Gets or sets an Image to be displayed in the background of the view.
            </summary>
        </member>
        <member name="E:Northwoods.Go.GoView.PropertyChanged">
            <summary>
            Rather than having separate events whenever any view property changed,
            all such notifications occur through this single event.
            </summary>
            <seealso cref="M:Northwoods.Go.GoView.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)"/>
            <seealso cref="M:Northwoods.Go.GoView.RaisePropertyChangedEvent(System.String)"/>
        </member>
        <member name="E:Northwoods.Go.GoView.DocumentChanged">
            <summary>
            All <see cref="E:Northwoods.Go.GoDocument.Changed"/> events get re-raised through this event,
            for the convenience of writing event handlers on the document's view.
            </summary>
            <remarks>
            Because the <see cref="T:Northwoods.Go.GoChangedEventArgs"/> that are passed on through
            this event are actually raised by <see cref="M:Northwoods.Go.GoDocument.RaiseChanged(System.Int32,System.Int32,System.Object,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/>
            and distributed by <see cref="M:Northwoods.Go.GoDocument.OnChanged(Northwoods.Go.GoChangedEventArgs)"/>, there is no
            GoView.RaiseDocumentChanged method as would be conventional.
            As with all events, it is more efficient to override
            <see cref="M:Northwoods.Go.GoView.OnDocumentChanged(System.Object,Northwoods.Go.GoChangedEventArgs)"/> or <see cref="M:Northwoods.Go.GoDocument.OnChanged(Northwoods.Go.GoChangedEventArgs)"/>
            than it is to register delegates as event handlers on this event.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoView.AllowKey">
            <summary>
            Gets or sets whether the user can type keystroke commands in this view.
            </summary>
            <remarks>
            A false value prevents the user from entering key commands in this view
            by the normal mechanisms.
            Your code can always handle keystrokes programmatically by adding a
            <c>KeyDown</c> event handler to this control or by overriding
            <see cref="M:Northwoods.Go.GoView.OnKeyDown(System.Windows.Forms.KeyEventArgs)"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoView.AllowMouse">
            <summary>
            Gets or sets whether the user can use the mouse in this view.
            </summary>
            <remarks>
            A false value prevents the user from using the mouse in this view
            by the normal mechanisms.
            Your code can always handle mouse events programmatically by adding
            mouse event handlers to this control or by overriding
            <see cref="M:Northwoods.Go.GoView.OnMouseDown(System.Windows.Forms.MouseEventArgs)"/>, <see cref="M:Northwoods.Go.GoView.OnMouseMove(System.Windows.Forms.MouseEventArgs)"/>,
            or <see cref="M:Northwoods.Go.GoView.OnMouseUp(System.Windows.Forms.MouseEventArgs)"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoView.ContextClickTime">
            <summary>
            Gets or sets how long the pointer must be held down without moving
            to simulate a context click.  [Only in GoDiagram Pocket]
            </summary>
            <value>
            The value is measured in milliseconds.
            The default value is 800 milliseconds, 0.8 seconds.
            The value must not be negative.
            </value>
            <remarks>
            This is only supported in GoDiagram Pocket, where most PocketPC
            applications do not have a mouse button for context click.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoView.FirstInput">
            <summary>
            Gets the canonical event args information for the last mouse down.
            </summary>
            <seealso cref="P:Northwoods.Go.GoView.LastInput"/>
            <seealso cref="T:Northwoods.Go.GoTool"/>
        </member>
        <member name="P:Northwoods.Go.GoView.LastInput">
            <summary>
            Gets the canonical event args information for the last mouse or keyboard input.
            </summary>
            <remarks>
            The last input event args information is used by the tools, the view, and objects
            to decide how to behave.  Typically you will use <see cref="P:Northwoods.Go.GoInputEventArgs.DocPoint"/>
            to see where an event occurred, or <see cref="P:Northwoods.Go.GoInputEventArgs.Control"/> to see
            if the Ctrl key was held down at the time of the event.
            </remarks>
            <seealso cref="P:Northwoods.Go.GoView.FirstInput"/>
            <seealso cref="T:Northwoods.Go.GoTool"/>
        </member>
        <member name="P:Northwoods.Go.GoView.DefaultTool">
            <summary>
            Gets or sets the default tool.
            </summary>
            <value>
            The value must not be null.  Initially this is assigned the value of <see cref="M:Northwoods.Go.GoView.CreateDefaultTool"/>.
            </value>
            <remarks>
            When the <see cref="P:Northwoods.Go.GoView.Tool"/> property is set to null, we actually reset
            <see cref="P:Northwoods.Go.GoView.Tool"/> to be the value of this <see cref="P:Northwoods.Go.GoView.DefaultTool"/> property.
            By default this value is an instance of <see cref="T:Northwoods.Go.GoToolManager"/>, which handles
            standard keyboard commands and invokes the appropriate tool upon mouse down/move/up
            events.
            </remarks>
            <seealso cref="P:Northwoods.Go.GoView.Tool"/>
        </member>
        <member name="P:Northwoods.Go.GoView.Tool">
            <summary>
            Gets or sets the current tool being used by this view.
            </summary>
            <remarks>
            <para>
            As standard input events occur, the event args information is canonicalized
            into an instance of <see cref="T:Northwoods.Go.GoInputEventArgs"/> and then the current Tool's
            appropriate method is called.
            </para>
            <para>
            Setting this property to null results in setting it to the value of
            <see cref="P:Northwoods.Go.GoView.DefaultTool"/>.
            A tool that has finished will probably need to reset this property to
            the <see cref="P:Northwoods.Go.GoView.DefaultTool"/>,
            typically by calling the <see cref="M:Northwoods.Go.GoTool.StopTool"/> method.
            </para>
            <para>
            If the tool is explicitly set as a result of some user-interface command,
            the tool is being used in a "modal" fashion.
            </para>
            <para>
            If the tool is set as a result of the <see cref="T:Northwoods.Go.GoToolManager"/> searching
            through the lists of tools to be started as a result of a mouse down, a mouse
            move, or a mouse up, then the tool is being used in a "mode-less" fashion.
            </para>
            </remarks>
            <seealso cref="T:Northwoods.Go.GoToolManager"/>
            <seealso cref="P:Northwoods.Go.GoView.MouseDownTools"/>
            <seealso cref="P:Northwoods.Go.GoView.MouseMoveTools"/>
            <seealso cref="P:Northwoods.Go.GoView.MouseUpTools"/>
        </member>
        <member name="P:Northwoods.Go.GoView.MouseDownTools">
            <summary>
            Gets a list of "mode-less" tools to be considered for becoming the current Tool upon a mouse down event.
            </summary>
            <value>
            The <c>IList</c> may be modified.
            </value>
            <remarks>
            <para>
            <see cref="T:Northwoods.Go.GoToolManager"/>, an instance of which is normally the <see cref="P:Northwoods.Go.GoView.DefaultTool"/>,
            iterates through this list when a mouse down event occurs.  The first tool that it finds
            whose <see cref="M:Northwoods.Go.IGoTool.CanStart"/> method returns true becomes this view's current
            <see cref="P:Northwoods.Go.GoView.Tool"/>.  If no such tool is found, the <see cref="T:Northwoods.Go.GoToolManager"/> continues
            its normal behavior.
            </para>
            <para>
            By default this returns a list containing instances of the <see cref="T:Northwoods.Go.GoToolAction"/>,
            <see cref="T:Northwoods.Go.GoToolContext"/>, <see cref="T:Northwoods.Go.GoToolPanning"/>,
            <see cref="T:Northwoods.Go.GoToolRelinking"/>, <see cref="T:Northwoods.Go.GoToolResizing"/>,
            and <see cref="T:Northwoods.Go.GoToolLinkingNew"/> tools, in that order.
            The order of the tools matters, because even if several tools can start, only the first one
            actually is started.
            </para>
            </remarks>
            <seealso cref="P:Northwoods.Go.GoView.MouseMoveTools"/>
            <seealso cref="P:Northwoods.Go.GoView.MouseUpTools"/>
        </member>
        <member name="P:Northwoods.Go.GoView.MouseMoveTools">
            <summary>
            Gets a list of "mode-less" tools to be considered for becoming the current Tool upon a mouse move event.
            </summary>
            <value>
            The <c>IList</c> may be modified.
            </value>
            <remarks>
            <para>
            <see cref="T:Northwoods.Go.GoToolManager"/>, an instance of which is normally the <see cref="P:Northwoods.Go.GoView.DefaultTool"/>,
            iterates through this list when a mouse move event occurs.  The first tool that it finds
            whose <see cref="M:Northwoods.Go.IGoTool.CanStart"/> method returns true becomes this view's current
            <see cref="P:Northwoods.Go.GoView.Tool"/>.  If no such tool is found, the <see cref="T:Northwoods.Go.GoToolManager"/> continues
            its normal behavior.
            </para>
            <para>
            By default this returns a list containing instances of the <see cref="T:Northwoods.Go.GoToolDragging"/>
            and <see cref="T:Northwoods.Go.GoToolRubberBanding"/> tools, in that order.
            The order of the tools matters, because even if several tools can start, only the first one
            actually is started.
            </para>
            </remarks>
            <seealso cref="P:Northwoods.Go.GoView.MouseDownTools"/>
            <seealso cref="P:Northwoods.Go.GoView.MouseUpTools"/>
        </member>
        <member name="P:Northwoods.Go.GoView.MouseUpTools">
            <summary>
            Gets a list of "mode-less" tools to be considered for becoming the current Tool upon a mouse up event.
            </summary>
            <value>
            The <c>IList</c> may be modified.
            </value>
            <remarks>
            <para>
            <see cref="T:Northwoods.Go.GoToolManager"/>, an instance of which is normally the <see cref="P:Northwoods.Go.GoView.DefaultTool"/>,
            iterates through this list when a mouse up event occurs.  The first tool that it finds
            whose <see cref="M:Northwoods.Go.IGoTool.CanStart"/> method returns true becomes this view's current
            <see cref="P:Northwoods.Go.GoView.Tool"/>.  If no such tool is found, the <see cref="T:Northwoods.Go.GoToolManager"/> continues
            its normal behavior.
            </para>
            <para>
            By default this returns a list containing only an instance of the
            <see cref="T:Northwoods.Go.GoToolSelecting"/> tool.
            </para>
            </remarks>
            <seealso cref="P:Northwoods.Go.GoView.MouseDownTools"/>
            <seealso cref="P:Northwoods.Go.GoView.MouseMoveTools"/>
        </member>
        <member name="P:Northwoods.Go.GoView.DragsRealtime">
            <summary>
            Gets or sets whether a user's drag of the selection occurs continuously.
            </summary>
            <value>
            If this value is true, the objects in the selection are actually moved
            continuously, following the mouse.
            If this value is false, the user actually drags around an image of
            the selection, and the move only happens on mouse up.
            The default value is false.
            </value>
            <remarks>
            One advantage of a false value for this property is that only one undo record
            per moved object is generated for a user's moving operation--namely the
            final one on mouse up.
            Another advantage, when this property is false, is that a user's drag of
            some objects to another window will not actually modify the source document
            due to objects moved before the pointer leaves the view.
            This property is used by <see cref="T:Northwoods.Go.GoToolDragging"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoView.NewLinkClass">
            <summary>
            Gets or sets the Type of the link to be created when linking.
            </summary>
            <value>
            The <c>Type</c> must implement the <see cref="T:Northwoods.Go.IGoLink"/> interface
            with a no-argument constructor.
            The value must not be null, either.
            </value>
            <remarks>
            The <see cref="M:Northwoods.Go.GoView.CreateLink(Northwoods.Go.IGoPort,Northwoods.Go.IGoPort)"/> method uses this property to determine
            which class to instantiate.  
            </remarks>
        </member>
        <member name="E:Northwoods.Go.GoView.LinkCreated">
            <summary>
            The event that is raised after the user draws a new link.
            </summary>
        </member>
        <member name="E:Northwoods.Go.GoView.LinkRelinked">
            <summary>
            The event that is raised after the user reconnects an existing link.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoView.PortGravity">
            <summary>
            Gets or sets the distance at which potential links will snap to valid ports.
            </summary>
            <value>
            The <c>float</c> value must be positive, indicating the document coordinate
            distance from the mouse to the prospective port.
            The default value is <c>100.0f</c>.
            </value>
            <remarks>
            The <see cref="T:Northwoods.Go.GoToolLinking"/> tool uses this property to decide when the
            user's drag of a new link or relink is "close enough" to a valid port that the
            tool should draw the proposed link directly to that port.
            </remarks>
        </member>
        <member name="E:Northwoods.Go.GoView.ObjectSingleClicked">
            <summary>
            A document object was single clicked by the user.
            </summary>
            <remarks>
            This event is raised for the first document object found at the
            <see cref="P:Northwoods.Go.GoInputEventArgs.DocPoint"/>.  Unlike <see cref="M:Northwoods.Go.GoObject.OnSingleClick(Northwoods.Go.GoInputEventArgs,Northwoods.Go.GoView)"/>,
            which proceeds up the <see cref="P:Northwoods.Go.GoObject.Parent"/> chain until a call
            returns true, this event occurs only once.  Thus you will often need
            to look at the <see cref="P:Northwoods.Go.GoObject.ParentNode"/> or <see cref="P:Northwoods.Go.GoObject.TopLevelObject"/>
            in order to find the most meaningful object to really handle the click.
            <code>
                MyView.ObjectSingleClicked += new GoObjectEventHandler(MyView_ObjectSingleClicked);
              ...
              private void MyView_ObjectSingleClicked(Object sender, GoObjectEventArgs evt) {
                GoBasicNode bn = evt.GoObject.ParentNode as GoBasicNode;
                if (bn != null) {
                  MessageBox.Show("Clicked on " + bn.Text);
                }
              }
            </code>
            </remarks>
        </member>
        <member name="E:Northwoods.Go.GoView.ObjectDoubleClicked">
            <summary>
            A document object was double clicked by the user.
            </summary>
            <remarks>
            This event is raised for the first document object found at the
            <see cref="P:Northwoods.Go.GoInputEventArgs.DocPoint"/>.  Unlike <see cref="M:Northwoods.Go.GoObject.OnDoubleClick(Northwoods.Go.GoInputEventArgs,Northwoods.Go.GoView)"/>,
            which proceeds up the <see cref="P:Northwoods.Go.GoObject.Parent"/> chain until a call
            returns true, this event occurs only once.  Thus you will often need
            to look at the <see cref="P:Northwoods.Go.GoObject.ParentNode"/> or <see cref="P:Northwoods.Go.GoObject.TopLevelObject"/>
            in order to find the most meaningful object to really handle the click.
            <code>
                MyView.ObjectDoubleClicked += new GoObjectEventHandler(MyView_ObjectDoubleClicked);
              ...
              private void MyView_ObjectDoubleClicked(Object sender, GoObjectEventArgs evt) {
                GoBasicNode bn = evt.GoObject.ParentNode as GoBasicNode;
                if (bn != null) {
                  MessageBox.Show("Double-clicked on " + bn.Text);
                }
              }
            </code>
            </remarks>
        </member>
        <member name="E:Northwoods.Go.GoView.ObjectContextClicked">
            <summary>
            A document object was context clicked by the user.
            </summary>
            <remarks>
            This event is raised for the first document object found at the
            <see cref="P:Northwoods.Go.GoInputEventArgs.DocPoint"/>.  Unlike <see cref="M:Northwoods.Go.GoObject.OnContextClick(Northwoods.Go.GoInputEventArgs,Northwoods.Go.GoView)"/>,
            which proceeds up the <see cref="P:Northwoods.Go.GoObject.Parent"/> chain until a call
            returns true, this event occurs only once.  Thus you will often need
            to look at the <see cref="P:Northwoods.Go.GoObject.ParentNode"/> or <see cref="P:Northwoods.Go.GoObject.TopLevelObject"/>
            in order to find the most meaningful object to really handle the click.
            <code>
                MyView.ObjectContextClicked += new GoObjectEventHandler(MyView_ObjectContextClicked);
              ...
              private void MyView_ObjectContextClicked(Object sender, GoObjectEventArgs evt) {
                GoBasicNode bn = evt.GoObject.ParentNode as GoBasicNode;
                if (bn != null) {
                  GoContextMenu cm = new GoContextMenu(sender as GoView);
                  cm.MenuItems.Add(new MenuItem("Explore", new EventHandler(this.Explore_Command)));
                  ...
                  cm.Show(sender as GoView, evt.ViewPoint);
                }
              }
            </code>
            </remarks>
        </member>
        <member name="E:Northwoods.Go.GoView.BackgroundSingleClicked">
            <summary>
            The user performed a single click on the background, not over any document object.
            </summary>
        </member>
        <member name="E:Northwoods.Go.GoView.BackgroundDoubleClicked">
            <summary>
            The user performed a double click on the background, not over any document object.
            </summary>
        </member>
        <member name="E:Northwoods.Go.GoView.BackgroundContextClicked">
            <summary>
            The user performed a context click in the background, not over any document object.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoView.ToolTip">
            <summary>
            Gets or sets the ToolTip component for this view.
            </summary>
            <value>
            By default each view has a <c>ToolTip</c> component allocated.
            If the value is null, all tooltips are disabled for this view.
            </value>
            <remarks>
            Setting this property to null to turn off all tooltip related activity
            will reduce the overhead involved when moving the mouse over the view.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoView.DoToolTipObject(Northwoods.Go.GoObject)"/>
            <seealso cref="!:DoMouseOver"/>
        </member>
        <member name="E:Northwoods.Go.GoView.ClipboardPasted">
            <summary>
            The event that is raised after the user has pasted a copy of the clipboard
            into this document.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoView.AllowDrop">
            <summary>
            This property exists for compatibility with the full Windows Forms
            implementation, but it is always false and cannot be changed.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoView.AllowDragOut">
            <summary>
            This property exists for compatibility with the full Windows Forms
            implementation, but it is always false and cannot be changed.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoView.IsPrinting">
            <summary>
            Gets whether any painting that is ongoing is part of a printing operation.
            </summary>
            <value>
            This is always false.
            </value>
        </member>
        <member name="P:Northwoods.Go.GoView.GridStyle">
            <summary>
            Gets or sets the style of the grid.
            </summary>
            <value>
            This <see cref="T:Northwoods.Go.GoViewGridStyle"/> value defaults to <see cref="F:Northwoods.Go.GoViewGridStyle.None"/>.
            </value>
            <seealso cref="P:Northwoods.Go.GoView.GridOrigin"/>
            <seealso cref="P:Northwoods.Go.GoView.GridCellSize"/>
            <seealso cref="P:Northwoods.Go.GoView.GridColor"/>
        </member>
        <member name="P:Northwoods.Go.GoView.GridOrigin">
            <summary>
            Gets or sets the origin for the grid.
            </summary>
            <value>
            This <c>PointF</c> value is a document coordinate point.
            The default value is (0, 0).
            </value>
            <seealso cref="P:Northwoods.Go.GoView.GridStyle"/>
        </member>
        <member name="P:Northwoods.Go.GoView.GridCellSize">
            <summary>
            Gets or sets the size of each cell in the grid.
            </summary>
            <value>
            This <c>SizeF</c> value describes the size of each cell in document coordinates.
            The <c>Width</c> and <c>Height</c> must be positive.
            </value>
            <seealso cref="P:Northwoods.Go.GoView.GridStyle"/>
        </member>
        <member name="P:Northwoods.Go.GoView.GridColor">
            <summary>
            Gets or sets the color used in drawing grid markings.
            </summary>
            <value>
            The color defaults to a light gray.
            </value>
            <remarks>
            You may prefer a darker color for a Dot grid style,
            or a lighter color for a Line grid style.
            </remarks>
            <seealso cref="P:Northwoods.Go.GoView.GridStyle"/>
        </member>
        <member name="P:Northwoods.Go.GoView.GridSnapDrag">
            <summary>
            Gets or sets the interactive dragging behavior for positioning objects.
            </summary>
            <value>
            The default value is <see cref="F:Northwoods.Go.GoViewSnapStyle.None"/>, so moving and copying
            objects is very smooth, to any point.
            </value>
            <seealso cref="P:Northwoods.Go.GoView.GridStyle"/>
            <seealso cref="P:Northwoods.Go.GoView.GridSnapResize"/>
        </member>
        <member name="P:Northwoods.Go.GoView.GridSnapResize">
            <summary>
            Gets or sets the interactive resizing behavior for resizing objects.
            </summary>
            <value>
            The default value is <see cref="F:Northwoods.Go.GoViewSnapStyle.None"/>, so resizing
            objects is very smooth, to any size.
            </value>
            <seealso cref="P:Northwoods.Go.GoView.GridStyle"/>
            <seealso cref="P:Northwoods.Go.GoView.GridSnapDrag"/>
        </member>
        <member name="P:Northwoods.Go.GoView.EditControl">
            <summary>
            Gets or sets the graphical object representing a <c>Control</c> used to edit an object
            in this view in a modal fashion.
            </summary>
            <remarks>
            The <see cref="T:Northwoods.Go.GoControl"/> object is added to the default view layer.  The
            assumption is that the editor that the <see cref="T:Northwoods.Go.GoControl"/> represents is
            used in a modal fashion--the corresponding <c>Control</c> is added to the view
            and gets focus.  When the <see cref="T:Northwoods.Go.GoControl"/> is removed from the view's layer,
            the corresponding <c>Control</c> loses focus and is removed from the view.
            </remarks>
            <seealso cref="P:Northwoods.Go.GoView.IsEditing"/>
            <seealso cref="M:Northwoods.Go.GoView.DoEndEdit"/>
        </member>
        <member name="P:Northwoods.Go.GoView.IsEditing">
            <summary>
            Gets whether the user is currently editing an object.
            </summary>
            <value>
            This is true when <see cref="P:Northwoods.Go.GoView.EditControl"/> is non-null.
            </value>
            <seealso cref="M:Northwoods.Go.GoView.DoEndEdit"/>
        </member>
        <member name="E:Northwoods.Go.GoView.ObjectEdited">
            <summary>
            The event that is raised after the user finishes editing an object.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoView.ShadowOffset">
            <summary>
            Gets or sets the offset distance for drop shadows.
            </summary>
            <value>
            This <c>SizeF</c> value specifies the offset, where positive values move
            the shadow to the right and to the bottom.
            The default value is (5, 5).
            </value>
            <remarks>
            The shadow only appears for those objects that have the <see cref="P:Northwoods.Go.GoObject.Shadowed"/>
            property set to true.
            </remarks>
            <seealso cref="P:Northwoods.Go.GoView.ShadowColor"/>
        </member>
        <member name="P:Northwoods.Go.GoView.ShadowColor">
            <summary>
            Gets or sets the color used for drawing drop shadows.
            </summary>
            <value>
            The default color is a partly transparent gray, so that users can see the objects
            underneath the shadow.
            </value>
            <remarks>
            The shadow only appears for those objects that have the <see cref="P:Northwoods.Go.GoObject.Shadowed"/>
            property set to true.
            </remarks>
            <seealso cref="P:Northwoods.Go.GoView.ShadowOffset"/>
        </member>
        <member name="P:Northwoods.Go.GoView.PaintNothingScale">
            <summary>
            Gets or sets the scale at which greeked objects paint nothing.
            </summary>
            <value>
            This value defaults to <c>0.15f</c>, and should be less than or equal to
            <see cref="P:Northwoods.Go.GoView.PaintGreekScale"/>.
            </value>
            <remarks>
            Not all objects use greeking to simplify and speed up painting at small scales,
            but those that do use this property to govern when to make that decision.
            </remarks>
            <seealso cref="P:Northwoods.Go.GoView.PaintGreekScale"/>
        </member>
        <member name="P:Northwoods.Go.GoView.PaintGreekScale">
            <summary>
            Gets or sets the scale at which greeked objects paint something simple.
            </summary>
            <value>
            This value defaults to <c>0.30f</c> and should be greater than or equal to
            <see cref="P:Northwoods.Go.GoView.PaintNothingScale"/>.
            </value>
            <remarks>
            Not all objects use greeking to simplify and speed up painting at small scales,
            but those that do use this property to govern when to make that decision.
            </remarks>
            <seealso cref="P:Northwoods.Go.GoView.PaintNothingScale"/>
        </member>
        <member name="M:Northwoods.Go.GoOverview.#ctor">
            <summary>
            Create a <see cref="T:Northwoods.Go.GoOverview"/> window capable of displaying the position
            of a different <see cref="T:Northwoods.Go.GoView"/> in its <see cref="T:Northwoods.Go.GoDocument"/>.
            </summary>
            <remarks>
            You need to set the <see cref="P:Northwoods.Go.GoOverview.Observed"/> property to make this
            overview <c>Control</c> useful.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoOverview.Dispose(System.Boolean)">
            <summary>
            Remove any event handlers from the <see cref="P:Northwoods.Go.GoOverview.Observed"/> view and document.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Northwoods.Go.GoOverview.InitializeLayersFromDocument">
            <summary>
            Initialize the layers of this view.
            </summary>
            <remarks>
            This method makes sure this overview's layers are the same as that of its document.
            It also adds the result of <see cref="M:Northwoods.Go.GoOverview.CreateOverviewRectangle(Northwoods.Go.GoView)"/> to this
            view's default layer.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoOverview.CreateOverviewRectangle(Northwoods.Go.GoView)">
            <summary>
            Create an instance of <see cref="T:Northwoods.Go.GoOverviewRectangle"/> for the
            given view.
            </summary>
            <param name="observed"></param>
            <returns>An <see cref="T:Northwoods.Go.GoOverviewRectangle"/> that knows which view's extent it represents</returns>
        </member>
        <member name="M:Northwoods.Go.GoOverview.PickObject(System.Boolean,System.Boolean,Northwoods.Go.PointF,System.Boolean)">
            <summary>
            Don't allow the user to select any objects except the OverviewRect,
            even though that rectangle is a view object, not a document object.
            </summary>
            <param name="doc"></param>
            <param name="view"></param>
            <param name="p"></param>
            <param name="selectableOnly"></param>
            <returns></returns>
            <remarks>
            The <see cref="P:Northwoods.Go.GoOverview.OverviewRect"/> gets picked when the point <paramref name="p"/>
            is in the rectangle's bounds, even though the the <see cref="P:Northwoods.Go.GoOverview.OverviewRect"/>
            is not selectable and is not even a document object.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoOverview.OnBackgroundSingleClicked(Northwoods.Go.GoInputEventArgs)">
            <summary>
            Allow mouse clicks not on the OverviewRect, but elsewhere in the
            Overview, to cause the OverviewRect to be centered there, or as
            near as allowed.
            </summary>
            <param name="evt"></param>
        </member>
        <member name="M:Northwoods.Go.GoOverview.ViewChanged(System.Object,System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            Handle basic changes to the observed view's DocPosition or DocScale,
            or when the observed view's Document got swapped for a different document.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Northwoods.Go.GoOverview.ComponentResized(System.Object,System.EventArgs)">
            <summary>
            Handle changes in the observed view's (window) shape by changing the bounds
            of the OverviewRect.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="P:Northwoods.Go.GoOverview.Observed">
            <summary>
            Gets or sets the view that this overview is watching.
            </summary>
            <value>
            This property should not be set to itself or another GoOverview.
            </value>
            <remarks>
            This overview is useless until it has a <see cref="T:Northwoods.Go.GoView"/> to observe.
            When this property is set, this overview becomes a document <c>Changed</c>
            event handler for the observed view's document so that it can display
            that document.
            It also becomes a <c>PropertyChanged</c> event handler and a <c>Resize</c>
            event handler for the observed view so that it can track the observed
            view's extent (position and size) in its document, as well as any
            replacement of the observed view's document.
            </remarks>
            <seealso cref="T:Northwoods.Go.GoOverviewRectangle"/>
        </member>
        <member name="P:Northwoods.Go.GoOverview.OverviewRect">
            <summary>
            Gets the <see cref="T:Northwoods.Go.GoOverviewRectangle"/> representing the observed
            view's extent in its document.
            </summary>
            <remarks>
            This is the rectangle in this view that the user drags to
            change the <see cref="P:Northwoods.Go.GoView.DocPosition"/> of the observed view.
            </remarks>
            <seealso cref="P:Northwoods.Go.GoOverview.Observed"/>
            <seealso cref="M:Northwoods.Go.GoOverview.CreateOverviewRectangle(Northwoods.Go.GoView)"/>
        </member>
        <member name="P:Northwoods.Go.GoOverview.Document">
            <summary>
            Make this view think the observed view's document is actually its own.
            </summary>
            <remarks>
            Setting this property is not useful except for changing the document
            that is shown when there is no <see cref="P:Northwoods.Go.GoOverview.Observed"/> view.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoOverview.ShowsNegativeCoordinates">
            <summary>
            This should just track what the observed view shows.
            </summary>
        </member>
        <member name="T:Northwoods.Go.GoOverviewRectangle">
            <summary>
            This class implements the rectangle shown and dragged around in the overview window.
            It is also responsible for keeping track of changes to the view.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoOverviewRectangle.#ctor">
            <summary>
            Create a <see cref="T:Northwoods.Go.GoRectangle"/> that knows about the view that it represents.
            </summary>
            <remarks>
            The overview rectangle is not selectable.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoOverviewRectangle.UpdateRectFromView">
            <summary>
            Make this GoRectangle's position and size correspond to the
            observed view's position and size in the document
            </summary>
            <remarks>
            This method also scrolls this overview window, if needed,
            to make the rectangle visible.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoOverviewRectangle.ContainsPoint(Northwoods.Go.PointF)">
            <summary>
            Treat this rectangle as being hollow--the user can only pick the rectangle when close to the edge.
            </summary>
            <param name="p"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.GoOverviewRectangle.ComputeMove(Northwoods.Go.PointF,Northwoods.Go.PointF)">
            <summary>
            Limit where this rectangle can be dragged, to avoid misleading the user
            into believing they could scroll even futher.
            </summary>
            <param name="origLoc"></param>
            <param name="newLoc"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.GoOverviewRectangle.OnBoundsChanged(System.Drawing.RectangleF)">
            <summary>
            As the user drags this rectangle around, change the observed view's
            DocPosition property.
            </summary>
            <param name="old"></param>
            <remarks>
            This basically just does <c>ObservedView.DocPosition = Position</c>,
            although it ignores changes caused by a change in the observed view.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoOverviewRectangle.OnGotSelection(Northwoods.Go.GoSelection)">
            <summary>
            The overview rectangle should not get selected.
            </summary>
            <param name="sel"></param>
        </member>
        <member name="M:Northwoods.Go.GoOverviewRectangle.AddSelectionHandles(Northwoods.Go.GoSelection,Northwoods.Go.GoObject)">
            <summary>
            The overview rectangle should not get selected.
            </summary>
            <param name="sel"></param>
            <param name="selectedObj"></param>
        </member>
        <member name="P:Northwoods.Go.GoOverviewRectangle.ObservedView">
            <summary>
            Gets the view whose bounds this rectangle is representing in the overview.
            </summary>
        </member>
        <member name="T:Northwoods.Go.SortOrder">
            <summary>
            Specifies how items in a list are sorted.
            </summary>
        </member>
        <member name="F:Northwoods.Go.SortOrder.Ascending">
            <summary>
            The items are sorted in ascending order.
            </summary>
        </member>
        <member name="F:Northwoods.Go.SortOrder.Descending">
            <summary>
            The items are sorted in descending order.
            </summary>
        </member>
        <member name="F:Northwoods.Go.SortOrder.None">
            <summary>
            The items are not sorted.
            </summary>
        </member>
        <member name="T:Northwoods.Go.GoPalette">
            <summary>
            A palette is a view holding a number of objects in a grid that the user
            can drag into another document.
            </summary>
            <remarks>
            You can control whether the objects are sorted, and in what order they
            are sorted, by setting the <see cref="P:Northwoods.Go.GoPalette.Sorting"/> property.
            You can control the way the objects are laid out in a grid, with the
            scrollbar (if needed) either vertical or horizontal, by setting the
            <see cref="P:Northwoods.Go.GoPalette.Orientation"/> property.
            Because <see cref="M:Northwoods.Go.GoPalette.LayoutItems"/> is designed to take this view's
            scale and size into accout, this class is not designed to share its
            document with other views.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoPalette.#ctor">
            <summary>
            Create a <see cref="T:Northwoods.Go.GoPalette"/> window that can show a collection of
            <see cref="T:Northwoods.Go.GoObject"/> items arranged in a grid that the user can drag from.
            </summary>
            <remarks>
            This kind of view allows no modifications by users, but does allow copying
            objects by dragging objects out of the view or through clipboard copy.
            The grid cell size defaults to 60 by 60, with an initial origin of 20,5.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoPalette.LayoutItems">
            <summary>
            Position all of this document's objects in a grid, according to the
            orientation and sort order.
            </summary>
            <remarks>
            If the <see cref="P:Northwoods.Go.GoPalette.Orientation"/> is <c>Orientation.Vertical</c>, for
            example, this method will position all of the objects in the document
            in the grid, specified by <see cref="P:Northwoods.Go.GoView.GridCellSize"/> and
            <see cref="P:Northwoods.Go.GoView.GridOrigin"/>, starting at the top left corner,
            and proceeding to fill each row before adding rows.
            The order in which document objects are taken as palette items is
            determined by the <see cref="P:Northwoods.Go.GoPalette.Sorting"/> and the <see cref="P:Northwoods.Go.GoPalette.Comparer"/>
            comparison method.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoPalette.OnDocumentChanged(System.Object,Northwoods.Go.GoChangedEventArgs)">
            <summary>
            When an object is inserted or removed from the document, call <see cref="M:Northwoods.Go.GoPalette.LayoutItems"/>.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
        </member>
        <member name="M:Northwoods.Go.GoPalette.OnPropertyChanged(System.ComponentModel.PropertyChangedEventArgs)">
            <summary>
            When the <see cref="P:Northwoods.Go.GoView.DocScale"/> property changes, call <see cref="M:Northwoods.Go.GoPalette.LayoutItems"/>.
            </summary>
            <param name="evt"></param>
        </member>
        <member name="M:Northwoods.Go.GoPalette.OnResize(System.EventArgs)">
            <summary>
            When the view is resized, call <see cref="M:Northwoods.Go.GoPalette.LayoutItems"/>.
            </summary>
            <param name="evt"></param>
        </member>
        <member name="P:Northwoods.Go.GoPalette.Orientation">
            <summary>
            Gets or sets how to fill the palette by positioning its items.
            </summary>
            <value>
            The default value is <c>Orientation.Vertical</c>.
            </value>
            <remarks>
            This property determines whether the automatic layout of the items in
            the palette fills and adds rows (<c>Orientation.Vertical</c>) or fills
            and adds columns (<c>Orientation.Horizontal</c>).
            A vertical orientation means that there is no horizontal scroll bar,
            and that the vertical scroll bar shows itself when it is needed because
            the rows do not all fit in the display area.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoPalette.AlignsSelectionObject">
            <summary>
            Gets or sets whether to align each item's <see cref="P:Northwoods.Go.GoObject.SelectionObject"/>
            instead of the whole item.
            </summary>
            <value>
            The default value is true.
            </value>
            <remarks>
            A true value causes node icons to be aligned instead of the top-left
            corners of the objects.  The node labels, then, are unlikely to be aligned.
            To reduce overlap <see cref="M:Northwoods.Go.GoPalette.LayoutItems"/> may skip cells in order to place
            an item.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoPalette.GridOrigin">
            <summary>
            When the <see cref="P:Northwoods.Go.GoView.GridOrigin"/> is changed, this calls <see cref="M:Northwoods.Go.GoPalette.LayoutItems"/>.
            </summary>
            <remarks>
            This controls the amount of "margin" space at the top and left of the view.
            However, if <see cref="P:Northwoods.Go.GoPalette.AlignsSelectionObject"/> is true and the selection objects tend
            to be smaller than the items, this margin should be larger to accomodate those
            wider item parts.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoPalette.GridCellSize">
            <summary>
            When the <see cref="P:Northwoods.Go.GoView.GridCellSize"/> is changed, this calls <see cref="M:Northwoods.Go.GoPalette.LayoutItems"/>.
            </summary>
            <remarks>
            Use a small cell size to pack the items closer together.
            However, unless all of the items are the same size, the columns or rows are less
            likely to line up straight.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoPalette.Sorting">
            <summary>
            Gets or sets whether and how LayoutItems sorts before it positions all of the items.
            </summary>
            <value>
            If the value is not <c>SortOrder.None</c>, <see cref="P:Northwoods.Go.GoPalette.Comparer"/> is used to
            determine the sort order.  Otherwise, <see cref="M:Northwoods.Go.GoPalette.LayoutItems"/> places the
            palette items in a grid in an order of its own choosing.
            </value>
        </member>
        <member name="P:Northwoods.Go.GoPalette.Comparer">
            <summary>
            Gets or sets the way the palette items are compared during sorting.
            </summary>
            <value>
            This defaults to a comparer that compares the <see cref="P:Northwoods.Go.IGoLabeledNode.Text"/> strings.
            If the object is not a <see cref="T:Northwoods.Go.IGoLabeledNode"/>, the default comparer
            compares as if it were null.
            Attempting to set this property to null will restore the default comparer.
            </value>
        </member>
        <member name="P:Northwoods.Go.GoPalette.AutomaticLayout">
            <summary>
            Gets or sets whether <see cref="M:Northwoods.Go.GoPalette.LayoutItems"/> actually positions all the items.
            </summary>
            <value>
            This defaults to true.
            </value>
        </member>
        <member name="T:Northwoods.Go.GoSelection">
            <summary>
            The selection is a collection of <see cref="T:Northwoods.Go.GoObject"/>s that the user
            can manipulate in a <see cref="T:Northwoods.Go.GoView"/>.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoSelection.#ctor(Northwoods.Go.GoView)">
            <summary>
            Create an empty collection of objects representing the user's selection for a view.
            </summary>
            <param name="view"></param>
        </member>
        <member name="M:Northwoods.Go.GoSelection.Add(Northwoods.Go.GoObject)">
            <summary>
            Add an object to this selection.
            </summary>
            <param name="obj"></param>
            <remarks>
            If the <paramref name="obj"/> is already part of this selection,
            nothing happens.
            Otherwise this method calls <see cref="M:Northwoods.Go.GoObject.OnGotSelection(Northwoods.Go.GoSelection)"/>
            and raises the <see cref="E:Northwoods.Go.GoView.ObjectGotSelection"/> event by
            calling <see cref="M:Northwoods.Go.GoView.RaiseObjectGotSelection(Northwoods.Go.GoObject)"/>.
            No notifications occur if there is no <see cref="P:Northwoods.Go.GoSelection.View"/> for this selection.
            If adding an object would increase the <see cref="P:Northwoods.Go.GoCollection.Count"/> beyond
            the <see cref="P:Northwoods.Go.GoView.MaximumSelectionCount"/>, this collection is not augmented.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoSelection.Remove(Northwoods.Go.GoObject)">
            <summary>
            Remove an object from this selection.
            </summary>
            <param name="obj"></param>
            <remarks>
            If the <paramref name="obj"/> is not part of this selection,
            nothing happens.
            Otherwise this method calls <see cref="M:Northwoods.Go.GoObject.OnLostSelection(Northwoods.Go.GoSelection)"/>
            and raises the <see cref="E:Northwoods.Go.GoView.ObjectLostSelection"/> event by
            calling <see cref="M:Northwoods.Go.GoView.RaiseObjectLostSelection(Northwoods.Go.GoObject)"/>.
            The notification happens after the object has been removed from
            this selection.
            Removing the primary selection may cause another object to lose
            selection and then gain it back again as the primary selection.
            No notifications occur if there is no <see cref="P:Northwoods.Go.GoSelection.View"/> for this selection.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoSelection.Contains(Northwoods.Go.GoObject)">
            <summary>
            Determine if an object is part of this selection.
            </summary>
            <param name="obj"></param>
            <returns></returns>
            <remarks>
            The default implementation uses a hashtable to decide quickly.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoSelection.Select(Northwoods.Go.GoObject)">
            <summary>
            Make the given object the one and only selected object.
            </summary>
            <param name="obj"></param>
            <returns><paramref name="obj"/></returns>
        </member>
        <member name="M:Northwoods.Go.GoSelection.Toggle(Northwoods.Go.GoObject)">
            <summary>
            If the given object is part of this selection, remove it; otherwise add it.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:Northwoods.Go.GoSelection.CreateBoundingHandle(Northwoods.Go.GoObject,Northwoods.Go.GoObject)">
            <summary>
            Create and determine the appearance of a large handle around an object.
            </summary>
            <param name="obj"></param>
            <param name="selectedObj"></param>
            <returns></returns>
            <remarks>
            This method uses <see cref="M:Northwoods.Go.GoObject.CreateBoundingHandle"/> to
            actually allocate the handle and to set the size and location of the
            handle, as determined by the bounding rectangle of <paramref name="obj"/>.
            The pen of the handle is determined by
            <see cref="P:Northwoods.Go.GoView.PrimarySelectionColor"/> and
            <see cref="P:Northwoods.Go.GoView.SecondarySelectionColor"/>; the brush is set to null.
            The new handle is associated with the <paramref name="obj"/> and its
            <see cref="P:Northwoods.Go.IGoHandle.SelectedObject"/> property is set to
            <paramref name="selectedObj"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoSelection.CreateResizeHandle(Northwoods.Go.GoObject,Northwoods.Go.GoObject,Northwoods.Go.PointF,System.Int32,System.Boolean)">
            <summary>
            Create and determine the appearance of a small handle for an object.
            </summary>
            <param name="obj"></param>
            <param name="selectedObj"></param>
            <param name="loc"></param>
            <param name="handleid"></param>
            <param name="filled"></param>
            <returns></returns>
            <remarks>
            This method uses <see cref="M:Northwoods.Go.GoObject.CreateResizeHandle(System.Int32)"/> to
            actually allocate the handle.
            The size of the handle, if not already non-zero, is determined by
            <see cref="P:Northwoods.Go.GoView.ResizeHandleSize"/>.
            The pen and brush of the handle are determined by
            <see cref="P:Northwoods.Go.GoView.PrimarySelectionColor"/> and <see cref="P:Northwoods.Go.GoView.SecondarySelectionColor"/>.
            The new handle is associated with the <paramref name="obj"/> and its
            <see cref="P:Northwoods.Go.IGoHandle.SelectedObject"/> property is set to <paramref name="selectedObj"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoSelection.AddHandle(Northwoods.Go.GoObject,Northwoods.Go.IGoHandle)">
            <summary>
            Associate a handle with an object in this selection.
            </summary>
            <param name="obj"></param>
            <param name="handle"></param>
            <remarks>
            This method also adds the <paramref name="handle"/>'s
            <see cref="P:Northwoods.Go.IGoHandle.GoObject"/> to the view's default layer.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoSelection.RemoveHandles(Northwoods.Go.GoObject)">
            <summary>
            Remove all handles associated with an object in this selection.
            </summary>
            <param name="obj"></param>
            <remarks>
            Each handle for the <paramref name="obj"/> 
            has its <see cref="P:Northwoods.Go.IGoHandle.SelectedObject"/> property
            set to null and its <see cref="P:Northwoods.Go.IGoHandle.GoObject"/>
            removed from its view layer.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoSelection.GetHandleCount(Northwoods.Go.GoObject)">
            <summary>
            Return the number of handles associated with an object in this selection.
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.GoSelection.GetAnExistingHandle(Northwoods.Go.GoObject)">
            <summary>
            Return one of the handles associated with an object in this selection.
            </summary>
            <param name="obj"></param>
            <returns>
            An <see cref="T:Northwoods.Go.IGoHandle"/>, or null if there are none for <paramref name="obj"/>.
            </returns>
        </member>
        <member name="M:Northwoods.Go.GoSelection.RemoveAllSelectionHandles">
            <summary>
            Call <see cref="M:Northwoods.Go.GoObject.RemoveSelectionHandles(Northwoods.Go.GoSelection)"/> on the
            <see cref="P:Northwoods.Go.GoObject.SelectionObject"/> of each selected object.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoSelection.AddAllSelectionHandles">
            <summary>
            Call <see cref="M:Northwoods.Go.GoObject.AddSelectionHandles(Northwoods.Go.GoSelection,Northwoods.Go.GoObject)"/> on the
            <see cref="P:Northwoods.Go.GoObject.SelectionObject"/> of each selected object
            if <see cref="M:Northwoods.Go.GoObject.CanView"/> is true, or call
            <see cref="M:Northwoods.Go.GoObject.RemoveSelectionHandles(Northwoods.Go.GoSelection)"/> otherwise.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoSelection.OnGotFocus">
            <summary>
            This method is called by <see cref="M:Northwoods.Go.GoView.OnGotFocus(System.EventArgs)"/> to make
            sure all selection handles appear normally.
            </summary>
            <remarks>
            This implementation currently just calls <see cref="M:Northwoods.Go.GoSelection.AddAllSelectionHandles"/>
            if <see cref="P:Northwoods.Go.GoView.HidesSelection"/> is true or if
            <see cref="P:Northwoods.Go.GoView.NoFocusSelectionColor"/> is different from
            <see cref="P:Northwoods.Go.GoView.PrimarySelectionColor"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoSelection.OnLostFocus">
            <summary>
            This method is called by <see cref="M:Northwoods.Go.GoView.OnLostFocus(System.EventArgs)"/> to make
            sure all selection handles either disappear (if
            <see cref="P:Northwoods.Go.GoView.HidesSelection"/> is true), or appear with the
            <see cref="P:Northwoods.Go.GoView.NoFocusSelectionColor"/> (if different from
            <see cref="P:Northwoods.Go.GoView.PrimarySelectionColor"/>).
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoSelection.View">
            <summary>
            Gets the view that maintains this selection collection.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoSelection.SyncRoot">
            <summary>
            Gets an object to be used for synchronizing access to this collection.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoSelection.Primary">
            <summary>
            Gets the first object in this selection.
            </summary>
            <value>
            If this selection is empty, this value is null.
            </value>
        </member>
        <member name="P:Northwoods.Go.GoSelection.Focused">
            <summary>
            Gets whether this selection thinks its view has gotten focus.
            </summary>
        </member>
        <member name="T:Northwoods.Go.GoSelectionEventHandler">
            <summary>
            Represents methods that handle <see cref="T:Northwoods.Go.GoSelectionEventArgs"/>.
            </summary>
        </member>
        <member name="T:Northwoods.Go.GoSelectionEventArgs">
            <summary>
            Holds information for the <see cref="T:Northwoods.Go.GoView"/> events that involve
            some <see cref="P:Northwoods.Go.GoSelectionEventArgs.GoObject"/>s but are not associated with any input event.
            </summary>
            <remarks>
            Although both this kind of event and <see cref="T:Northwoods.Go.GoObjectEventArgs"/>
            are associated with a particular <see cref="P:Northwoods.Go.GoSelectionEventArgs.GoObject"/>, this class is
            used when no particular mouse input event information is relevant.
            Additional <see cref="T:Northwoods.Go.GoView"/> events are not even associated with
            a particular object--they use the <see cref="T:System.EventArgs"/> class.
            Such events include <see cref="E:Northwoods.Go.GoView.ClipboardPasted"/>,
            <see cref="E:Northwoods.Go.GoView.SelectionCopied"/>, <see cref="E:Northwoods.Go.GoView.SelectionDeleted"/>,
            and <see cref="E:Northwoods.Go.GoView.SelectionMoved"/>.  These events implicitly use
            the <see cref="P:Northwoods.Go.GoView.Selection"/> rather than any one <see cref="P:Northwoods.Go.GoSelectionEventArgs.GoObject"/>.
            </remarks>
            <seealso cref="E:Northwoods.Go.GoView.LinkCreated"/>
            <seealso cref="E:Northwoods.Go.GoView.LinkRelinked"/>
            <seealso cref="E:Northwoods.Go.GoView.ObjectGotSelection"/>
            <seealso cref="E:Northwoods.Go.GoView.ObjectLostSelection"/>
            <seealso cref="E:Northwoods.Go.GoView.ObjectResized"/>
        </member>
        <member name="M:Northwoods.Go.GoSelectionEventArgs.#ctor(Northwoods.Go.GoObject)">
            <summary>
            This constructor creates an <c>EventArgs</c> that knows that a particular
            <see cref="P:Northwoods.Go.GoSelectionEventArgs.GoObject"/> has just been added or removed from the selection.
            </summary>
            <param name="obj"></param>
        </member>
        <member name="P:Northwoods.Go.GoSelectionEventArgs.GoObject">
            <summary>
            Gets the <see cref="P:Northwoods.Go.GoSelectionEventArgs.GoObject"/> associated with this event.
            </summary>
            <remarks>
            </remarks>
        </member>
        <member name="T:Northwoods.Go.GoUndoManager">
            <summary>
            The GoUndoManager class observes and records document changes and supports
            undo and redo operations.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoUndoManager.CopySelectionName">
            <summary>
            The unlocalized name for a drag copy operation, "Copy Selection".
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoUndoManager.MoveSelectionName">
            <summary>
            The unlocalized name for a drag move operation, "Move Selection".
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoUndoManager.DeleteSelectionName">
            <summary>
            The unlocalized name for a delete operation, "Delete Selection".
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoUndoManager.NewLinkName">
            <summary>
            The unlocalized name for a linking operation, "New Link".
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoUndoManager.RelinkName">
            <summary>
            The unlocalized name for a relinking operation, "Relink".
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoUndoManager.ResizeName">
            <summary>
            The unlocalized name for a resize operation, "Resize".
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoUndoManager.CopyName">
            <summary>
            The unlocalized name for a clipboard copy operation, "Copy".
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoUndoManager.CutName">
            <summary>
            The unlocalized name for a clipboard cut operation, "Cut".
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoUndoManager.PasteName">
            <summary>
            The unlocalized name for a clipboard paste operation, "Paste".
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoUndoManager.DropName">
            <summary>
            The unlocalized name for a drag drop operation, "Drop".
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoUndoManager.TextEditName">
            <summary>
            The unlocalized name for a text edit operation, "Text Edit".
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoUndoManager.CollapsedSubGraphName">
            <summary>
            The unlocalized name for a SubGraph collapsing, "Collapsed SubGraph".
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoUndoManager.ExpandedSubGraphName">
            <summary>
            The unlocalized name for a SubGraph expansion, "Expanded SubGraph".
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoUndoManager.ExpandedAllSubGraphsName">
            <summary>
            The unlocalized name for a complete SubGraph expansion, "Expanded All SubGraphs".
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoUndoManager.#ctor">
            <summary>
            Create a <see cref="T:Northwoods.Go.GoUndoManager"/> that is ready to record document
            modifications, but that does not know about any documents yet.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoUndoManager.Clear">
            <summary>
            Clear all of the <see cref="T:Northwoods.Go.GoUndoManagerCompoundEdit"/>s and reset all other state.
            </summary>
            <remarks>
            However, this does not forget the documents that this undo manager is
            managing, nor does it forget the assigned ResourceManager, if any.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoUndoManager.CanUndo">
            <summary>
            This predicate is true when one can call <see cref="M:Northwoods.Go.GoUndoManager.Undo"/>.
            </summary>
            <returns></returns>
            <remarks>
            In order to be able to perform an undo, a transaction must not
            be in progress, nor an undo or a redo.
            Furthermore there must be an <see cref="P:Northwoods.Go.GoUndoManager.EditToUndo"/> that itself
            is ready to be undone.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoUndoManager.Undo"/>
        </member>
        <member name="M:Northwoods.Go.GoUndoManager.Undo">
            <summary>
            Restore the state of some documents to before the current <see cref="T:Northwoods.Go.IGoUndoableEdit"/>.
            </summary>
            <remarks>
            This calls <see cref="M:Northwoods.Go.IGoUndoableEdit.Undo"/> on the current <see cref="P:Northwoods.Go.GoUndoManager.EditToUndo"/>.
            This also calls <see cref="M:Northwoods.Go.GoDocument.InvalidateViews"/> on each of the documents
            that this undo manager is observing.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoUndoManager.CanUndo"/>
        </member>
        <member name="M:Northwoods.Go.GoUndoManager.CanRedo">
            <summary>
            This predicate is true when one can call <see cref="M:Northwoods.Go.GoUndoManager.Redo"/>.
            </summary>
            <returns></returns>
            <remarks>
            In order to be able to perform a redo, a transaction must not
            be in progress, nor an undo or a redo.
            Furthermore there must be an <see cref="P:Northwoods.Go.GoUndoManager.EditToRedo"/> that itself
            is ready to be redone.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoUndoManager.Redo"/>
        </member>
        <member name="M:Northwoods.Go.GoUndoManager.Redo">
            <summary>
            Restore the state of some documents to after the current <see cref="T:Northwoods.Go.IGoUndoableEdit"/>.
            </summary>
            <remarks>
            This calls <see cref="M:Northwoods.Go.IGoUndoableEdit.Redo"/> on the current <see cref="P:Northwoods.Go.GoUndoManager.EditToRedo"/>.
            This also calls <see cref="M:Northwoods.Go.GoDocument.InvalidateViews"/> on each of the documents
            that this undo manager is observing.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoUndoManager.CanRedo"/>
        </member>
        <member name="M:Northwoods.Go.GoUndoManager.GetPresentationName(System.String)">
            <summary>
            Look up a string in a <c>ResourceManager</c>.
            </summary>
            <param name="tname"></param>
            <returns></returns>
            <remarks>
            This method first tries the <see cref="P:Northwoods.Go.GoUndoManager.ResourceManager"/> property.
            Otherwise it just returns <paramref name="tname"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoUndoManager.AddDocument(Northwoods.Go.GoDocument)">
            <summary>
            Make sure this undo manager knows about a <see cref="T:Northwoods.Go.GoDocument"/> for which
            it is receiving document Changed event notifications.
            </summary>
            <param name="doc"></param>
            <remarks>
            This just adds <paramref name="doc"/> to the list of <see cref="P:Northwoods.Go.GoUndoManager.Documents"/>.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoUndoManager.RemoveDocument(Northwoods.Go.GoDocument)"/>
        </member>
        <member name="M:Northwoods.Go.GoUndoManager.RemoveDocument(Northwoods.Go.GoDocument)">
            <summary>
            Call this method to inform this undo manager that it no longer will be
            notified of document Changed events.
            </summary>
            <param name="doc"></param>
            <remarks>
            This just removes <paramref name="doc"/> from the list of <see cref="P:Northwoods.Go.GoUndoManager.Documents"/>.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoUndoManager.AddDocument(Northwoods.Go.GoDocument)"/>
        </member>
        <member name="M:Northwoods.Go.GoUndoManager.DocumentChanged(System.Object,Northwoods.Go.GoChangedEventArgs)">
            <summary>
            Create an <see cref="T:Northwoods.Go.IGoUndoableEdit"/> for a <see cref="T:Northwoods.Go.GoDocument"/> Changed event.
            </summary>
            <param name="sender"></param>
            <param name="e"></param>
            <remarks>
            This calls <see cref="M:Northwoods.Go.GoUndoManager.SkipEvent(Northwoods.Go.GoChangedEventArgs)"/> if for some reason we should ignore
            the <paramref name="evt"/>.
            This then creates a <see cref="T:Northwoods.Go.GoChangedEventArgs"/> and adds it to the
            <see cref="P:Northwoods.Go.GoUndoManager.CurrentEdit"/>, a <see cref="T:Northwoods.Go.GoUndoManagerCompoundEdit"/> which it allocates
            if needed.
            This method always ignores all Changed events while we are performing an
            <see cref="M:Northwoods.Go.GoUndoManager.Undo"/> or <see cref="M:Northwoods.Go.GoUndoManager.Redo"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoUndoManager.SkipEvent(Northwoods.Go.GoChangedEventArgs)">
            <summary>
            This predicate is responsible for deciding if a <see cref="T:Northwoods.Go.GoChangedEventArgs"/>
            is not interesting enough to be recorded.
            </summary>
            <param name="evt"></param>
            <returns></returns>
            <remarks>
            This returns true:
            if the <see cref="P:Northwoods.Go.GoChangedEventArgs.Document"/>'s <see cref="P:Northwoods.Go.GoDocument.SkipsUndoManager"/>
            property is true, or if the <see cref="P:Northwoods.Go.GoChangedEventArgs.Hint"/> is
            <see cref="F:Northwoods.Go.GoDocument.RepaintAll"/>, or if it's describing a changed object, and
            the object's <see cref="P:Northwoods.Go.GoObject.SkipsUndoManager"/> property is true or if
            the <see cref="P:Northwoods.Go.GoChangedEventArgs.SubHint"/> is <see cref="F:Northwoods.Go.GoObject.RepaintAll"/>.
            </remarks>
        </member>
        <member name="M:Northwoods.Go.GoUndoManager.StartTransaction">
            <summary>
            Begin a transaction, where the changes are held by a <see cref="T:Northwoods.Go.GoUndoManagerCompoundEdit"/>.
            </summary>
            <returns>true if starting a top-level transaction</returns>
            <remarks>
            Transactions can be nested:
            <list type="numbered">
            <item><c>StartTransaction</c> returns true</item>
            <item><c>StartTransaction</c> returns false</item>
            <item><c>FinishTransaction</c> returns false</item>
            <item><c>FinishTransaction</c> returns true</item>
            </list>
            Nested transactions will share the same compound edit as the top-level one.
            </remarks>
            <seealso cref="M:Northwoods.Go.GoUndoManager.EndTransaction(System.Boolean,System.String)"/>
        </member>
        <member name="M:Northwoods.Go.GoUndoManager.AbortTransaction">
            <summary>
            Just call <see cref="M:Northwoods.Go.GoUndoManager.EndTransaction(System.Boolean,System.String)"/>, aborting the current transaction.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.GoUndoManager.FinishTransaction(System.String)">
            <summary>
            Just call <see cref="M:Northwoods.Go.GoUndoManager.EndTransaction(System.Boolean,System.String)"/>, committing the current transaction,
            with the given transaction name.
            </summary>
            <param name="tname"></param>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.GoUndoManager.EndTransaction(System.Boolean,System.String)">
            <summary>
            Stop the current transaction, either aborting it or committing it.
            </summary>
            <param name="commit">true to terminate the transaction normally;
            false to abort it</param>
            <param name="pname">a string describing the transaction,
            used for the <see cref="P:Northwoods.Go.IGoUndoableEdit.PresentationName"/></param>
            <returns>true for a committed top-level transaction</returns>
            <remarks>
            If this call stops a top-level transaction, a value of false for
            <paramref name="commit"/> just clears the information in the
            <see cref="P:Northwoods.Go.GoUndoManager.CurrentEdit"/>.
            If <paramref name="commit"/> is true for a top-level transaction,
            we mark the <see cref="P:Northwoods.Go.GoUndoManager.CurrentEdit"/> complete and add it to the
            list of compound edits that this undo manager is recording.
            Committing a transaction when there have been some undos without
            corresponding redos will throw away the compound edits holding
            changes that happened after the current state, before adding this
            new compound edit to the undo manager's list of edits.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoUndoManager.EditToUndo">
            <summary>
            Gets the current GoUndoManagerCompoundEdit to be undone, or null if there is none.
            </summary>
            <seealso cref="M:Northwoods.Go.GoUndoManager.CanUndo"/>
            <seealso cref="M:Northwoods.Go.GoUndoManager.Undo"/>
            <seealso cref="P:Northwoods.Go.GoUndoManager.AllEdits"/>
            <seealso cref="P:Northwoods.Go.GoUndoManager.UndoEditIndex"/>
        </member>
        <member name="P:Northwoods.Go.GoUndoManager.IsUndoing">
            <summary>
            This predicate is true during a call to <see cref="M:Northwoods.Go.GoUndoManager.Undo"/>.
            </summary>
            <remarks>
            When this property is true, <see cref="M:Northwoods.Go.GoUndoManager.CanUndo"/> and
            <see cref="M:Northwoods.Go.GoUndoManager.CanRedo"/> will be false.
            To avoid confusion, all document change events are ignored
            when this property is true.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoUndoManager.UndoPresentationName">
            <summary>
            Gets the user-visible string description of the next undo action.
            </summary>
            <seealso cref="P:Northwoods.Go.IGoUndoableEdit.PresentationName"/>.
        </member>
        <member name="P:Northwoods.Go.GoUndoManager.EditToRedo">
            <summary>
            Gets the current GoUndoManagerCompoundEdit to be redone, or null if there is none.
            </summary>
            <seealso cref="M:Northwoods.Go.GoUndoManager.CanRedo"/>
            <seealso cref="M:Northwoods.Go.GoUndoManager.Redo"/>
            <seealso cref="P:Northwoods.Go.GoUndoManager.AllEdits"/>
            <seealso cref="P:Northwoods.Go.GoUndoManager.UndoEditIndex"/>
        </member>
        <member name="P:Northwoods.Go.GoUndoManager.IsRedoing">
            <summary>
            This predicate is true during a call to <see cref="M:Northwoods.Go.GoUndoManager.Redo"/>.
            </summary>
            <remarks>
            When this property is true, <see cref="M:Northwoods.Go.GoUndoManager.CanUndo"/> and
            <see cref="M:Northwoods.Go.GoUndoManager.CanRedo"/> will be false.
            To avoid confusion, all document change events are ignored
            when this property is true.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoUndoManager.RedoPresentationName">
            <summary>
            Gets the user-visible string description of the next redo action.
            </summary>
            <seealso cref="P:Northwoods.Go.IGoUndoableEdit.PresentationName"/>.
        </member>
        <member name="P:Northwoods.Go.GoUndoManager.ResourceManager">
            <summary>
             Gets or sets the ResourceManager used to get presentation names.
            </summary>
            <value>
            The default value is null, which means the standard presentation names
            are not replaced by any substitute strings from resource managers.
            </value>
        </member>
        <member name="P:Northwoods.Go.GoUndoManager.AllEdits">
            <summary>
            Gets a list of all of the compound edits.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoUndoManager.MaximumEditCount">
            <summary>
            Gets or sets the maximum number of compound edits that this undo manager will remember.
            </summary>
            <value>
            If the value is negative, no limit is assumed.
            A new value of zero is treated as if the new value were one.
            The initial value is -1.
            </value>
            <remarks>
            This property is useful in helping limit the memory consumption of typical application usage.
            But note that this only limits the number of compound edits, not the size of any individual
            <see cref="T:Northwoods.Go.GoUndoManagerCompoundEdit"/>, which may still have an unlimited number of
            <see cref="T:Northwoods.Go.GoChangedEventArgs"/>s.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoUndoManager.UndoEditIndex">
            <summary>
            Gets the index into AllEdits for the current undoable edit.
            </summary>
            <value>
            -1 if there's no undoable edit to be undone.
            </value>
        </member>
        <member name="P:Northwoods.Go.GoUndoManager.CurrentEdit">
            <summary>
            Gets the current compound edit for recording additional document change events.
            </summary>
        </member>
        <member name="P:Northwoods.Go.GoUndoManager.Documents">
            <summary>
            Gets a list of documents for which this UndoManager is recording undo/redo
            information.
            </summary>
            <remarks>
            You can manipulate this list explicitly by calling
            <see cref="M:Northwoods.Go.GoUndoManager.AddDocument(Northwoods.Go.GoDocument)"/> and <see cref="M:Northwoods.Go.GoUndoManager.RemoveDocument(Northwoods.Go.GoDocument)"/>.
            Setting <see cref="P:Northwoods.Go.GoDocument.UndoManager"/> automatically calls these methods.
            <see cref="M:Northwoods.Go.GoUndoManager.Undo"/> and <see cref="M:Northwoods.Go.GoUndoManager.Redo"/> use this list to call
            <see cref="M:Northwoods.Go.GoDocument.InvalidateViews"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoUndoManager.TransactionLevel">
            <summary>
            Gets the current transaction level.
            </summary>
            <value>
            This value is zero when no transaction is in progress.
            The initial value is zero.
            <see cref="M:Northwoods.Go.GoUndoManager.StartTransaction"/> will increment this value;
            <see cref="M:Northwoods.Go.GoUndoManager.EndTransaction(System.Boolean,System.String)"/> will decrement it.
            When this value is greater than zero, <see cref="M:Northwoods.Go.GoUndoManager.CanUndo"/>
            and <see cref="M:Northwoods.Go.GoUndoManager.CanRedo"/> will be false, because
            additional logically related document change events may occur.
            </value>
        </member>
        <member name="P:Northwoods.Go.GoUndoManager.ChecksTransactionLevel">
            <summary>
             Gets or sets whether this undo manager will output warnings to Trace listeners
             when document changes occur outside of a transaction.
            </summary>
            <value>
            This defaults to false.
            </value>
        </member>
        <member name="T:Northwoods.Go.GoUndoManagerCompoundEdit">
            <summary>
            This class is used to hold a list of <see cref="T:Northwoods.Go.GoChangedEventArgs"/> that
            should be undone or redone altogether.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoUndoManagerCompoundEdit.#ctor">
            <summary>
            Construct an empty list of edits.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoUndoManagerCompoundEdit.Clear">
            <summary>
            Clear all of the <see cref="T:Northwoods.Go.IGoUndoableEdit"/>s and forget all references to them.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoUndoManagerCompoundEdit.CanUndo">
            <summary>
            This predicate returns true if you can call <see cref="M:Northwoods.Go.GoUndoManagerCompoundEdit.Undo"/>--
            namely when <see cref="P:Northwoods.Go.GoUndoManagerCompoundEdit.IsComplete"/> is true and there are some edits.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.GoUndoManagerCompoundEdit.Undo">
            <summary>
            Undo all of the <see cref="T:Northwoods.Go.IGoUndoableEdit"/>s, in reverse order.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoUndoManagerCompoundEdit.CanRedo">
            <summary>
            This predicate returns true if you can call <see cref="M:Northwoods.Go.GoUndoManagerCompoundEdit.Redo"/>--
            namely when <see cref="P:Northwoods.Go.GoUndoManagerCompoundEdit.IsComplete"/> is true and there are some edits.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Northwoods.Go.GoUndoManagerCompoundEdit.Redo">
            <summary>
            Redo all of the <see cref="T:Northwoods.Go.IGoUndoableEdit"/>s, in forwards order.
            </summary>
        </member>
        <member name="M:Northwoods.Go.GoUndoManagerCompoundEdit.AddEdit(Northwoods.Go.IGoUndoableEdit)">
            <summary>
            Add an <see cref="T:Northwoods.Go.IGoUndoableEdit"/> to the end of the list.
            </summary>
            <param name="edit"></param>
        </member>
        <member name="P:Northwoods.Go.GoUndoManagerCompoundEdit.PresentationName">
            <summary>
            Gets the user-visible string description of this compound edit.
            </summary>
            <remarks>
            This property is normally set to the value of
            <see cref="M:Northwoods.Go.GoUndoManager.GetPresentationName(System.String)"/> as part of
            <see cref="M:Northwoods.Go.GoUndoManager.EndTransaction(System.Boolean,System.String)"/>.
            This property is used by the normal implementations of
            <see cref="P:Northwoods.Go.GoUndoManager.UndoPresentationName"/> and
            <see cref="P:Northwoods.Go.GoUndoManager.RedoPresentationName"/>
            for generating undo and redo specific descriptions for this
            compound edit.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoUndoManagerCompoundEdit.AllEdits">
            <summary>
            Gets a list of all the <see cref="T:Northwoods.Go.IGoUndoableEdit"/>s in this compound edit.
            </summary>
            <remarks>
            Each item is normally an instance of <see cref="T:Northwoods.Go.GoChangedEventArgs"/>.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.GoUndoManagerCompoundEdit.IsComplete">
            <summary>
            Gets or sets whether we can add more undoable edits to this compound edit.
            </summary>
            <value>
            This is initially false.  It can only be set to true,
            which is what <see cref="M:Northwoods.Go.GoUndoManager.EndTransaction(System.Boolean,System.String)"/> does.
            </value>
        </member>
        <member name="T:Northwoods.Go.GoViewScrollBarVisibility">
            <summary>
            Specifies when a scroll bar should be visible.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoViewScrollBarVisibility.Hide">
            <summary>
            Do not show the scroll bar at any time.
            See <see cref="P:Northwoods.Go.GoView.ShowVerticalScrollBar"/> and <see cref="P:Northwoods.Go.GoView.ShowHorizontalScrollBar"/>.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoViewScrollBarVisibility.Show">
            <summary>
            Always show the scroll bar, even if disabled.
            See <see cref="P:Northwoods.Go.GoView.ShowVerticalScrollBar"/> and <see cref="P:Northwoods.Go.GoView.ShowHorizontalScrollBar"/>.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoViewScrollBarVisibility.IfNeeded">
            <summary>
            Show the scroll bar if needed, and hide it if not needed.
            See <see cref="P:Northwoods.Go.GoView.ShowVerticalScrollBar"/> and <see cref="P:Northwoods.Go.GoView.ShowHorizontalScrollBar"/>.
            </summary>
        </member>
        <member name="T:Northwoods.Go.GoViewGridStyle">
            <summary>
            Specifies the appearance of the grid.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoViewGridStyle.None">
            <summary>
            Do not display any grid.  See <see cref="P:Northwoods.Go.GoView.GridStyle"/>.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoViewGridStyle.Dot">
            <summary>
            Display a grid consisting of dots.  See <see cref="P:Northwoods.Go.GoView.GridStyle"/>.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoViewGridStyle.Cross">
            <summary>
            Display a grid consisting of small crosses.  See <see cref="P:Northwoods.Go.GoView.GridStyle"/>.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoViewGridStyle.Line">
            <summary>
            Display a grid consisting of lines.  See <see cref="P:Northwoods.Go.GoView.GridStyle"/>.
            </summary>
        </member>
        <member name="T:Northwoods.Go.GoViewSnapStyle">
            <summary>
            Specifies the move or resize behavior based on the grid.
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoViewSnapStyle.None">
            <summary>
            Ignore the grid while moving or resizing an object.
            See <see cref="P:Northwoods.Go.GoView.GridSnapDrag"/> and <see cref="P:Northwoods.Go.GoView.GridSnapResize"/>
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoViewSnapStyle.Jump">
            <summary>
            Move or resize an object to a grid point continuously as the mouse moves.
            See <see cref="P:Northwoods.Go.GoView.GridSnapDrag"/> and <see cref="P:Northwoods.Go.GoView.GridSnapResize"/>
            </summary>
        </member>
        <member name="F:Northwoods.Go.GoViewSnapStyle.After">
            <summary>
            Move or resize an object to a grid point only on a mouse up.
            See <see cref="P:Northwoods.Go.GoView.GridSnapDrag"/> and <see cref="P:Northwoods.Go.GoView.GridSnapResize"/>
            </summary>
        </member>
        <member name="T:Northwoods.Go.ToolTip">
            <summary>
            This subclass of <see cref="T:Northwoods.Go.GoText"/> provides a simplified substitute
            for the Windows Forms ToolTip control for displaying <see cref="T:Northwoods.Go.GoObject"/>
            specific information within a <see cref="T:Northwoods.Go.GoView"/>.
            </summary>
        </member>
        <member name="F:Northwoods.Go.ToolTip.ChangedActive">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.ToolTip.ChangedInitialDelay">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="F:Northwoods.Go.ToolTip.ChangedAutoPopDelay">
            <summary>
            This is a <see cref="M:Northwoods.Go.GoObject.Changed(System.Int32,System.Int32,System.Object,System.Drawing.RectangleF,System.Int32,System.Object,System.Drawing.RectangleF)"/> subhint.
            </summary>
        </member>
        <member name="M:Northwoods.Go.ToolTip.#ctor">
            <summary>
            Create a tooltip-looking text object.
            </summary>
        </member>
        <member name="M:Northwoods.Go.ToolTip.Finalize">
            <summary>
            Call <c>Dispose()</c>.
            </summary>
        </member>
        <member name="M:Northwoods.Go.ToolTip.Dispose">
            <summary>
            Release any Timer resources.
            </summary>
        </member>
        <member name="M:Northwoods.Go.ToolTip.GetToolTip(System.Windows.Forms.Control)">
            <summary>
            This just returns the <see cref="P:Northwoods.Go.GoText.Text"/> property.
            </summary>
            <param name="control">ignored</param>
        </member>
        <member name="M:Northwoods.Go.ToolTip.SetToolTip(System.Windows.Forms.Control,System.String)">
            <summary>
            Set the text string displayed by this tooltip.
            </summary>
            <param name="control">this should be the same as this text object's <see cref="P:Northwoods.Go.GoObject.View"/></param>
            <param name="caption">the new text string; null or an empty string will make the tooltip invisible</param>
        </member>
        <member name="M:Northwoods.Go.ToolTip.PositionToolTip">
            <summary>
            This method determines the position of this tooltip relative
            to the view's <see cref="P:Northwoods.Go.GoView.LastInput"/>.
            </summary>
            <remarks>
            This also tries to make sure the tooltip is not clipped by the view.
            </remarks>
        </member>
        <member name="P:Northwoods.Go.ToolTip.Active">
            <summary>
            Gets or sets whether this tooltip will be shown at all.
            </summary>
            <value>
            The initial value is true.
            </value>
        </member>
        <member name="P:Northwoods.Go.ToolTip.InitialDelay">
            <summary>
            Gets or sets how long the pointer must remain over an object before
            a tooltip appears.
            </summary>
            <value>
            The unit is milliseconds and must not be negative.
            The default value is 500 milliseconds.
            </value>
        </member>
        <member name="P:Northwoods.Go.ToolTip.AutoPopDelay">
            <summary>
            Gets or sets how long the tooltip should remain visible.
            </summary>
            <value>
            The unit is milliseconds and must not be negative.
            The default value is 5000 milliseconds.
            </value>
        </member>
    </members>
</doc>
