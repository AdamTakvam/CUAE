/* ****************************License******************************** 
** Copyright 1994-2003.  SpeechWorks International, Inc.  All rights
** reserved.
**  
** Use of this software is subject to certain restrictions and limitations
** set forth in a license agreement entered into between SpeechWorks
** International Inc. and the licensee of this software.  Please refer
** to the license agreement for license use rights and restrictions.
**
** Portions of the OpenSpeech Recognizer Software are subject to
** copyrights of AT&T Corp., E-Speech Corporation, Bell Communications
** Research, Inc., European Telecommunications Standards Institute and
** GlobeTrotter Software, Inc.
**      
** SpeechWorks and OpenSpeech are  registered trademarks, and
** SpeechWorks Here, OpenSpeech DialogModules, DialogModules and the
** SpeechWorks logo are trademarks of SpeechWorks International, Inc.
** in the United States and other countries
*/

#ifndef SWIVEAPI_H
#define SWIVEAPI_H

#if defined(_MSC_VER)            /* Microsoft Visual C++ */
  #if !defined(ALTAPI)
    #define ALTAPI __stdcall
  #endif
  #pragma pack(push, 8)
#elif defined(__BORLANDC__)      /* Borland C++ */
  #if !defined(ALTAPI)
    #define ALTAPI __stdcall
  #endif
  #pragma option -a8
#elif defined(__WATCOMC__)       /* Watcom C++ */
  #if !defined(ALTAPI)
    #define ALTAPI __stdcall
  #endif
  #pragma pack(push, 8)
#else                            /* Any other including Unix */
  #if !defined(ALTAPI)
    #define ALTAPI
  #endif
#endif

#ifdef __cplusplus
extern "C" {
#endif

#ifdef SWIVEAPI_IMPL
typedef struct _SWIveHandle SWIveHandle;
#else
typedef void* SWIveHandle;
#endif

typedef enum {
  SWIve_RESULT_SUCCESS = 0,
  SWIve_RESULT_FAILURE,
  SWIve_RESULT_COMMAND,
  SWIve_RESULT_RETRY
} SWIveFuncResult;

/**
 * Called before beginning voice enrollment.  This is should be called to
 * setup the voice enrollment state before the voice enrollment
 * dialogue.
 *
 * @param h        Will be populated with a handle to the ve engine.
 *
 * @returns
 * SWIve_RESULT_SUCCESS:  
 *    Handle succesfully created
 * SWIve_RESULT_FAILURE:
 *    Could not create a handle
 */
SWIveFuncResult ALTAPI SWIveBegin(SWIveHandle** h);

/**
 * Called after the voice enrollment dialogue is over.  THis will free
 * resources allocated during the voice enrollment process.
 *
 * @param h   Handle returned by SWIveBegin() above.
 */
void ALTAPI SWIveEnd(SWIveHandle* h);

/**
 * Called before recognition on each turn of the VE dialogue.  Returns the
 * URI of a grammar to load and activate for the next recognition.  The
 * URI is of the form:
 *    "builtin:grammar/ve?state=..."
 * Where the state is generated by this function.  The confusable words
 * and enrollment grammar should be activated with the weights given by 
 * this function and the names SWIve_CONFUSABLE_NAME and
 * SWIve_ENROLLMENT_NAME respectively.
 *
 * @param h          Handle returned by SWIveBegin() above.
 * @param uri        URI of enrollment grammar
 * @param weight     Weight to use when activating ve grammar
 * @param confusion_weight
 *                   Weight to use when activating confusable word grammar
 * @param cmd_weight Weight to use when activating command grammar
 *
 * @returns
 * SWIve_RESULT_SUCCESS:  
 *    A uri and weights are successfully generated.
 * SWIve_RESULT_FAILURE:
 *    A non-recoverable error occured, enrollment should not continue.
 */
SWIveFuncResult ALTAPI SWIvePrepare(SWIveHandle* h, const wchar_t** uri, 
    int *weight, const wchar_t** consistency_uri, int *consistency_weight, 
    int *confusion_weight, int *cmd_weight);

#define SWIve_GRAMMAR_NAME_KEY "ve_grammar_name"
#define SWIve_GRAMMAR_NAME_KEY_W L"ve_grammar_name"
#define SWIve_CONFUSABLE_NAME "confusable"  /* name of confusable grammar */
#define SWIve_CONFUSABLE_NAME_W L"confusable" 
#define SWIve_ENROLLMENT_NAME "ve"          /* name of enrollment grammar */
#define SWIve_ENROLLMENT_NAME_W L"ve"      
#define SWIve_CONSISTENCY_NAME "consistency"  /* name of consistency grammar */
#define SWIve_CONSISTENCY_NAME_W L"consistency"      

typedef struct {
  int       num_pronunciations;
  wchar_t** pronunciations;  
  wchar_t* confusable;
  int      confusion_level;
} SWIveResults;

enum {
  CONFUSION_LOW = 0,
  CONFUSION_MEDIUM = 10,
  CONFUSION_HIGH = 20
};


/**
 * Called after recognition is done.  This processes the results from the
 * previous recognition and produces a status. 
 * 
 * @param h           Handle returned by SWIveBegin() above.
 * @param xml_results In the form returned by SWIrecGetXMLResult(). 
 * @param results     A pointer to a structure which is filled in according
 *                to the results of processing.  See description of the
 *                results structure above.
 * @returns
 *
 * SWIve_RESULT_SUCCESS:  
 *    A successful enrollment was completed, no more utterances need to be
 *    collected.  "pronunciation" will contain the pronounciation for the
 *    enrolled word.  
 * SWIve_RESULT_FAILURE:
 *    A non-recoverable error occured, enrollment should not continue.
 * SWIve_RESULT_COMMAND:
 *    The highest confidence answer was from a grammar unrelated to
 *    enrollment (a command grammar).
 * SWIve_RESULT_RETRY:
 *    An utterance was collected, but another one is needed to complete
 *    enrollment.  The app should ask the user to repeat the word and
 *    recognize again.
 */
SWIveFuncResult ALTAPI SWIveProcess(SWIveHandle* h, const wchar_t* xml_results,
    const SWIveResults **results);
  
#ifdef __cplusplus
}
#endif

/* Reset the structure packing alignments for different compilers. */

#if defined(_MSC_VER)            /* Microsoft Visual C++ */
  #pragma pack(pop)
#elif defined(__BORLANDC__)      /* Borland C++ */
  #pragma option -a.
#elif defined(__WATCOMC__)       /* Watcom C++ */
  #pragma pack(pop)
#endif

#endif

