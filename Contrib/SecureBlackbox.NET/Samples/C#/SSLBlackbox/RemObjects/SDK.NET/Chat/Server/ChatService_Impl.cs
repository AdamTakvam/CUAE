//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 1.1.4322.573
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace ChatServer 
{
  using System;
  using RemObjects.SDK;
  using RemObjects.SDK.Types;
  using RemObjects.SDK.Server;
  using RemObjects.SDK.Server.ClassFactories;
    
  [RemObjects.SDK.Server.ClassFactories.StandardClassFactory()]
  [RemObjects.SDK.Server.Service(Name="ChatService", InvokerClass=typeof(ChatService_Invoker))]
  public class ChatService_Impl : RemObjects.SDK.Server.Service, IChatService 
  {
    #region ctor
    public ChatService_Impl() : base() 
    {
      this.InitializeComponent();
    }
    #endregion
    #region Form Designer
    private System.ComponentModel.Container components = null;
    private void InitializeComponent() 
    {
    }
    protected override void Dispose(bool aDisposing) 
    {
      if (aDisposing) 
      {
        if ((this.components != null)) 
        {
          this.components.Dispose();
        }
      }
      base.Dispose(aDisposing);
    }
    #endregion

    private IChatEvents ChatEvents
    {
      get
      {
        return (IChatEvents)GetEventSink(typeof(IChatEvents));
      }
    }

    public virtual void Enter(string aUsername, string aPassword) 
    {
      //
      // Store user name in session for future use.
      //
      Session["User"] = aUsername;
      //
      // Subscribe the client to receive future IChatEvents events.
      //
      SubscribeClientEventSink(typeof(IChatEvents));
      //
      // Invoke OnUserEntered event
      //
      ChatEvents.OnUserEntered(aUsername);
    }
    
    public virtual void Leave() 
    {
      //
      // Invoke OnUserLeft event
      //
      ChatEvents.OnUserLeft((string)Session["User"]);
      //
      // Subscribe the client to receive future IChatEvents events.
      //
      UnsubscribeClientEventSink(typeof(IChatEvents));
      //
      // Destro the session; use rwill need to Enter again before he can send messages.
      //
      DestroySession();
    }
    
    public virtual void SendMessage(string aMessage) 
    {
      if (Session["User"] == null)
        throw new ServerException("You need to log on first.");
      //
      // Invoke OnMessageB event
      //
      ChatEvents.OnMessage((string)Session["User"], aMessage);
    }
  }
}
