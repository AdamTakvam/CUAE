using System;
using System.IO;
using System.Web;
using System.Net;
using System.Collections;
using Metreos.Core;
using Metreos.Interfaces;
using Metreos.Messaging;
using Metreos.Samoa.FunctionalTestFramework;

// If you created a designer test application called OneSignal 
// in the ARE test group, its fully qualified name is this.
// Aliases are helpful in this case :)
// This fully qualified name is generated by the intellisense 
// helper logic which inspects your designer test application.
// You will most definitely be replacing this with your own alias...
using OneSignal = Metreos.TestBank.ARE.ARE.OneSignal;

// This should mimic the folder structure of where the test is actually located. 
// Look at any other test in this solution for examples
namespace Metreos.FunctionalTests  
{
    /// <summary>
    ///     The test script template
    /// </summary>
    [Exclusive(IsExclusive=true)] // If your test can be run concurrently with other tests, set this to true.
    [FunctionalTestImpl(IsAutomated=true)] // If your test can run with no user interaction, set to true
    [Issue(Id="")] // If this test tests a Jira issue, say so here.  You can have more than one attribute
    [QaTest(Id="")] // If this test tests Qa issues, say so here.  You can have more than one attribute
    public class TestTemplate : FunctionalTestBase
    {
        /// <summary>
        ///     Make sure your class name and the typeof is the same!!
        /// </summary>
        public TestTemplate() : base(typeof( TestTemplate ))
        {
        }

        /// <summary>
        ///     When your test starts, this is what is executed.
        /// </summary>
        /// <remarks>
        ///     This contents of this template method are not mandatory at all; 
        ///     just showing some common logic that tends to occur
        /// </remarks>
        /// <returns><c>true</c> the test succeeded, <c>false</c> if the test failed</returns>
        public override bool Execute()
        {
            // Most tests aren't very useful without at least one 'TriggerScript' method call!
            // This will trigger one instance of the script1 script in the OneSignal application
            TriggerScript( OneSignal.script1.FullName );

            
            Hashtable triggerInfo = new Hashtable();
            triggerInfo["one"] = 1;

            // Trigger the same script (make a new instance), but send one additional event
            // parameter along with the trigger signal
            TriggerScript( OneSignal.script1.FullName, triggerInfo );

            // This test assumes that when the test script 'script1' starts, it will 
            // send back down one signal.  The WaitForSignal method will block for the specified
            // amount of time, returning true if a signal was received in that time, false
            // if it timed out
            // NOTE: The string argument has no purpose other than 
            // just an idea of what you expect, for documentation's sake. 
            // If *any* signal is received, this method will stop blocking!!!
            if(!WaitForSignal( OneSignal.script1.S_Simple.FullName ))
            {
                // Outputs to the FTF window or command line
                log.Write(System.Diagnostics.TraceLevel.Info, "Did not receive test signal");
                return false; // Test failed
            }
          
            // Test succeeded
            return true;
        }

        /// <summary>
        ///     An example Signal callback 
        /// </summary>
        /// <param name="im">
        ///     The signal contents.  The signal is also a hashtable 
        ///     of key-value pairs, which is important if you sent additional
        ///     information down with your test signal action (Custom Action Parameters)
        /// </param>
        private void SignalReceived(ActionMessage im)
        {
            // Take note of this line of code.  If you want to send a
            // non-triggering event to a running script instance, you need 
            // the routingGuid to send the event.  Every signal sends along with it
            // the instance guid of the application that sent it.
            string routingGuid = im.RoutingGuid;

            // By the way, OneSignal test app doesn't use this event.  The system
            // will report a no handler when this event fires
            SendEvent( OneSignal.script1.E_Event.FullName , routingGuid );

            // SendEvent has a hashtable-argumets overload as well
        }

        /// <summary>
        ///     Tell the Functional Test Framework which 
        ///     tests you need to execute this script.
        ///     When the test starts, the FTF checks that 
        ///     these applications are installed, and 
        ///     installs them if needed.
        /// </summary>
        /// <returns></returns>
        public override string[] GetRequiredTests()
        {
            return new string[] { ( OneSignal.FullName ) };
        }

        /// <summary>
        ///     This is called everytime the test starts, and ends.
        ///     Make sure you clear out state logic variables.  The reason is based
        ///     on the fact that the test is constructed only once for the lifetime
        ///     of the test framework process... so be sure to put all real initialization
        ///     logic in here!
        /// </summary>
        public override void Initialize()
        {
            
        }

        /// <summary>
        ///     Define your Signal callbacks here.
        /// </summary>
        public override CallbackLink[] GetCallbacks()
        {
            return new CallbackLink[] 
            { 
                // This defines one callback:  If the S_Simple signal is received by the WaitForSignal method,
                // then the ReceivedSignal method will launch.
                // If you don't care if a method handles a particular signal, you can put null for the delegate
                new CallbackLink( OneSignal.script1.S_Simple.FullName , new FunctionalTestSignalDelegate( SignalReceived ))
            };
        }
    } 
}
